
STM32H723_SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a48  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08009d14  08009d14  0000ad14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1b4  0800a1b4  0000b1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1bc  0800a1bc  0000b1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a1c0  0800a1c0  0000b1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  24000000  0800a1c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001600  24000028  0800a1ec  0000c028  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001628  0800a1ec  0000c628  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016cdf  00000000  00000000  0000c056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f87  00000000  00000000  00022d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001138  00000000  00000000  00025cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d35  00000000  00000000  00026df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034365  00000000  00000000  00027b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018e62  00000000  00000000  0005be92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00146f20  00000000  00000000  00074cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bbc14  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004770  00000000  00000000  001bbc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  001c03c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000028 	.word	0x24000028
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009cfc 	.word	0x08009cfc

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400002c 	.word	0x2400002c
 8000308:	08009cfc 	.word	0x08009cfc

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b988 	b.w	8000634 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	468e      	mov	lr, r1
 8000344:	4604      	mov	r4, r0
 8000346:	4688      	mov	r8, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d962      	bls.n	8000418 <__udivmoddi4+0xdc>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	b14e      	cbz	r6, 800036c <__udivmoddi4+0x30>
 8000358:	f1c6 0320 	rsb	r3, r6, #32
 800035c:	fa01 f806 	lsl.w	r8, r1, r6
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	40b7      	lsls	r7, r6
 8000366:	ea43 0808 	orr.w	r8, r3, r8
 800036a:	40b4      	lsls	r4, r6
 800036c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fbb8 f1fe 	udiv	r1, r8, lr
 8000378:	0c23      	lsrs	r3, r4, #16
 800037a:	fb0e 8811 	mls	r8, lr, r1, r8
 800037e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000382:	fb01 f20c 	mul.w	r2, r1, ip
 8000386:	429a      	cmp	r2, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x62>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000390:	f080 80ea 	bcs.w	8000568 <__udivmoddi4+0x22c>
 8000394:	429a      	cmp	r2, r3
 8000396:	f240 80e7 	bls.w	8000568 <__udivmoddi4+0x22c>
 800039a:	3902      	subs	r1, #2
 800039c:	443b      	add	r3, r7
 800039e:	1a9a      	subs	r2, r3, r2
 80003a0:	b2a3      	uxth	r3, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003ae:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b2:	459c      	cmp	ip, r3
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0x8e>
 80003b6:	18fb      	adds	r3, r7, r3
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	f080 80d6 	bcs.w	800056c <__udivmoddi4+0x230>
 80003c0:	459c      	cmp	ip, r3
 80003c2:	f240 80d3 	bls.w	800056c <__udivmoddi4+0x230>
 80003c6:	443b      	add	r3, r7
 80003c8:	3802      	subs	r0, #2
 80003ca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ce:	eba3 030c 	sub.w	r3, r3, ip
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11d      	cbz	r5, 80003de <__udivmoddi4+0xa2>
 80003d6:	40f3      	lsrs	r3, r6
 80003d8:	2200      	movs	r2, #0
 80003da:	e9c5 3200 	strd	r3, r2, [r5]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d905      	bls.n	80003f2 <__udivmoddi4+0xb6>
 80003e6:	b10d      	cbz	r5, 80003ec <__udivmoddi4+0xb0>
 80003e8:	e9c5 0100 	strd	r0, r1, [r5]
 80003ec:	2100      	movs	r1, #0
 80003ee:	4608      	mov	r0, r1
 80003f0:	e7f5      	b.n	80003de <__udivmoddi4+0xa2>
 80003f2:	fab3 f183 	clz	r1, r3
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d146      	bne.n	8000488 <__udivmoddi4+0x14c>
 80003fa:	4573      	cmp	r3, lr
 80003fc:	d302      	bcc.n	8000404 <__udivmoddi4+0xc8>
 80003fe:	4282      	cmp	r2, r0
 8000400:	f200 8105 	bhi.w	800060e <__udivmoddi4+0x2d2>
 8000404:	1a84      	subs	r4, r0, r2
 8000406:	eb6e 0203 	sbc.w	r2, lr, r3
 800040a:	2001      	movs	r0, #1
 800040c:	4690      	mov	r8, r2
 800040e:	2d00      	cmp	r5, #0
 8000410:	d0e5      	beq.n	80003de <__udivmoddi4+0xa2>
 8000412:	e9c5 4800 	strd	r4, r8, [r5]
 8000416:	e7e2      	b.n	80003de <__udivmoddi4+0xa2>
 8000418:	2a00      	cmp	r2, #0
 800041a:	f000 8090 	beq.w	800053e <__udivmoddi4+0x202>
 800041e:	fab2 f682 	clz	r6, r2
 8000422:	2e00      	cmp	r6, #0
 8000424:	f040 80a4 	bne.w	8000570 <__udivmoddi4+0x234>
 8000428:	1a8a      	subs	r2, r1, r2
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000430:	b280      	uxth	r0, r0
 8000432:	b2bc      	uxth	r4, r7
 8000434:	2101      	movs	r1, #1
 8000436:	fbb2 fcfe 	udiv	ip, r2, lr
 800043a:	fb0e 221c 	mls	r2, lr, ip, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb04 f20c 	mul.w	r2, r4, ip
 8000446:	429a      	cmp	r2, r3
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x11e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x11c>
 8000452:	429a      	cmp	r2, r3
 8000454:	f200 80e0 	bhi.w	8000618 <__udivmoddi4+0x2dc>
 8000458:	46c4      	mov	ip, r8
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000460:	fb0e 3312 	mls	r3, lr, r2, r3
 8000464:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000468:	fb02 f404 	mul.w	r4, r2, r4
 800046c:	429c      	cmp	r4, r3
 800046e:	d907      	bls.n	8000480 <__udivmoddi4+0x144>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f102 30ff 	add.w	r0, r2, #4294967295
 8000476:	d202      	bcs.n	800047e <__udivmoddi4+0x142>
 8000478:	429c      	cmp	r4, r3
 800047a:	f200 80ca 	bhi.w	8000612 <__udivmoddi4+0x2d6>
 800047e:	4602      	mov	r2, r0
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000486:	e7a5      	b.n	80003d4 <__udivmoddi4+0x98>
 8000488:	f1c1 0620 	rsb	r6, r1, #32
 800048c:	408b      	lsls	r3, r1
 800048e:	fa22 f706 	lsr.w	r7, r2, r6
 8000492:	431f      	orrs	r7, r3
 8000494:	fa0e f401 	lsl.w	r4, lr, r1
 8000498:	fa20 f306 	lsr.w	r3, r0, r6
 800049c:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a4:	4323      	orrs	r3, r4
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	fa1f fc87 	uxth.w	ip, r7
 80004ae:	fbbe f0f9 	udiv	r0, lr, r9
 80004b2:	0c1c      	lsrs	r4, r3, #16
 80004b4:	fb09 ee10 	mls	lr, r9, r0, lr
 80004b8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004bc:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	fa02 f201 	lsl.w	r2, r2, r1
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1a0>
 80004c8:	193c      	adds	r4, r7, r4
 80004ca:	f100 3aff 	add.w	sl, r0, #4294967295
 80004ce:	f080 809c 	bcs.w	800060a <__udivmoddi4+0x2ce>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	f240 8099 	bls.w	800060a <__udivmoddi4+0x2ce>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	eba4 040e 	sub.w	r4, r4, lr
 80004e0:	fa1f fe83 	uxth.w	lr, r3
 80004e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004e8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f0:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x1ce>
 80004f8:	193c      	adds	r4, r7, r4
 80004fa:	f103 3eff 	add.w	lr, r3, #4294967295
 80004fe:	f080 8082 	bcs.w	8000606 <__udivmoddi4+0x2ca>
 8000502:	45a4      	cmp	ip, r4
 8000504:	d97f      	bls.n	8000606 <__udivmoddi4+0x2ca>
 8000506:	3b02      	subs	r3, #2
 8000508:	443c      	add	r4, r7
 800050a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	fba0 ec02 	umull	lr, ip, r0, r2
 8000516:	4564      	cmp	r4, ip
 8000518:	4673      	mov	r3, lr
 800051a:	46e1      	mov	r9, ip
 800051c:	d362      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 800051e:	d05f      	beq.n	80005e0 <__udivmoddi4+0x2a4>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x1fe>
 8000522:	ebb8 0203 	subs.w	r2, r8, r3
 8000526:	eb64 0409 	sbc.w	r4, r4, r9
 800052a:	fa04 f606 	lsl.w	r6, r4, r6
 800052e:	fa22 f301 	lsr.w	r3, r2, r1
 8000532:	431e      	orrs	r6, r3
 8000534:	40cc      	lsrs	r4, r1
 8000536:	e9c5 6400 	strd	r6, r4, [r5]
 800053a:	2100      	movs	r1, #0
 800053c:	e74f      	b.n	80003de <__udivmoddi4+0xa2>
 800053e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000542:	0c01      	lsrs	r1, r0, #16
 8000544:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000548:	b280      	uxth	r0, r0
 800054a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800054e:	463b      	mov	r3, r7
 8000550:	4638      	mov	r0, r7
 8000552:	463c      	mov	r4, r7
 8000554:	46b8      	mov	r8, r7
 8000556:	46be      	mov	lr, r7
 8000558:	2620      	movs	r6, #32
 800055a:	fbb1 f1f7 	udiv	r1, r1, r7
 800055e:	eba2 0208 	sub.w	r2, r2, r8
 8000562:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000566:	e766      	b.n	8000436 <__udivmoddi4+0xfa>
 8000568:	4601      	mov	r1, r0
 800056a:	e718      	b.n	800039e <__udivmoddi4+0x62>
 800056c:	4610      	mov	r0, r2
 800056e:	e72c      	b.n	80003ca <__udivmoddi4+0x8e>
 8000570:	f1c6 0220 	rsb	r2, r6, #32
 8000574:	fa2e f302 	lsr.w	r3, lr, r2
 8000578:	40b7      	lsls	r7, r6
 800057a:	40b1      	lsls	r1, r6
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000584:	430a      	orrs	r2, r1
 8000586:	fbb3 f8fe 	udiv	r8, r3, lr
 800058a:	b2bc      	uxth	r4, r7
 800058c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000590:	0c11      	lsrs	r1, r2, #16
 8000592:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000596:	fb08 f904 	mul.w	r9, r8, r4
 800059a:	40b0      	lsls	r0, r6
 800059c:	4589      	cmp	r9, r1
 800059e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a2:	b280      	uxth	r0, r0
 80005a4:	d93e      	bls.n	8000624 <__udivmoddi4+0x2e8>
 80005a6:	1879      	adds	r1, r7, r1
 80005a8:	f108 3cff 	add.w	ip, r8, #4294967295
 80005ac:	d201      	bcs.n	80005b2 <__udivmoddi4+0x276>
 80005ae:	4589      	cmp	r9, r1
 80005b0:	d81f      	bhi.n	80005f2 <__udivmoddi4+0x2b6>
 80005b2:	eba1 0109 	sub.w	r1, r1, r9
 80005b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ba:	fb09 f804 	mul.w	r8, r9, r4
 80005be:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c2:	b292      	uxth	r2, r2
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	4542      	cmp	r2, r8
 80005ca:	d229      	bcs.n	8000620 <__udivmoddi4+0x2e4>
 80005cc:	18ba      	adds	r2, r7, r2
 80005ce:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d2:	d2c4      	bcs.n	800055e <__udivmoddi4+0x222>
 80005d4:	4542      	cmp	r2, r8
 80005d6:	d2c2      	bcs.n	800055e <__udivmoddi4+0x222>
 80005d8:	f1a9 0102 	sub.w	r1, r9, #2
 80005dc:	443a      	add	r2, r7
 80005de:	e7be      	b.n	800055e <__udivmoddi4+0x222>
 80005e0:	45f0      	cmp	r8, lr
 80005e2:	d29d      	bcs.n	8000520 <__udivmoddi4+0x1e4>
 80005e4:	ebbe 0302 	subs.w	r3, lr, r2
 80005e8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005ec:	3801      	subs	r0, #1
 80005ee:	46e1      	mov	r9, ip
 80005f0:	e796      	b.n	8000520 <__udivmoddi4+0x1e4>
 80005f2:	eba7 0909 	sub.w	r9, r7, r9
 80005f6:	4449      	add	r1, r9
 80005f8:	f1a8 0c02 	sub.w	ip, r8, #2
 80005fc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000600:	fb09 f804 	mul.w	r8, r9, r4
 8000604:	e7db      	b.n	80005be <__udivmoddi4+0x282>
 8000606:	4673      	mov	r3, lr
 8000608:	e77f      	b.n	800050a <__udivmoddi4+0x1ce>
 800060a:	4650      	mov	r0, sl
 800060c:	e766      	b.n	80004dc <__udivmoddi4+0x1a0>
 800060e:	4608      	mov	r0, r1
 8000610:	e6fd      	b.n	800040e <__udivmoddi4+0xd2>
 8000612:	443b      	add	r3, r7
 8000614:	3a02      	subs	r2, #2
 8000616:	e733      	b.n	8000480 <__udivmoddi4+0x144>
 8000618:	f1ac 0c02 	sub.w	ip, ip, #2
 800061c:	443b      	add	r3, r7
 800061e:	e71c      	b.n	800045a <__udivmoddi4+0x11e>
 8000620:	4649      	mov	r1, r9
 8000622:	e79c      	b.n	800055e <__udivmoddi4+0x222>
 8000624:	eba1 0109 	sub.w	r1, r1, r9
 8000628:	46c4      	mov	ip, r8
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	e7c4      	b.n	80005be <__udivmoddi4+0x282>

08000634 <__aeabi_idiv0>:
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <crc32b>:
uint8_t appBuffer[FILE_BUFFER_SIZE];	// File read buffer


#define CRC32_START 0xFFFFFFFF
uint32_t crc32b(uint32_t crc, uint8_t *data, uint32_t size)
{
 8000638:	b480      	push	{r7}
 800063a:	b087      	sub	sp, #28
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < size; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e01d      	b.n	8000686 <crc32b+0x4e>
	{
		crc = crc ^ data[i];
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4053      	eors	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
		for (int j = 8; j; j--)
 800065a:	2308      	movs	r3, #8
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	e00c      	b.n	800067a <crc32b+0x42>
			crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	085a      	lsrs	r2, r3, #1
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	4259      	negs	r1, r3
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <crc32b+0x64>)
 800066e:	400b      	ands	r3, r1
 8000670:	4053      	eors	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
		for (int j = 8; j; j--)
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	3b01      	subs	r3, #1
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <crc32b+0x28>
	for (int i = 0; i < size; i++)
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d8dd      	bhi.n	800064a <crc32b+0x12>
	}
	return crc;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	4618      	mov	r0, r3
 8000692:	371c      	adds	r7, #28
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	edb88320 	.word	0xedb88320

080006a0 <uart_printf>:
	    FILL_ZERO = 1, BASE_8 = 4 + 2, BASE_10 = 8,
	    BASE_16 = 8 + 4 + 2, PUT_PLUS = 16, PUT_MINUS = 32
	};

	void uart_printf(const char * fmt, ...)
	{
 80006a0:	b40f      	push	{r0, r1, r2, r3}
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b0d2      	sub	sp, #328	@ 0x148
 80006a6:	af00      	add	r7, sp, #0
		va_list va;
	    va_start(va, fmt);
 80006a8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80006ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	    char debug_msg[255]; // Message buffer
	    char * buf = debug_msg;
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	    char c;
	    unsigned int num;
	    while ((c  = *(fmt++)))
 80006b8:	e134      	b.n	8000924 <uart_printf+0x284>
	    {
	    	int width = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	    	if (c == '%')
 80006c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80006c4:	2b25      	cmp	r3, #37	@ 0x25
 80006c6:	f040 8125 	bne.w	8000914 <uart_printf+0x274>
	        {
	            int base = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	            int s_int = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	        MORE_FORMAT:
	            c = *(fmt++); // Skip '%', check parameter
 80006d6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	            switch (c)
 80006e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80006ea:	2b78      	cmp	r3, #120	@ 0x78
 80006ec:	f300 811a 	bgt.w	8000924 <uart_printf+0x284>
 80006f0:	2b62      	cmp	r3, #98	@ 0x62
 80006f2:	da09      	bge.n	8000708 <uart_printf+0x68>
 80006f4:	2b25      	cmp	r3, #37	@ 0x25
 80006f6:	d04b      	beq.n	8000790 <uart_printf+0xf0>
 80006f8:	2b25      	cmp	r3, #37	@ 0x25
 80006fa:	f2c0 8113 	blt.w	8000924 <uart_printf+0x284>
 80006fe:	3b30      	subs	r3, #48	@ 0x30
 8000700:	2b09      	cmp	r3, #9
 8000702:	f200 810f 	bhi.w	8000924 <uart_printf+0x284>
 8000706:	e035      	b.n	8000774 <uart_printf+0xd4>
 8000708:	3b62      	subs	r3, #98	@ 0x62
 800070a:	2b16      	cmp	r3, #22
 800070c:	f200 810a 	bhi.w	8000924 <uart_printf+0x284>
 8000710:	a201      	add	r2, pc, #4	@ (adr r2, 8000718 <uart_printf+0x78>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000805 	.word	0x08000805
 800071c:	080007a1 	.word	0x080007a1
 8000720:	080007bd 	.word	0x080007bd
 8000724:	08000925 	.word	0x08000925
 8000728:	08000925 	.word	0x08000925
 800072c:	08000925 	.word	0x08000925
 8000730:	08000925 	.word	0x08000925
 8000734:	080007bd 	.word	0x080007bd
 8000738:	08000925 	.word	0x08000925
 800073c:	08000925 	.word	0x08000925
 8000740:	08000925 	.word	0x08000925
 8000744:	08000925 	.word	0x08000925
 8000748:	08000925 	.word	0x08000925
 800074c:	08000925 	.word	0x08000925
 8000750:	08000925 	.word	0x08000925
 8000754:	08000925 	.word	0x08000925
 8000758:	08000925 	.word	0x08000925
 800075c:	080008df 	.word	0x080008df
 8000760:	08000925 	.word	0x08000925
 8000764:	080007fb 	.word	0x080007fb
 8000768:	08000925 	.word	0x08000925
 800076c:	08000925 	.word	0x08000925
 8000770:	080007f1 	.word	0x080007f1
	            {
	                case '0'...'9': // Width indicators
	                  width = (width * 10) + c - '0';
 8000774:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000778:	4613      	mov	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	461a      	mov	r2, r3
 8000782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8000786:	4413      	add	r3, r2
 8000788:	3b30      	subs	r3, #48	@ 0x30
 800078a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800078e:	e7a2      	b.n	80006d6 <uart_printf+0x36>
	                goto MORE_FORMAT;

	                case '%': // "%%" prints "%"
	                    *(buf++) = '%';
 8000790:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800079a:	2225      	movs	r2, #37	@ 0x25
 800079c:	701a      	strb	r2, [r3, #0]
	                break;
 800079e:	e0c1      	b.n	8000924 <uart_printf+0x284>

	                case 'c': // Character
	                    *(buf++) = va_arg(va, int);
 80007a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80007a4:	1d1a      	adds	r2, r3, #4
 80007a6:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80007aa:	6819      	ldr	r1, [r3, #0]
 80007ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
	                break;
 80007ba:	e0b3      	b.n	8000924 <uart_printf+0x284>

	                case 'd': // Signed integer
	                case 'i': base = 10;
 80007bc:	230a      	movs	r3, #10
 80007be:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	                    s_int = va_arg(va, int);
 80007c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80007c6:	1d1a      	adds	r2, r3, #4
 80007c8:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	                    if (s_int < 0)
 80007d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da05      	bge.n	80007e6 <uart_printf+0x146>
	                       num = -s_int;
 80007da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007de:	425b      	negs	r3, r3
 80007e0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	                    else
	                      num = s_int;
	                  goto ATOI;
 80007e4:	e016      	b.n	8000814 <uart_printf+0x174>
	                      num = s_int;
 80007e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007ea:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	                  goto ATOI;
 80007ee:	e011      	b.n	8000814 <uart_printf+0x174>
	                case 'x':      // Hexadecimal, base 16
	                    base += 6; // 2 + 6 + 8 is base 16
 80007f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80007f4:	3306      	adds	r3, #6
 80007f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	                case 'u':      // Unsigned integer, base 10
	        	        base += 8; // 2 + 8 is base 10
 80007fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80007fe:	3308      	adds	r3, #8
 8000800:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	                case 'b':      // Binary, base 2
	        	        num = va_arg(va, unsigned int);
 8000804:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000808:	1d1a      	adds	r2, r3, #4
 800080a:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	                  ATOI:
	                    char tmp[32]; // 32bit
	                    char *q = tmp;
 8000814:	463b      	mov	r3, r7
 8000816:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	                    do {
	                        int rem = '0' + (num % base);
 800081a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800081e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000822:	fbb3 f1f2 	udiv	r1, r3, r2
 8000826:	fb01 f202 	mul.w	r2, r1, r2
 800082a:	1a9b      	subs	r3, r3, r2
 800082c:	3330      	adds	r3, #48	@ 0x30
 800082e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	                        if (rem > '9')
 8000832:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000836:	2b39      	cmp	r3, #57	@ 0x39
 8000838:	dd04      	ble.n	8000844 <uart_printf+0x1a4>
	                          rem += 7; // Map to 'ABCDEF'
 800083a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800083e:	3307      	adds	r3, #7
 8000840:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	                        *(q++) = rem;
 8000844:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 800084e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	701a      	strb	r2, [r3, #0]
	                    } while ((num /= base));
 8000856:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800085a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8000866:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1d5      	bne.n	800081a <uart_printf+0x17a>

	                    if (s_int < 0)
 800086e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000872:	2b00      	cmp	r3, #0
 8000874:	da06      	bge.n	8000884 <uart_printf+0x1e4>
	                      *(q++) = '-';
 8000876:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 8000880:	222d      	movs	r2, #45	@ 0x2d
 8000882:	701a      	strb	r2, [r3, #0]

	                    width -= q - tmp;
 8000884:	463b      	mov	r3, r7
 8000886:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	                    while (width-- > 0)
 8000896:	e006      	b.n	80008a6 <uart_printf+0x206>
	                      *(buf++) = ' ';
 8000898:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80008a2:	2220      	movs	r2, #32
 80008a4:	701a      	strb	r2, [r3, #0]
	                    while (width-- > 0)
 80008a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dcf1      	bgt.n	8000898 <uart_printf+0x1f8>

	                   while (tmp < q) // Reverse data order, "123" --> "321"
 80008b4:	e00d      	b.n	80008d2 <uart_printf+0x232>
	                       *(buf++) = *(--q);
 80008b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80008c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80008ca:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80008ce:	7812      	ldrb	r2, [r2, #0]
 80008d0:	701a      	strb	r2, [r3, #0]
	                   while (tmp < q) // Reverse data order, "123" --> "321"
 80008d2:	463b      	mov	r3, r7
 80008d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80008d8:	429a      	cmp	r2, r3
 80008da:	d8ec      	bhi.n	80008b6 <uart_printf+0x216>
	                break;
 80008dc:	e022      	b.n	8000924 <uart_printf+0x284>

	                case 's':  // String
	                    const char *p = va_arg(va, const char *);
 80008de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80008e2:	1d1a      	adds	r2, r3, #4
 80008e4:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	                    while (*p)
 80008ee:	e00b      	b.n	8000908 <uart_printf+0x268>
	                        *(buf++) = *(p++);
 80008f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80008f4:	1c53      	adds	r3, r2, #1
 80008f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80008fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80008fe:	1c59      	adds	r1, r3, #1
 8000900:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	701a      	strb	r2, [r3, #0]
	                    while (*p)
 8000908:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1ee      	bne.n	80008f0 <uart_printf+0x250>
 8000912:	e007      	b.n	8000924 <uart_printf+0x284>
	            }
	        }
	        else
	            *(buf++) = c; // Copy literal characters
 8000914:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800091e:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8000922:	701a      	strb	r2, [r3, #0]
	    while ((c  = *(fmt++)))
 8000924:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8000934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8000938:	2b00      	cmp	r3, #0
 800093a:	f47f aebe 	bne.w	80006ba <uart_printf+0x1a>
	    }
	    *buf = '\0'; // Terminate string
 800093e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]

	    va_end(va);


	    HAL_UART_Transmit(&DEBUG_USART_HANDLE, (uint8_t *)debug_msg, buf - debug_msg, HAL_MAX_DELAY);
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	b29a      	uxth	r2, r3
 8000952:	f107 0120 	add.w	r1, r7, #32
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	4808      	ldr	r0, [pc, #32]	@ (800097c <uart_printf+0x2dc>)
 800095c:	f004 fc5b 	bl	8005216 <HAL_UART_Transmit>

	    #ifdef PROGRESS_LED_PIN
			HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN);
 8000960:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000964:	4806      	ldr	r0, [pc, #24]	@ (8000980 <uart_printf+0x2e0>)
 8000966:	f001 fc21 	bl	80021ac <HAL_GPIO_TogglePin>
		#endif
	}
 800096a:	bf00      	nop
 800096c:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8000970:	46bd      	mov	sp, r7
 8000972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000976:	b004      	add	sp, #16
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	240000cc 	.word	0x240000cc
 8000980:	58020000 	.word	0x58020000

08000984 <compareFlashToFile>:

#endif

  // Return value: 0=equal, 1=different, 2=error
  uint32_t compareFlashToFile(void)
  {
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
	uint32_t i = 0, j;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
	int result = f_lseek(&fwFile, 0); // Not strictly needed
 800098e:	2100      	movs	r1, #0
 8000990:	4838      	ldr	r0, [pc, #224]	@ (8000a74 <compareFlashToFile+0xf0>)
 8000992:	f008 fd7e 	bl	8009492 <f_lseek>
 8000996:	4603      	mov	r3, r0
 8000998:	617b      	str	r3, [r7, #20]
	uint32_t crc32 = CRC32_START;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	613b      	str	r3, [r7, #16]
	int difference_found = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
	int different = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
    unsigned int bytesRead;

	while ((i < appSize) && !result)
 80009a8:	e03d      	b.n	8000a26 <compareFlashToFile+0xa2>
	{
		result = f_read(&fwFile, appBuffer, FILE_BUFFER_SIZE, &bytesRead);
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b0:	4931      	ldr	r1, [pc, #196]	@ (8000a78 <compareFlashToFile+0xf4>)
 80009b2:	4830      	ldr	r0, [pc, #192]	@ (8000a74 <compareFlashToFile+0xf0>)
 80009b4:	f008 fb86 	bl	80090c4 <f_read>
 80009b8:	4603      	mov	r3, r0
 80009ba:	617b      	str	r3, [r7, #20]
		crc32 = crc32b(crc32, appBuffer, bytesRead);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	461a      	mov	r2, r3
 80009c0:	492d      	ldr	r1, [pc, #180]	@ (8000a78 <compareFlashToFile+0xf4>)
 80009c2:	6938      	ldr	r0, [r7, #16]
 80009c4:	f7ff fe38 	bl	8000638 <crc32b>
 80009c8:	6138      	str	r0, [r7, #16]
		j = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
		while ((j < bytesRead) && !result)
 80009ce:	e011      	b.n	80009f4 <compareFlashToFile+0x70>
		{
			if (*(__IO char*)(FLASH_USER_START_ADDR + i + j) != appBuffer[j])
 80009d0:	69fa      	ldr	r2, [r7, #28]
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	441a      	add	r2, r3
 80009d6:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <compareFlashToFile+0xf8>)
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4926      	ldr	r1, [pc, #152]	@ (8000a78 <compareFlashToFile+0xf4>)
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	440b      	add	r3, r1
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d001      	beq.n	80009ee <compareFlashToFile+0x6a>
				difference_found = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
			j++;
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	3301      	adds	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
		while ((j < bytesRead) && !result)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d202      	bcs.n	8000a02 <compareFlashToFile+0x7e>
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0e6      	beq.n	80009d0 <compareFlashToFile+0x4c>
		}

		if (difference_found)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d007      	beq.n	8000a18 <compareFlashToFile+0x94>
		{
			uart_printf("*");
 8000a08:	481d      	ldr	r0, [pc, #116]	@ (8000a80 <compareFlashToFile+0xfc>)
 8000a0a:	f7ff fe49 	bl	80006a0 <uart_printf>
			different = 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
			difference_found = 0; // Reset
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	e002      	b.n	8000a1e <compareFlashToFile+0x9a>
		}
		else
			uart_printf("=");
 8000a18:	481a      	ldr	r0, [pc, #104]	@ (8000a84 <compareFlashToFile+0x100>)
 8000a1a:	f7ff fe41 	bl	80006a0 <uart_printf>

		i += bytesRead;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	4413      	add	r3, r2
 8000a24:	61fb      	str	r3, [r7, #28]
	while ((i < appSize) && !result)
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <compareFlashToFile+0x104>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d202      	bcs.n	8000a36 <compareFlashToFile+0xb2>
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0b9      	beq.n	80009aa <compareFlashToFile+0x26>
	}

	if (result)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d006      	beq.n	8000a4a <compareFlashToFile+0xc6>
	{
		uart_printf(" Error\r\nFile read error: %d\r\n", result);
 8000a3c:	6979      	ldr	r1, [r7, #20]
 8000a3e:	4813      	ldr	r0, [pc, #76]	@ (8000a8c <compareFlashToFile+0x108>)
 8000a40:	f7ff fe2e 	bl	80006a0 <uart_printf>
		return -1;
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	e010      	b.n	8000a6c <compareFlashToFile+0xe8>
	}
	else
	if (different)
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <compareFlashToFile+0xd4>
		uart_printf(" Different\r\nFlash contents differs, update is required\r\n");
 8000a50:	480f      	ldr	r0, [pc, #60]	@ (8000a90 <compareFlashToFile+0x10c>)
 8000a52:	f7ff fe25 	bl	80006a0 <uart_printf>
 8000a56:	e008      	b.n	8000a6a <compareFlashToFile+0xe6>
	else {
		uart_printf(" Equal\r\nFlash contents is the same, update is not required\r\n");
 8000a58:	480e      	ldr	r0, [pc, #56]	@ (8000a94 <compareFlashToFile+0x110>)
 8000a5a:	f7ff fe21 	bl	80006a0 <uart_printf>
		// Actual checksum is the inverse of the returned number
		uart_printf("Flash CRC32: 0x%x\r\n", ~crc32);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <compareFlashToFile+0x114>)
 8000a66:	f7ff fe1b 	bl	80006a0 <uart_printf>
	}

	return different; // 0=equal, 1=different
 8000a6a:	68bb      	ldr	r3, [r7, #8]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	24000390 	.word	0x24000390
 8000a78:	240005c8 	.word	0x240005c8
 8000a7c:	08020000 	.word	0x08020000
 8000a80:	08009d14 	.word	0x08009d14
 8000a84:	08009d18 	.word	0x08009d18
 8000a88:	240005c4 	.word	0x240005c4
 8000a8c:	08009d1c 	.word	0x08009d1c
 8000a90:	08009d3c 	.word	0x08009d3c
 8000a94:	08009d78 	.word	0x08009d78
 8000a98:	08009db8 	.word	0x08009db8

08000a9c <CopyFileToFlashMemory>:

int CopyFileToFlashMemory(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0

// STM32H7xx FLASH SECTORS 0-7 all are 128 KBytes (FLASH_SECTOR_SIZE)

	// Erase required sectors to fit the user application
	uint32_t erasedSize = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t sector = FLASH_USER_START_SECTOR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]

	HAL_FLASH_Unlock();
 8000aaa:	f001 f90b 	bl	8001cc4 <HAL_FLASH_Unlock>
	FRESULT result = f_lseek(&fwFile, 0);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	484e      	ldr	r0, [pc, #312]	@ (8000bec <CopyFileToFlashMemory+0x150>)
 8000ab2:	f008 fcee 	bl	8009492 <f_lseek>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	77fb      	strb	r3, [r7, #31]

	while ((erasedSize < appSize) && !result)
 8000aba:	e00f      	b.n	8000adc <CopyFileToFlashMemory+0x40>
	{
		uart_printf("Erasing 128KB flash sector: %u\r\n", sector);
 8000abc:	6a39      	ldr	r1, [r7, #32]
 8000abe:	484c      	ldr	r0, [pc, #304]	@ (8000bf0 <CopyFileToFlashMemory+0x154>)
 8000ac0:	f7ff fdee 	bl	80006a0 <uart_printf>

		FLASH_Erase_Sector(sector, FLASH_BANK_1, FLASH_VOLTAGE_RANGE_3);
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	6a38      	ldr	r0, [r7, #32]
 8000aca:	f001 f98b 	bl	8001de4 <FLASH_Erase_Sector>

		erasedSize += FLASH_SECTOR_SIZE;
 8000ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad0:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
		sector++;
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
	while ((erasedSize < appSize) && !result)
 8000adc:	4b45      	ldr	r3, [pc, #276]	@ (8000bf4 <CopyFileToFlashMemory+0x158>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d202      	bcs.n	8000aec <CopyFileToFlashMemory+0x50>
 8000ae6:	7ffb      	ldrb	r3, [r7, #31]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0e7      	beq.n	8000abc <CopyFileToFlashMemory+0x20>
	}

	uart_printf("Flashing user application to: 0x0%x\r\n", FLASH_USER_START_ADDR);
 8000aec:	4942      	ldr	r1, [pc, #264]	@ (8000bf8 <CopyFileToFlashMemory+0x15c>)
 8000aee:	4843      	ldr	r0, [pc, #268]	@ (8000bfc <CopyFileToFlashMemory+0x160>)
 8000af0:	f7ff fdd6 	bl	80006a0 <uart_printf>

	uint32_t byteCounter = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
	uint32_t i;
	uint32_t crc32 = CRC32_START;
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
 8000afc:	613b      	str	r3, [r7, #16]
	unsigned int bytesRead;
	while ((byteCounter < appSize) && !result)
 8000afe:	e040      	b.n	8000b82 <CopyFileToFlashMemory+0xe6>
	{
		result = f_read(&fwFile, appBuffer, FILE_BUFFER_SIZE, &bytesRead);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b06:	493e      	ldr	r1, [pc, #248]	@ (8000c00 <CopyFileToFlashMemory+0x164>)
 8000b08:	4838      	ldr	r0, [pc, #224]	@ (8000bec <CopyFileToFlashMemory+0x150>)
 8000b0a:	f008 fadb 	bl	80090c4 <f_read>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	77fb      	strb	r3, [r7, #31]
		crc32 = crc32b(crc32, appBuffer, bytesRead);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	461a      	mov	r2, r3
 8000b16:	493a      	ldr	r1, [pc, #232]	@ (8000c00 <CopyFileToFlashMemory+0x164>)
 8000b18:	6938      	ldr	r0, [r7, #16]
 8000b1a:	f7ff fd8d 	bl	8000638 <crc32b>
 8000b1e:	6138      	str	r0, [r7, #16]

		if (bytesRead < FILE_BUFFER_SIZE) // Add some "erased flash" bytes to the buffer
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b26:	d20a      	bcs.n	8000b3e <CopyFileToFlashMemory+0xa2>
			memset(appBuffer + bytesRead, 0xFF, (FILE_BUFFER_SIZE - bytesRead) % FLASHWORD);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a35      	ldr	r2, [pc, #212]	@ (8000c00 <CopyFileToFlashMemory+0x164>)
 8000b2c:	1898      	adds	r0, r3, r2
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	425b      	negs	r3, r3
 8000b32:	f003 031f 	and.w	r3, r3, #31
 8000b36:	461a      	mov	r2, r3
 8000b38:	21ff      	movs	r1, #255	@ 0xff
 8000b3a:	f009 f8b2 	bl	8009ca2 <memset>

		// Write the data to flash memory
		i = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
		while ((i < bytesRead) && !result)
 8000b42:	e010      	b.n	8000b66 <CopyFileToFlashMemory+0xca>
		{
			result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_USER_START_ADDR + byteCounter + i, (volatile uint32_t)(appBuffer + i));
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	441a      	add	r2, r3
 8000b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <CopyFileToFlashMemory+0x15c>)
 8000b4c:	4413      	add	r3, r2
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	492b      	ldr	r1, [pc, #172]	@ (8000c00 <CopyFileToFlashMemory+0x164>)
 8000b52:	440a      	add	r2, r1
 8000b54:	4619      	mov	r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	f001 f844 	bl	8001be4 <HAL_FLASH_Program>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	77fb      	strb	r3, [r7, #31]
			i += FLASHWORD;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	3320      	adds	r3, #32
 8000b64:	617b      	str	r3, [r7, #20]
		while ((i < bytesRead) && !result)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d202      	bcs.n	8000b74 <CopyFileToFlashMemory+0xd8>
 8000b6e:	7ffb      	ldrb	r3, [r7, #31]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0e7      	beq.n	8000b44 <CopyFileToFlashMemory+0xa8>
		}
		byteCounter += bytesRead;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4413      	add	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
		uart_printf("=");
 8000b7c:	4821      	ldr	r0, [pc, #132]	@ (8000c04 <CopyFileToFlashMemory+0x168>)
 8000b7e:	f7ff fd8f 	bl	80006a0 <uart_printf>
	while ((byteCounter < appSize) && !result)
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <CopyFileToFlashMemory+0x158>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d202      	bcs.n	8000b92 <CopyFileToFlashMemory+0xf6>
 8000b8c:	7ffb      	ldrb	r3, [r7, #31]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0b6      	beq.n	8000b00 <CopyFileToFlashMemory+0x64>
	}

	HAL_FLASH_Lock();
 8000b92:	f001 f8b9 	bl	8001d08 <HAL_FLASH_Lock>

	// Actual checksum is the inverse of the returned number
	uint32_t crc_file  = ~crc32;
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	60fb      	str	r3, [r7, #12]

	if (!result) // All went OK, verify flash contents
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d11a      	bne.n	8000bd8 <CopyFileToFlashMemory+0x13c>
	{
		uint32_t crc_flash = ~crc32b(CRC32_START, (uint8_t*)FLASH_USER_START_ADDR, appSize);
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <CopyFileToFlashMemory+0x158>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4913      	ldr	r1, [pc, #76]	@ (8000bf8 <CopyFileToFlashMemory+0x15c>)
 8000baa:	f04f 30ff 	mov.w	r0, #4294967295
 8000bae:	f7ff fd43 	bl	8000638 <crc32b>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	60bb      	str	r3, [r7, #8]
		if (crc_file != crc_flash)
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d003      	beq.n	8000bc8 <CopyFileToFlashMemory+0x12c>
			uart_printf("* Verify failed\r\n");
 8000bc0:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <CopyFileToFlashMemory+0x16c>)
 8000bc2:	f7ff fd6d 	bl	80006a0 <uart_printf>
 8000bc6:	e002      	b.n	8000bce <CopyFileToFlashMemory+0x132>
		else
			uart_printf(" Verify OK\r\n");
 8000bc8:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <CopyFileToFlashMemory+0x170>)
 8000bca:	f7ff fd69 	bl	80006a0 <uart_printf>

		uart_printf("Flash CRC32: 0x%x\r\n", crc_flash);
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	480f      	ldr	r0, [pc, #60]	@ (8000c10 <CopyFileToFlashMemory+0x174>)
 8000bd2:	f7ff fd65 	bl	80006a0 <uart_printf>
 8000bd6:	e004      	b.n	8000be2 <CopyFileToFlashMemory+0x146>
	}
	else
		uart_printf(" Failed: %u\r\n", result);
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <CopyFileToFlashMemory+0x178>)
 8000bde:	f7ff fd5f 	bl	80006a0 <uart_printf>

	return result;
 8000be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3728      	adds	r7, #40	@ 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	24000390 	.word	0x24000390
 8000bf0:	08009dcc 	.word	0x08009dcc
 8000bf4:	240005c4 	.word	0x240005c4
 8000bf8:	08020000 	.word	0x08020000
 8000bfc:	08009df0 	.word	0x08009df0
 8000c00:	240005c8 	.word	0x240005c8
 8000c04:	08009d18 	.word	0x08009d18
 8000c08:	08009e18 	.word	0x08009e18
 8000c0c:	08009e2c 	.word	0x08009e2c
 8000c10:	08009db8 	.word	0x08009db8
 8000c14:	08009e3c 	.word	0x08009e3c

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	@ 0x38
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c1e:	f000 fb43 	bl	80012a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 fd65 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

#ifdef DFU_ON_DOUBLE_RESET

	// Initial delay used to debounce reset switch
	HAL_Delay(25);
 8000c26:	2019      	movs	r0, #25
 8000c28:	f000 fe5c 	bl	80018e4 <HAL_Delay>

	// Detect magic key
	if (*(__IO uint32_t*)DFU_MAGIC_KEY_ADDRESS == DFU_MAGIC_KEY)
 8000c2c:	4bb0      	ldr	r3, [pc, #704]	@ (8000ef0 <main+0x2d8>)
 8000c2e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4aaf      	ldr	r2, [pc, #700]	@ (8000ef4 <main+0x2dc>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d126      	bne.n	8000c88 <main+0x70>
	{
		set_magic_key(0);
 8000c3a:	4bad      	ldr	r3, [pc, #692]	@ (8000ef0 <main+0x2d8>)
 8000c3c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c40:	461a      	mov	r2, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4baa      	ldr	r3, [pc, #680]	@ (8000ef0 <main+0x2d8>)
 8000c48:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2300      	movs	r3, #0
 8000c50:	6013      	str	r3, [r2, #0]
		MX_GPIO_Init();
 8000c52:	f000 faff 	bl	8001254 <MX_GPIO_Init>
		MX_USART1_UART_Init();
 8000c56:	f000 faaf 	bl	80011b8 <MX_USART1_UART_Init>
		uart_printf("\r\nStarting DFU mode\r\n");
 8000c5a:	48a7      	ldr	r0, [pc, #668]	@ (8000ef8 <main+0x2e0>)
 8000c5c:	f7ff fd20 	bl	80006a0 <uart_printf>
		HAL_Delay(25);
 8000c60:	2019      	movs	r0, #25
 8000c62:	f000 fe3f 	bl	80018e4 <HAL_Delay>

		HAL_RCC_DeInit(); // Set the clock to the default state
 8000c66:	f001 faf5 	bl	8002254 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000c6a:	f000 fd7d 	bl	8001768 <HAL_DeInit>

		uint32_t *vtor = (void*)DFU_BOOTLOADER_ADDRESS;
 8000c6e:	4ba3      	ldr	r3, [pc, #652]	@ (8000efc <main+0x2e4>)
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
		SCB->VTOR = (uint32_t)vtor;
 8000c72:	4aa3      	ldr	r2, [pc, #652]	@ (8000f00 <main+0x2e8>)
 8000c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c76:	6093      	str	r3, [r2, #8]

		// Make the jump
		asm volatile("MSR msp,%0\nbx %1" : : "r"(vtor[0]), "r"(vtor[1]));
 8000c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c7e:	3204      	adds	r2, #4
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	f383 8808 	msr	MSP, r3
 8000c86:	4710      	bx	r2
	}

	set_magic_key(DFU_MAGIC_KEY);
 8000c88:	4b99      	ldr	r3, [pc, #612]	@ (8000ef0 <main+0x2d8>)
 8000c8a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b98      	ldr	r3, [pc, #608]	@ (8000ef4 <main+0x2dc>)
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b96      	ldr	r3, [pc, #600]	@ (8000ef0 <main+0x2d8>)
 8000c96:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b95      	ldr	r3, [pc, #596]	@ (8000ef4 <main+0x2dc>)
 8000c9e:	6013      	str	r3, [r2, #0]

	// Wait for 2nd reset while DFU marker is set
	HAL_Delay(500);
 8000ca0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ca4:	f000 fe1e 	bl	80018e4 <HAL_Delay>

	set_magic_key(0);
 8000ca8:	4b91      	ldr	r3, [pc, #580]	@ (8000ef0 <main+0x2d8>)
 8000caa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000cae:	461a      	mov	r2, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b8e      	ldr	r3, [pc, #568]	@ (8000ef0 <main+0x2d8>)
 8000cb6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	6013      	str	r3, [r2, #0]
#endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f996 	bl	8000ff0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cc4:	f000 fa04 	bl	80010d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc8:	f000 fac4 	bl	8001254 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000ccc:	f000 fa1e 	bl	800110c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000cd0:	f000 fa72 	bl	80011b8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000cd4:	f005 fcbe 	bl	8006654 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // Enable all the GPIO clocks for the configurable pins below
  __HAL_RCC_GPIOA_CLK_ENABLE(); //????? SIMPLIFY!
 8000cd8:	4b8a      	ldr	r3, [pc, #552]	@ (8000f04 <main+0x2ec>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cde:	4a89      	ldr	r2, [pc, #548]	@ (8000f04 <main+0x2ec>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce8:	4b86      	ldr	r3, [pc, #536]	@ (8000f04 <main+0x2ec>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b83      	ldr	r3, [pc, #524]	@ (8000f04 <main+0x2ec>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfc:	4a81      	ldr	r2, [pc, #516]	@ (8000f04 <main+0x2ec>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d06:	4b7f      	ldr	r3, [pc, #508]	@ (8000f04 <main+0x2ec>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	4b7b      	ldr	r3, [pc, #492]	@ (8000f04 <main+0x2ec>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f04 <main+0x2ec>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d24:	4b77      	ldr	r3, [pc, #476]	@ (8000f04 <main+0x2ec>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	4b74      	ldr	r3, [pc, #464]	@ (8000f04 <main+0x2ec>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	4a72      	ldr	r2, [pc, #456]	@ (8000f04 <main+0x2ec>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d42:	4b70      	ldr	r3, [pc, #448]	@ (8000f04 <main+0x2ec>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d50:	4b6c      	ldr	r3, [pc, #432]	@ (8000f04 <main+0x2ec>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d56:	4a6b      	ldr	r2, [pc, #428]	@ (8000f04 <main+0x2ec>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d60:	4b68      	ldr	r3, [pc, #416]	@ (8000f04 <main+0x2ec>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]


GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
#ifdef PROGRESS_LED_PIN
	GPIO_InitStruct.Pin = PROGRESS_LED_PIN;
 8000d7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(PROGRESS_LED_PORT, &GPIO_InitStruct);
 8000d90:	f107 0318 	add.w	r3, r7, #24
 8000d94:	4619      	mov	r1, r3
 8000d96:	485c      	ldr	r0, [pc, #368]	@ (8000f08 <main+0x2f0>)
 8000d98:	f001 f848 	bl	8001e2c <HAL_GPIO_Init>
#endif

#ifdef SD_DETECT_PIN
	GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(SD_DETECT_PORT, &GPIO_InitStruct);
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4855      	ldr	r0, [pc, #340]	@ (8000f0c <main+0x2f4>)
 8000db6:	f001 f839 	bl	8001e2c <HAL_GPIO_Init>
#endif

#ifdef SD_DETECT_PIN
	// Detect SD card, high pin means no SD card present
	if (HAL_GPIO_ReadPin(SD_DETECT_PORT, SD_DETECT_PIN))
 8000dba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dbe:	4853      	ldr	r0, [pc, #332]	@ (8000f0c <main+0x2f4>)
 8000dc0:	f001 f9dc 	bl	800217c <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <main+0x1ba>
	{
		uart_printf("\r\nNo SD card detected\r\n");
 8000dca:	4851      	ldr	r0, [pc, #324]	@ (8000f10 <main+0x2f8>)
 8000dcc:	f7ff fc68 	bl	80006a0 <uart_printf>
		goto USER_APP;
 8000dd0:	e0cf      	b.n	8000f72 <main+0x35a>
	}
	uart_printf("\r\nSD card detected, mounting FAT file system\r\n");
 8000dd2:	4850      	ldr	r0, [pc, #320]	@ (8000f14 <main+0x2fc>)
 8000dd4:	f7ff fc64 	bl	80006a0 <uart_printf>
#endif

	HAL_Delay(SD_INIT_DELAY); // Short delay to let the SD card settle
 8000dd8:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8000ddc:	f000 fd82 	bl	80018e4 <HAL_Delay>

	// Mount the FAT file system
	result = f_mount(&FatFs, "", 1);
 8000de0:	2201      	movs	r2, #1
 8000de2:	494d      	ldr	r1, [pc, #308]	@ (8000f18 <main+0x300>)
 8000de4:	484d      	ldr	r0, [pc, #308]	@ (8000f1c <main+0x304>)
 8000de6:	f007 ff6d 	bl	8008cc4 <f_mount>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <main+0x308>)
 8000df0:	701a      	strb	r2, [r3, #0]
	if (result)
 8000df2:	4b4b      	ldr	r3, [pc, #300]	@ (8000f20 <main+0x308>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <main+0x1f0>
	{
		#ifdef SD_DETECT_PIN
			uart_printf("ERROR: Card mounting failed, not FAT/exFAT formatted? Error: %d\r\n", result);
 8000dfa:	4b49      	ldr	r3, [pc, #292]	@ (8000f20 <main+0x308>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4848      	ldr	r0, [pc, #288]	@ (8000f24 <main+0x30c>)
 8000e02:	f7ff fc4d 	bl	80006a0 <uart_printf>
		#else
			uart_printf("No medium mounted, status: %d\r\n", result)
		#endif

		goto USER_APP;
 8000e06:	e0b4      	b.n	8000f72 <main+0x35a>
	}

	uart_printf(FIRMWARE_FILENAME);
 8000e08:	4847      	ldr	r0, [pc, #284]	@ (8000f28 <main+0x310>)
 8000e0a:	f7ff fc49 	bl	80006a0 <uart_printf>
	if (f_open(&fwFile, FIRMWARE_FILENAME, FA_READ))
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4945      	ldr	r1, [pc, #276]	@ (8000f28 <main+0x310>)
 8000e12:	4846      	ldr	r0, [pc, #280]	@ (8000f2c <main+0x314>)
 8000e14:	f007 ff9c 	bl	8008d50 <f_open>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <main+0x20e>
	{
		uart_printf(" not found\r\n");
 8000e1e:	4844      	ldr	r0, [pc, #272]	@ (8000f30 <main+0x318>)
 8000e20:	f7ff fc3e 	bl	80006a0 <uart_printf>
		goto USER_APP;
 8000e24:	e0a5      	b.n	8000f72 <main+0x35a>
	}
	uart_printf(" opened successfully\r\n");
 8000e26:	4843      	ldr	r0, [pc, #268]	@ (8000f34 <main+0x31c>)
 8000e28:	f7ff fc3a 	bl	80006a0 <uart_printf>

	appSize = f_size(&fwFile);
 8000e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f2c <main+0x314>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	4a41      	ldr	r2, [pc, #260]	@ (8000f38 <main+0x320>)
 8000e32:	6013      	str	r3, [r2, #0]
	if (!appSize)
 8000e34:	4b40      	ldr	r3, [pc, #256]	@ (8000f38 <main+0x320>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d107      	bne.n	8000e4c <main+0x234>
	{
		uart_printf("ERROR: %s has 0 size, aborting\r\n", FIRMWARE_FILENAME);
 8000e3c:	493a      	ldr	r1, [pc, #232]	@ (8000f28 <main+0x310>)
 8000e3e:	483f      	ldr	r0, [pc, #252]	@ (8000f3c <main+0x324>)
 8000e40:	f7ff fc2e 	bl	80006a0 <uart_printf>
		f_close(&fwFile); // Not strictly needed
 8000e44:	4839      	ldr	r0, [pc, #228]	@ (8000f2c <main+0x314>)
 8000e46:	f008 fafa 	bl	800943e <f_close>
		goto USER_APP;
 8000e4a:	e092      	b.n	8000f72 <main+0x35a>
	}

	// Get device flash size from memory (in KBytes)
	__IO uint16_t flashSize = *(uint32_t*)(FLASHSIZE_BASE);
 8000e4c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f40 <main+0x328>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	82fb      	strh	r3, [r7, #22]
	uart_printf("Total flash memory size: %dKB\r\n", flashSize);
 8000e54:	8afb      	ldrh	r3, [r7, #22]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	483a      	ldr	r0, [pc, #232]	@ (8000f44 <main+0x32c>)
 8000e5c:	f7ff fc20 	bl	80006a0 <uart_printf>

	uint32_t freeFlash = (flashSize << 10) - FLASH_BOOTLOADER_SIZE;
 8000e60:	8afb      	ldrh	r3, [r7, #22]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	029b      	lsls	r3, r3, #10
 8000e66:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
	uart_printf("Free flash memory space: %dKB\r\n", freeFlash >> 10);
 8000e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e6e:	0a9b      	lsrs	r3, r3, #10
 8000e70:	4619      	mov	r1, r3
 8000e72:	4835      	ldr	r0, [pc, #212]	@ (8000f48 <main+0x330>)
 8000e74:	f7ff fc14 	bl	80006a0 <uart_printf>

	uart_printf("Firmware size: %dKB\r\n", appSize >> 10);
 8000e78:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <main+0x320>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	0a9b      	lsrs	r3, r3, #10
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4832      	ldr	r0, [pc, #200]	@ (8000f4c <main+0x334>)
 8000e82:	f7ff fc0d 	bl	80006a0 <uart_printf>

	if (appSize > freeFlash)
 8000e86:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <main+0x320>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d206      	bcs.n	8000e9e <main+0x286>
	{
		uart_printf("ERROR: Insufficient free flash memory space, aborting\r\n");
 8000e90:	482f      	ldr	r0, [pc, #188]	@ (8000f50 <main+0x338>)
 8000e92:	f7ff fc05 	bl	80006a0 <uart_printf>
		f_close(&fwFile); // Not strictly needed, comment out to save some flash
 8000e96:	4825      	ldr	r0, [pc, #148]	@ (8000f2c <main+0x314>)
 8000e98:	f008 fad1 	bl	800943e <f_close>
		goto USER_APP;
 8000e9c:	e069      	b.n	8000f72 <main+0x35a>
	}

	#ifdef COMPARE_BEFORE_FLASH

		uart_printf("Comparing file to flash memory contents\r\n");
 8000e9e:	482d      	ldr	r0, [pc, #180]	@ (8000f54 <main+0x33c>)
 8000ea0:	f7ff fbfe 	bl	80006a0 <uart_printf>

		result = compareFlashToFile();
 8000ea4:	f7ff fd6e 	bl	8000984 <compareFlashToFile>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <main+0x308>)
 8000eae:	701a      	strb	r2, [r3, #0]

		if (result < 0) // File read error
			goto USER_APP;

		if (result == 1) // Flash is different, update required
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <main+0x308>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d105      	bne.n	8000ec4 <main+0x2ac>
			result = CopyFileToFlashMemory();
 8000eb8:	f7ff fdf0 	bl	8000a9c <CopyFileToFlashMemory>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <main+0x308>)
 8000ec2:	701a      	strb	r2, [r3, #0]

		result = CopyFileToFlashMemory();

	#endif

	f_close(&fwFile); // Must close file before renaming
 8000ec4:	4819      	ldr	r0, [pc, #100]	@ (8000f2c <main+0x314>)
 8000ec6:	f008 faba 	bl	800943e <f_close>

	#ifdef FIRMWARE_RENAME
		if (!result) // Only rename/delete if file was flashed successfully
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <main+0x308>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d14e      	bne.n	8000f70 <main+0x358>
		{
			f_unlink(FIRMWARE_RENAME); // Delete the old firmware (if present)
 8000ed2:	4821      	ldr	r0, [pc, #132]	@ (8000f58 <main+0x340>)
 8000ed4:	f008 fce6 	bl	80098a4 <f_unlink>

			if (f_rename(FIRMWARE_FILENAME, FIRMWARE_RENAME) != FR_OK)
 8000ed8:	491f      	ldr	r1, [pc, #124]	@ (8000f58 <main+0x340>)
 8000eda:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <main+0x310>)
 8000edc:	f008 fd8d 	bl	80099fa <f_rename>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d03c      	beq.n	8000f60 <main+0x348>
				uart_printf("ERROR: Failed to rename firmware file to ");
 8000ee6:	481d      	ldr	r0, [pc, #116]	@ (8000f5c <main+0x344>)
 8000ee8:	f7ff fbda 	bl	80006a0 <uart_printf>
 8000eec:	e03b      	b.n	8000f66 <main+0x34e>
 8000eee:	bf00      	nop
 8000ef0:	58004000 	.word	0x58004000
 8000ef4:	ba5eba11 	.word	0xba5eba11
 8000ef8:	08009e4c 	.word	0x08009e4c
 8000efc:	1ff09800 	.word	0x1ff09800
 8000f00:	e000ed00 	.word	0xe000ed00
 8000f04:	58024400 	.word	0x58024400
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	58021000 	.word	0x58021000
 8000f10:	08009e64 	.word	0x08009e64
 8000f14:	08009e7c 	.word	0x08009e7c
 8000f18:	08009eac 	.word	0x08009eac
 8000f1c:	24000160 	.word	0x24000160
 8000f20:	240005c0 	.word	0x240005c0
 8000f24:	08009eb0 	.word	0x08009eb0
 8000f28:	08009ef4 	.word	0x08009ef4
 8000f2c:	24000390 	.word	0x24000390
 8000f30:	08009f04 	.word	0x08009f04
 8000f34:	08009f14 	.word	0x08009f14
 8000f38:	240005c4 	.word	0x240005c4
 8000f3c:	08009f2c 	.word	0x08009f2c
 8000f40:	1ff1e880 	.word	0x1ff1e880
 8000f44:	08009f50 	.word	0x08009f50
 8000f48:	08009f70 	.word	0x08009f70
 8000f4c:	08009f90 	.word	0x08009f90
 8000f50:	08009fa8 	.word	0x08009fa8
 8000f54:	08009fe0 	.word	0x08009fe0
 8000f58:	0800a00c 	.word	0x0800a00c
 8000f5c:	0800a01c 	.word	0x0800a01c
			else
				uart_printf("Renaming file to ");
 8000f60:	481a      	ldr	r0, [pc, #104]	@ (8000fcc <main+0x3b4>)
 8000f62:	f7ff fb9d 	bl	80006a0 <uart_printf>
			uart_printf("%s\r\n", FIRMWARE_RENAME);
 8000f66:	491a      	ldr	r1, [pc, #104]	@ (8000fd0 <main+0x3b8>)
 8000f68:	481a      	ldr	r0, [pc, #104]	@ (8000fd4 <main+0x3bc>)
 8000f6a:	f7ff fb99 	bl	80006a0 <uart_printf>
 8000f6e:	e000      	b.n	8000f72 <main+0x35a>
		}

	#endif

USER_APP:
 8000f70:	bf00      	nop

	f_mount(NULL, "", 0); // Unmount SDCARD, not strictly needed
 8000f72:	2200      	movs	r2, #0
 8000f74:	4918      	ldr	r1, [pc, #96]	@ (8000fd8 <main+0x3c0>)
 8000f76:	2000      	movs	r0, #0
 8000f78:	f007 fea4 	bl	8008cc4 <f_mount>

	if (*(__IO uint32_t*)FLASH_USER_START_ADDR != 0xFFFFFFFF) // Check if flash is empty
 8000f7c:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <main+0x3c4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d013      	beq.n	8000fae <main+0x396>
	{
		uart_printf("Starting user application at 0x0%x\r\n", FLASH_USER_START_ADDR);
 8000f86:	4915      	ldr	r1, [pc, #84]	@ (8000fdc <main+0x3c4>)
 8000f88:	4815      	ldr	r0, [pc, #84]	@ (8000fe0 <main+0x3c8>)
 8000f8a:	f7ff fb89 	bl	80006a0 <uart_printf>
		HAL_Delay(25);
 8000f8e:	2019      	movs	r0, #25
 8000f90:	f000 fca8 	bl	80018e4 <HAL_Delay>

		uint32_t *vtor = (void*)FLASH_USER_START_ADDR;
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <main+0x3c4>)
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
		SCB->VTOR = (uint32_t)vtor;
 8000f98:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <main+0x3cc>)
 8000f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f9c:	6093      	str	r3, [r2, #8]

		// Make the jump
		asm volatile("MSR msp,%0\nbx %1" : : "r"(vtor[0]), "r"(vtor[1]));
 8000f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fa4:	3204      	adds	r2, #4
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	f383 8808 	msr	MSP, r3
 8000fac:	4710      	bx	r2
	}

	uart_printf("No user application found at 0x0%x, done!\r\n", FLASH_USER_START_ADDR);
 8000fae:	490b      	ldr	r1, [pc, #44]	@ (8000fdc <main+0x3c4>)
 8000fb0:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <main+0x3d0>)
 8000fb2:	f7ff fb75 	bl	80006a0 <uart_printf>

	while (1)
	{ // Start slow LED flash
		#ifdef PROGRESS_LED_PIN
			HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN);
 8000fb6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fba:	480c      	ldr	r0, [pc, #48]	@ (8000fec <main+0x3d4>)
 8000fbc:	f001 f8f6 	bl	80021ac <HAL_GPIO_TogglePin>
			HAL_Delay(1500);
 8000fc0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000fc4:	f000 fc8e 	bl	80018e4 <HAL_Delay>
			HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN);
 8000fc8:	bf00      	nop
 8000fca:	e7f4      	b.n	8000fb6 <main+0x39e>
 8000fcc:	0800a048 	.word	0x0800a048
 8000fd0:	0800a00c 	.word	0x0800a00c
 8000fd4:	0800a05c 	.word	0x0800a05c
 8000fd8:	08009eac 	.word	0x08009eac
 8000fdc:	08020000 	.word	0x08020000
 8000fe0:	0800a064 	.word	0x0800a064
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	0800a08c 	.word	0x0800a08c
 8000fec:	58020000 	.word	0x58020000

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09c      	sub	sp, #112	@ 0x70
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffa:	224c      	movs	r2, #76	@ 0x4c
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f008 fe4f 	bl	8009ca2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2220      	movs	r2, #32
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f008 fe49 	bl	8009ca2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001010:	2002      	movs	r0, #2
 8001012:	f001 f8e5 	bl	80021e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b2c      	ldr	r3, [pc, #176]	@ (80010cc <SystemClock_Config+0xdc>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001022:	4a2a      	ldr	r2, [pc, #168]	@ (80010cc <SystemClock_Config+0xdc>)
 8001024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001028:	6193      	str	r3, [r2, #24]
 800102a:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <SystemClock_Config+0xdc>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001036:	bf00      	nop
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <SystemClock_Config+0xdc>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001044:	d1f8      	bne.n	8001038 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001046:	2302      	movs	r3, #2
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800104a:	2301      	movs	r3, #1
 800104c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800104e:	2340      	movs	r3, #64	@ 0x40
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001056:	2300      	movs	r3, #0
 8001058:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800105a:	2304      	movs	r3, #4
 800105c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800105e:	2320      	movs	r3, #32
 8001060:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001066:	2303      	movs	r3, #3
 8001068:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800106a:	2302      	movs	r3, #2
 800106c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800106e:	230c      	movs	r3, #12
 8001070:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001072:	2300      	movs	r3, #0
 8001074:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fa12 	bl	80024a8 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800108a:	f000 f939 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	233f      	movs	r3, #63	@ 0x3f
 8001090:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2303      	movs	r3, #3
 8001094:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800109a:	2309      	movs	r3, #9
 800109c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800109e:	2340      	movs	r3, #64	@ 0x40
 80010a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010a2:	2340      	movs	r3, #64	@ 0x40
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010ac:	2340      	movs	r3, #64	@ 0x40
 80010ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2102      	movs	r1, #2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fdd1 	bl	8002c5c <HAL_RCC_ClockConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010c0:	f000 f91e 	bl	8001300 <Error_Handler>
  }
}
 80010c4:	bf00      	nop
 80010c6:	3770      	adds	r7, #112	@ 0x70
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	58024800 	.word	0x58024800

080010d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ae      	sub	sp, #184	@ 0xb8
 80010d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	22b8      	movs	r2, #184	@ 0xb8
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f008 fde0 	bl	8009ca2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80010e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80010ee:	2300      	movs	r3, #0
 80010f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 f93d 	bl	8003374 <HAL_RCCEx_PeriphCLKConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001100:	f000 f8fe 	bl	8001300 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	37b8      	adds	r7, #184	@ 0xb8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001110:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001112:	4a28      	ldr	r2, [pc, #160]	@ (80011b4 <MX_SPI2_Init+0xa8>)
 8001114:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001116:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001118:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800111c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001124:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001126:	2207      	movs	r2, #7
 8001128:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112a:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001130:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001136:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001138:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800113c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001144:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001160:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001166:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800116c:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001178:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001186:	2200      	movs	r2, #0
 8001188:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 800118c:	2200      	movs	r2, #0
 800118e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 8001198:	2200      	movs	r2, #0
 800119a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <MX_SPI2_Init+0xa4>)
 800119e:	f003 feab 	bl	8004ef8 <HAL_SPI_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80011a8:	f000 f8aa 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	24000044 	.word	0x24000044
 80011b4:	40003800 	.word	0x40003800

080011b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011bc:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011be:	4a23      	ldr	r2, [pc, #140]	@ (800124c <MX_USART1_UART_Init+0x94>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011c4:	4a22      	ldr	r2, [pc, #136]	@ (8001250 <MX_USART1_UART_Init+0x98>)
 80011c6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011dc:	220c      	movs	r2, #12
 80011de:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011fe:	4812      	ldr	r0, [pc, #72]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001200:	f003 ffb9 	bl	8005176 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800120a:	f000 f879 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	480d      	ldr	r0, [pc, #52]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001212:	f005 f954 	bl	80064be <HAL_UARTEx_SetTxFifoThreshold>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800121c:	f000 f870 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4809      	ldr	r0, [pc, #36]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001224:	f005 f989 	bl	800653a <HAL_UARTEx_SetRxFifoThreshold>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800122e:	f000 f867 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001234:	f005 f90a 	bl	800644c <HAL_UARTEx_DisableFifoMode>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800123e:	f000 f85f 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	240000cc 	.word	0x240000cc
 800124c:	40011000 	.word	0x40011000
 8001250:	0003d090 	.word	0x0003d090

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <MX_GPIO_Init+0x50>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001260:	4a10      	ldr	r2, [pc, #64]	@ (80012a4 <MX_GPIO_Init+0x50>)
 8001262:	f043 0302 	orr.w	r3, r3, #2
 8001266:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_GPIO_Init+0x50>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <MX_GPIO_Init+0x50>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127e:	4a09      	ldr	r2, [pc, #36]	@ (80012a4 <MX_GPIO_Init+0x50>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_GPIO_Init+0x50>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	58024400 	.word	0x58024400

080012a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012ba:	f000 fc1b 	bl	8001af4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012be:	2301      	movs	r3, #1
 80012c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80012ca:	231f      	movs	r3, #31
 80012cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012ce:	2387      	movs	r3, #135	@ 0x87
 80012d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012d6:	2300      	movs	r3, #0
 80012d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012da:	2301      	movs	r3, #1
 80012dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012de:	2301      	movs	r3, #1
 80012e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012ea:	463b      	mov	r3, r7
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fc39 	bl	8001b64 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012f2:	2004      	movs	r0, #4
 80012f4:	f000 fc16 	bl	8001b24 <HAL_MPU_Enable>

}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <Error_Handler+0x8>

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_MspInit+0x30>)
 8001314:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001318:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_MspInit+0x30>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_MspInit+0x30>)
 8001324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	58024400 	.word	0x58024400

08001340 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0b8      	sub	sp, #224	@ 0xe0
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	22b8      	movs	r2, #184	@ 0xb8
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f008 fc9e 	bl	8009ca2 <memset>
  if(hspi->Instance==SPI2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a27      	ldr	r2, [pc, #156]	@ (8001408 <HAL_SPI_MspInit+0xc8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d146      	bne.n	80013fe <HAL_SPI_MspInit+0xbe>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001370:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800137c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001380:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fff4 	bl	8003374 <HAL_RCCEx_PeriphCLKConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001392:	f7ff ffb5 	bl	8001300 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <HAL_SPI_MspInit+0xcc>)
 8001398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800139c:	4a1b      	ldr	r2, [pc, #108]	@ (800140c <HAL_SPI_MspInit+0xcc>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_SPI_MspInit+0xcc>)
 80013a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_SPI_MspInit+0xcc>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ba:	4a14      	ldr	r2, [pc, #80]	@ (800140c <HAL_SPI_MspInit+0xcc>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <HAL_SPI_MspInit+0xcc>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013d2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80013d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ec:	2305      	movs	r3, #5
 80013ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <HAL_SPI_MspInit+0xd0>)
 80013fa:	f000 fd17 	bl	8001e2c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80013fe:	bf00      	nop
 8001400:	37e0      	adds	r7, #224	@ 0xe0
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40003800 	.word	0x40003800
 800140c:	58024400 	.word	0x58024400
 8001410:	58020400 	.word	0x58020400

08001414 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0b8      	sub	sp, #224	@ 0xe0
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	22b8      	movs	r2, #184	@ 0xb8
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f008 fc34 	bl	8009ca2 <memset>
  if(huart->Instance==USART1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a27      	ldr	r2, [pc, #156]	@ (80014dc <HAL_UART_MspInit+0xc8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d146      	bne.n	80014d2 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001444:	f04f 0201 	mov.w	r2, #1
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4618      	mov	r0, r3
 800145c:	f001 ff8a 	bl	8003374 <HAL_RCCEx_PeriphCLKConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001466:	f7ff ff4b 	bl	8001300 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <HAL_UART_MspInit+0xcc>)
 800146c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001470:	4a1b      	ldr	r2, [pc, #108]	@ (80014e0 <HAL_UART_MspInit+0xcc>)
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <HAL_UART_MspInit+0xcc>)
 800147c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_UART_MspInit+0xcc>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148e:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <HAL_UART_MspInit+0xcc>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_UART_MspInit+0xcc>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c0:	2307      	movs	r3, #7
 80014c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <HAL_UART_MspInit+0xd0>)
 80014ce:	f000 fcad 	bl	8001e2c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80014d2:	bf00      	nop
 80014d4:	37e0      	adds	r7, #224	@ 0xe0
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40011000 	.word	0x40011000
 80014e0:	58024400 	.word	0x58024400
 80014e4:	58020000 	.word	0x58020000

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <MemManage_Handler+0x4>

08001500 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <UsageFault_Handler+0x4>

08001510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153e:	f000 f9b1 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800154c:	4b3e      	ldr	r3, [pc, #248]	@ (8001648 <SystemInit+0x100>)
 800154e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001552:	4a3d      	ldr	r2, [pc, #244]	@ (8001648 <SystemInit+0x100>)
 8001554:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001558:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800155c:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <SystemInit+0x104>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	2b06      	cmp	r3, #6
 8001566:	d807      	bhi.n	8001578 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001568:	4b38      	ldr	r3, [pc, #224]	@ (800164c <SystemInit+0x104>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 030f 	bic.w	r3, r3, #15
 8001570:	4a36      	ldr	r2, [pc, #216]	@ (800164c <SystemInit+0x104>)
 8001572:	f043 0307 	orr.w	r3, r3, #7
 8001576:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001578:	4b35      	ldr	r3, [pc, #212]	@ (8001650 <SystemInit+0x108>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a34      	ldr	r2, [pc, #208]	@ (8001650 <SystemInit+0x108>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001584:	4b32      	ldr	r3, [pc, #200]	@ (8001650 <SystemInit+0x108>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800158a:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <SystemInit+0x108>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4930      	ldr	r1, [pc, #192]	@ (8001650 <SystemInit+0x108>)
 8001590:	4b30      	ldr	r3, [pc, #192]	@ (8001654 <SystemInit+0x10c>)
 8001592:	4013      	ands	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001596:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <SystemInit+0x104>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015a2:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <SystemInit+0x104>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 030f 	bic.w	r3, r3, #15
 80015aa:	4a28      	ldr	r2, [pc, #160]	@ (800164c <SystemInit+0x104>)
 80015ac:	f043 0307 	orr.w	r3, r3, #7
 80015b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015b2:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <SystemInit+0x108>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015b8:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <SystemInit+0x108>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015be:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <SystemInit+0x108>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <SystemInit+0x108>)
 80015c6:	4a24      	ldr	r2, [pc, #144]	@ (8001658 <SystemInit+0x110>)
 80015c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015ca:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <SystemInit+0x108>)
 80015cc:	4a23      	ldr	r2, [pc, #140]	@ (800165c <SystemInit+0x114>)
 80015ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <SystemInit+0x108>)
 80015d2:	4a23      	ldr	r2, [pc, #140]	@ (8001660 <SystemInit+0x118>)
 80015d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <SystemInit+0x108>)
 80015d8:	2200      	movs	r2, #0
 80015da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <SystemInit+0x108>)
 80015de:	4a20      	ldr	r2, [pc, #128]	@ (8001660 <SystemInit+0x118>)
 80015e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <SystemInit+0x108>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015e8:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <SystemInit+0x108>)
 80015ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <SystemInit+0x118>)
 80015ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <SystemInit+0x108>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <SystemInit+0x108>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <SystemInit+0x108>)
 80015fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <SystemInit+0x108>)
 8001602:	2200      	movs	r2, #0
 8001604:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <SystemInit+0x108>)
 8001608:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800160c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d113      	bne.n	800163c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001614:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <SystemInit+0x108>)
 8001616:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800161a:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <SystemInit+0x108>)
 800161c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001620:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001624:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <SystemInit+0x11c>)
 8001626:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800162a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <SystemInit+0x108>)
 800162e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001632:	4a07      	ldr	r2, [pc, #28]	@ (8001650 <SystemInit+0x108>)
 8001634:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001638:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	52002000 	.word	0x52002000
 8001650:	58024400 	.word	0x58024400
 8001654:	eaf6ed7f 	.word	0xeaf6ed7f
 8001658:	02020200 	.word	0x02020200
 800165c:	01ff0000 	.word	0x01ff0000
 8001660:	01010280 	.word	0x01010280
 8001664:	52004000 	.word	0x52004000

08001668 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <ExitRun0Mode+0x2c>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <ExitRun0Mode+0x2c>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001678:	bf00      	nop
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <ExitRun0Mode+0x2c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f9      	beq.n	800167a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	58024800 	.word	0x58024800

08001698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80016d4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800169c:	f7ff ffe4 	bl	8001668 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016a0:	f7ff ff52 	bl	8001548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a4:	480c      	ldr	r0, [pc, #48]	@ (80016d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016a6:	490d      	ldr	r1, [pc, #52]	@ (80016dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016bc:	4c0a      	ldr	r4, [pc, #40]	@ (80016e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f008 faf3 	bl	8009cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff faa3 	bl	8000c18 <main>
  bx  lr
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80016d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016dc:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 80016e0:	0800a1c4 	.word	0x0800a1c4
  ldr r2, =_sbss
 80016e4:	24000028 	.word	0x24000028
  ldr r4, =_ebss
 80016e8:	24001628 	.word	0x24001628

080016ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC3_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f6:	2003      	movs	r0, #3
 80016f8:	f000 f9ca 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016fc:	f001 fc64 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_Init+0x68>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	4913      	ldr	r1, [pc, #76]	@ (800175c <HAL_Init+0x6c>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_Init+0x68>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_Init+0x6c>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
 8001730:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <HAL_Init+0x70>)
 8001732:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001734:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_Init+0x74>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f87c 	bl	8001838 <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e002      	b.n	8001750 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800174a:	f7ff fddf 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	58024400 	.word	0x58024400
 800175c:	0800a0fc 	.word	0x0800a0fc
 8001760:	24000004 	.word	0x24000004
 8001764:	24000000 	.word	0x24000000

08001768 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 800176c:	4b25      	ldr	r3, [pc, #148]	@ (8001804 <HAL_DeInit+0x9c>)
 800176e:	4a26      	ldr	r2, [pc, #152]	@ (8001808 <HAL_DeInit+0xa0>)
 8001770:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001772:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <HAL_DeInit+0x9c>)
 8001774:	2200      	movs	r2, #0
 8001776:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 8001778:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <HAL_DeInit+0x9c>)
 800177a:	4a24      	ldr	r2, [pc, #144]	@ (800180c <HAL_DeInit+0xa4>)
 800177c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <HAL_DeInit+0x9c>)
 8001782:	2200      	movs	r2, #0
 8001784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 8001788:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <HAL_DeInit+0x9c>)
 800178a:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <HAL_DeInit+0xa8>)
 800178c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <HAL_DeInit+0x9c>)
 8001792:	2200      	movs	r2, #0
 8001794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 8001798:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <HAL_DeInit+0x9c>)
 800179a:	4a1e      	ldr	r2, [pc, #120]	@ (8001814 <HAL_DeInit+0xac>)
 800179c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 80017a0:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <HAL_DeInit+0x9c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 80017a8:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <HAL_DeInit+0x9c>)
 80017aa:	2208      	movs	r2, #8
 80017ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <HAL_DeInit+0x9c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_DeInit+0x9c>)
 80017ba:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <HAL_DeInit+0xb0>)
 80017bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 80017c0:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_DeInit+0x9c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 80017c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <HAL_DeInit+0x9c>)
 80017ca:	4a14      	ldr	r2, [pc, #80]	@ (800181c <HAL_DeInit+0xb4>)
 80017cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <HAL_DeInit+0x9c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_DeInit+0x9c>)
 80017da:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <HAL_DeInit+0xb8>)
 80017dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <HAL_DeInit+0x9c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_DeInit+0x9c>)
 80017ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <HAL_DeInit+0xbc>)
 80017ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <HAL_DeInit+0x9c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80017f8:	f000 f816 	bl	8001828 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	58024400 	.word	0x58024400
 8001808:	00e95011 	.word	0x00e95011
 800180c:	02008023 	.word	0x02008023
 8001810:	00030271 	.word	0x00030271
 8001814:	032806ff 	.word	0x032806ff
 8001818:	eaffc3ff 	.word	0xeaffc3ff
 800181c:	03000136 	.word	0x03000136
 8001820:	405730f3 	.word	0x405730f3
 8001824:	0420deaa 	.word	0x0420deaa

08001828 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001840:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_InitTick+0x60>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e021      	b.n	8001890 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <HAL_InitTick+0x64>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_InitTick+0x60>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f939 	bl	8001ada <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f000 f911 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <HAL_InitTick+0x68>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2400000c 	.word	0x2400000c
 800189c:	24000000 	.word	0x24000000
 80018a0:	24000008 	.word	0x24000008

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2400000c 	.word	0x2400000c
 80018c8:	240015c8 	.word	0x240015c8

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	240015c8 	.word	0x240015c8

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2400000c 	.word	0x2400000c

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <__NVIC_SetPriorityGrouping+0x40>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	4313      	orrs	r3, r2
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	@ (800196c <__NVIC_SetPriorityGrouping+0x40>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00
 8001970:	05fa0000 	.word	0x05fa0000

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	@ (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	@ (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	@ (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	@ 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff47 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff5e 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff90 	bl	80019e4 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5f 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffb2 	bl	8001a4c <SysTick_Config>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001af8:	f3bf 8f5f 	dmb	sy
}
 8001afc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001afe:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <HAL_MPU_Disable+0x28>)
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	4a06      	ldr	r2, [pc, #24]	@ (8001b1c <HAL_MPU_Disable+0x28>)
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b08:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_MPU_Disable+0x2c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00
 8001b20:	e000ed90 	.word	0xe000ed90

08001b24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <HAL_MPU_Enable+0x38>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_MPU_Enable+0x3c>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_MPU_Enable+0x3c>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b40:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b42:	f3bf 8f4f 	dsb	sy
}
 8001b46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b48:	f3bf 8f6f 	isb	sy
}
 8001b4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed90 	.word	0xe000ed90
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	785a      	ldrb	r2, [r3, #1]
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b72:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b80:	4a17      	ldr	r2, [pc, #92]	@ (8001be0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7b1b      	ldrb	r3, [r3, #12]
 8001b8c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7adb      	ldrb	r3, [r3, #11]
 8001b92:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7a9b      	ldrb	r3, [r3, #10]
 8001b9a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7b5b      	ldrb	r3, [r3, #13]
 8001ba2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ba4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7b9b      	ldrb	r3, [r3, #14]
 8001baa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7bdb      	ldrb	r3, [r3, #15]
 8001bb2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7a5b      	ldrb	r3, [r3, #9]
 8001bba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7a1b      	ldrb	r3, [r3, #8]
 8001bc2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bc4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bcc:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bd0:	6113      	str	r3, [r2, #16]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed90 	.word	0xe000ed90

08001be4 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001cbc <HAL_FLASH_Program+0xd8>)
 8001bfe:	7d1b      	ldrb	r3, [r3, #20]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_FLASH_Program+0x24>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e054      	b.n	8001cb2 <HAL_FLASH_Program+0xce>
 8001c08:	4b2c      	ldr	r3, [pc, #176]	@ (8001cbc <HAL_FLASH_Program+0xd8>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c14:	d316      	bcc.n	8001c44 <HAL_FLASH_Program+0x60>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8001c1c:	d212      	bcs.n	8001c44 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8001c22:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c24:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <HAL_FLASH_Program+0xd8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001c2a:	6979      	ldr	r1, [r7, #20]
 8001c2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c30:	f000 f882 	bl	8001d38 <FLASH_WaitForLastOperation>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8001c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d132      	bne.n	8001ca8 <HAL_FLASH_Program+0xc4>
 8001c42:	e001      	b.n	8001c48 <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e034      	b.n	8001cb2 <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8001c48:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <HAL_FLASH_Program+0xdc>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc0 <HAL_FLASH_Program+0xdc>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8001c54:	f3bf 8f6f 	isb	sy
}
 8001c58:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001c5a:	f3bf 8f4f 	dsb	sy
}
 8001c5e:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	623b      	str	r3, [r7, #32]
        src_addr++;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	61fb      	str	r3, [r7, #28]
        row_index--;
 8001c74:	7efb      	ldrb	r3, [r7, #27]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 8001c7a:	7efb      	ldrb	r3, [r7, #27]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ef      	bne.n	8001c60 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 8001c80:	f3bf 8f6f 	isb	sy
}
 8001c84:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001c86:	f3bf 8f4f 	dsb	sy
}
 8001c8a:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c92:	f000 f851 	bl	8001d38 <FLASH_WaitForLastOperation>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <HAL_FLASH_Program+0xdc>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	@ (8001cc0 <HAL_FLASH_Program+0xdc>)
 8001ca2:	f023 0302 	bic.w	r3, r3, #2
 8001ca6:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <HAL_FLASH_Program+0xd8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	751a      	strb	r2, [r3, #20]

  return status;
 8001cae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3728      	adds	r7, #40	@ 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	240015cc 	.word	0x240015cc
 8001cc0:	52002000 	.word	0x52002000

08001cc4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <HAL_FLASH_Unlock+0x38>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_FLASH_Unlock+0x38>)
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <HAL_FLASH_Unlock+0x3c>)
 8001cd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8001cda:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_FLASH_Unlock+0x38>)
 8001cdc:	4a09      	ldr	r2, [pc, #36]	@ (8001d04 <HAL_FLASH_Unlock+0x40>)
 8001cde:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_FLASH_Unlock+0x38>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	52002000 	.word	0x52002000
 8001d00:	45670123 	.word	0x45670123
 8001d04:	cdef89ab 	.word	0xcdef89ab

08001d08 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_FLASH_Lock+0x2c>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a08      	ldr	r2, [pc, #32]	@ (8001d34 <HAL_FLASH_Lock+0x2c>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_FLASH_Lock+0x2c>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	52002000 	.word	0x52002000

08001d38 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8001d42:	2304      	movs	r3, #4
 8001d44:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d4a:	f7ff fdbf 	bl	80018cc <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001d50:	e010      	b.n	8001d74 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d00c      	beq.n	8001d74 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff fdb7 	bl	80018cc <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <FLASH_WaitForLastOperation+0x38>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e02d      	b.n	8001dd0 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001d74:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <FLASH_WaitForLastOperation+0xa0>)
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d0e7      	beq.n	8001d52 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d104      	bne.n	8001d92 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8001d88:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <FLASH_WaitForLastOperation+0xa0>)
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <FLASH_WaitForLastOperation+0xa4>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8001d9c:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <FLASH_WaitForLastOperation+0xa8>)
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	4a0e      	ldr	r2, [pc, #56]	@ (8001de0 <FLASH_WaitForLastOperation+0xa8>)
 8001da6:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8001da8:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <FLASH_WaitForLastOperation+0xa0>)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10a      	bne.n	8001dce <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8001db8:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <FLASH_WaitForLastOperation+0xa0>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc4:	d103      	bne.n	8001dce <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8001dc6:	4b04      	ldr	r3, [pc, #16]	@ (8001dd8 <FLASH_WaitForLastOperation+0xa0>)
 8001dc8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dcc:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	52002000 	.word	0x52002000
 8001ddc:	17ee0000 	.word	0x17ee0000
 8001de0:	240015cc 	.word	0x240015cc

08001de4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d010      	beq.n	8001e1c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <FLASH_Erase_Sector+0x44>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <FLASH_Erase_Sector+0x44>)
 8001e00:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8001e04:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001e06:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <FLASH_Erase_Sector+0x44>)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	0219      	lsls	r1, r3, #8
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	4313      	orrs	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <FLASH_Erase_Sector+0x44>)
 8001e16:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8001e1a:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	52002000 	.word	0x52002000

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e3a:	4b86      	ldr	r3, [pc, #536]	@ (8002054 <HAL_GPIO_Init+0x228>)
 8001e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e3e:	e18c      	b.n	800215a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 817e 	beq.w	8002154 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d005      	beq.n	8001e70 <HAL_GPIO_Init+0x44>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d130      	bne.n	8001ed2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 0201 	and.w	r2, r3, #1
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d017      	beq.n	8001f0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d123      	bne.n	8001f62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	08da      	lsrs	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3208      	adds	r2, #8
 8001f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	220f      	movs	r2, #15
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	69b9      	ldr	r1, [r7, #24]
 8001f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0203 	and.w	r2, r3, #3
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80d8 	beq.w	8002154 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8002058 <HAL_GPIO_Init+0x22c>)
 8001fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001faa:	4a2b      	ldr	r2, [pc, #172]	@ (8002058 <HAL_GPIO_Init+0x22c>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fb4:	4b28      	ldr	r3, [pc, #160]	@ (8002058 <HAL_GPIO_Init+0x22c>)
 8001fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fc2:	4a26      	ldr	r2, [pc, #152]	@ (800205c <HAL_GPIO_Init+0x230>)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8002060 <HAL_GPIO_Init+0x234>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04a      	beq.n	8002084 <HAL_GPIO_Init+0x258>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <HAL_GPIO_Init+0x238>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d02b      	beq.n	800204e <HAL_GPIO_Init+0x222>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8002068 <HAL_GPIO_Init+0x23c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d025      	beq.n	800204a <HAL_GPIO_Init+0x21e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1a      	ldr	r2, [pc, #104]	@ (800206c <HAL_GPIO_Init+0x240>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01f      	beq.n	8002046 <HAL_GPIO_Init+0x21a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_GPIO_Init+0x244>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d019      	beq.n	8002042 <HAL_GPIO_Init+0x216>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a18      	ldr	r2, [pc, #96]	@ (8002074 <HAL_GPIO_Init+0x248>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0x212>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <HAL_GPIO_Init+0x24c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00d      	beq.n	800203a <HAL_GPIO_Init+0x20e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a16      	ldr	r2, [pc, #88]	@ (800207c <HAL_GPIO_Init+0x250>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0x20a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a15      	ldr	r2, [pc, #84]	@ (8002080 <HAL_GPIO_Init+0x254>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_GPIO_Init+0x206>
 800202e:	2309      	movs	r3, #9
 8002030:	e029      	b.n	8002086 <HAL_GPIO_Init+0x25a>
 8002032:	230a      	movs	r3, #10
 8002034:	e027      	b.n	8002086 <HAL_GPIO_Init+0x25a>
 8002036:	2307      	movs	r3, #7
 8002038:	e025      	b.n	8002086 <HAL_GPIO_Init+0x25a>
 800203a:	2306      	movs	r3, #6
 800203c:	e023      	b.n	8002086 <HAL_GPIO_Init+0x25a>
 800203e:	2305      	movs	r3, #5
 8002040:	e021      	b.n	8002086 <HAL_GPIO_Init+0x25a>
 8002042:	2304      	movs	r3, #4
 8002044:	e01f      	b.n	8002086 <HAL_GPIO_Init+0x25a>
 8002046:	2303      	movs	r3, #3
 8002048:	e01d      	b.n	8002086 <HAL_GPIO_Init+0x25a>
 800204a:	2302      	movs	r3, #2
 800204c:	e01b      	b.n	8002086 <HAL_GPIO_Init+0x25a>
 800204e:	2301      	movs	r3, #1
 8002050:	e019      	b.n	8002086 <HAL_GPIO_Init+0x25a>
 8002052:	bf00      	nop
 8002054:	58000080 	.word	0x58000080
 8002058:	58024400 	.word	0x58024400
 800205c:	58000400 	.word	0x58000400
 8002060:	58020000 	.word	0x58020000
 8002064:	58020400 	.word	0x58020400
 8002068:	58020800 	.word	0x58020800
 800206c:	58020c00 	.word	0x58020c00
 8002070:	58021000 	.word	0x58021000
 8002074:	58021400 	.word	0x58021400
 8002078:	58021800 	.word	0x58021800
 800207c:	58021c00 	.word	0x58021c00
 8002080:	58022400 	.word	0x58022400
 8002084:	2300      	movs	r3, #0
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	f002 0203 	and.w	r2, r2, #3
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	4093      	lsls	r3, r2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002096:	4938      	ldr	r1, [pc, #224]	@ (8002178 <HAL_GPIO_Init+0x34c>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	3301      	adds	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	f47f ae6b 	bne.w	8001e40 <HAL_GPIO_Init+0x14>
  }
}
 800216a:	bf00      	nop
 800216c:	bf00      	nop
 800216e:	3724      	adds	r7, #36	@ 0x24
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	58000400 	.word	0x58000400

0800217c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e001      	b.n	800219e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43d9      	mvns	r1, r3
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	400b      	ands	r3, r1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <HAL_PWREx_ConfigSupply+0x70>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d00a      	beq.n	800220a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021f4:	4b16      	ldr	r3, [pc, #88]	@ (8002250 <HAL_PWREx_ConfigSupply+0x70>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e01f      	b.n	8002246 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e01d      	b.n	8002246 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_PWREx_ConfigSupply+0x70>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f023 0207 	bic.w	r2, r3, #7
 8002212:	490f      	ldr	r1, [pc, #60]	@ (8002250 <HAL_PWREx_ConfigSupply+0x70>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4313      	orrs	r3, r2
 8002218:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800221a:	f7ff fb57 	bl	80018cc <HAL_GetTick>
 800221e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002220:	e009      	b.n	8002236 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002222:	f7ff fb53 	bl	80018cc <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002230:	d901      	bls.n	8002236 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e007      	b.n	8002246 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_PWREx_ConfigSupply+0x70>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800223e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002242:	d1ee      	bne.n	8002222 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	58024800 	.word	0x58024800

08002254 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 800225a:	4b89      	ldr	r3, [pc, #548]	@ (8002480 <HAL_RCC_DeInit+0x22c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	2b06      	cmp	r3, #6
 8002264:	d80f      	bhi.n	8002286 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002266:	4b86      	ldr	r3, [pc, #536]	@ (8002480 <HAL_RCC_DeInit+0x22c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 030f 	bic.w	r3, r3, #15
 800226e:	4a84      	ldr	r2, [pc, #528]	@ (8002480 <HAL_RCC_DeInit+0x22c>)
 8002270:	f043 0307 	orr.w	r3, r3, #7
 8002274:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002276:	4b82      	ldr	r3, [pc, #520]	@ (8002480 <HAL_RCC_DeInit+0x22c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	2b07      	cmp	r3, #7
 8002280:	d001      	beq.n	8002286 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0f7      	b.n	8002476 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002286:	f7ff fb21 	bl	80018cc <HAL_GetTick>
 800228a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800228c:	4b7d      	ldr	r3, [pc, #500]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a7c      	ldr	r2, [pc, #496]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229a:	f7ff fb17 	bl	80018cc <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0e4      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ac:	4b75      	ldr	r3, [pc, #468]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 80022b8:	4b72      	ldr	r3, [pc, #456]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a71      	ldr	r2, [pc, #452]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80022be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80022c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80022c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 80022ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002488 <HAL_RCC_DeInit+0x234>)
 80022cc:	4a6f      	ldr	r2, [pc, #444]	@ (800248c <HAL_RCC_DeInit+0x238>)
 80022ce:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 80022d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002490 <HAL_RCC_DeInit+0x23c>)
 80022d2:	4a6e      	ldr	r2, [pc, #440]	@ (800248c <HAL_RCC_DeInit+0x238>)
 80022d4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002494 <HAL_RCC_DeInit+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff faac 	bl	8001838 <HAL_InitTick>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0c5      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80022ea:	f7ff faef 	bl	80018cc <HAL_GetTick>
 80022ee:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f2:	f7ff faeb 	bl	80018cc <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0b6      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002308:	4b5e      	ldr	r3, [pc, #376]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ee      	bne.n	80022f2 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002314:	f7ff fada 	bl	80018cc <HAL_GetTick>
 8002318:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 800231a:	4b5a      	ldr	r3, [pc, #360]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4959      	ldr	r1, [pc, #356]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002320:	4b5d      	ldr	r3, [pc, #372]	@ (8002498 <HAL_RCC_DeInit+0x244>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fad0 	bl	80018cc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e09d      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233a:	4b52      	ldr	r3, [pc, #328]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002346:	f7ff fac1 	bl	80018cc <HAL_GetTick>
 800234a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800234c:	4b4d      	ldr	r3, [pc, #308]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a4c      	ldr	r2, [pc, #304]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002352:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002356:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235a:	f7ff fab7 	bl	80018cc <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e084      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800236c:	4b45      	ldr	r3, [pc, #276]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002378:	f7ff faa8 	bl	80018cc <HAL_GetTick>
 800237c:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 800237e:	4b41      	ldr	r3, [pc, #260]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a40      	ldr	r2, [pc, #256]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002384:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002388:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7ff fa9e 	bl	80018cc <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e06b      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 800239e:	4b39      	ldr	r3, [pc, #228]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80023aa:	f7ff fa8f 	bl	80018cc <HAL_GetTick>
 80023ae:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 80023b0:	4b34      	ldr	r3, [pc, #208]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a33      	ldr	r2, [pc, #204]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ba:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7ff fa85 	bl	80018cc <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e052      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80023d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 80023dc:	4b29      	ldr	r3, [pc, #164]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 80023e2:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 80023e8:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 80023ee:	4b25      	ldr	r3, [pc, #148]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80023f0:	4a2a      	ldr	r2, [pc, #168]	@ (800249c <HAL_RCC_DeInit+0x248>)
 80023f2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80023f6:	4a2a      	ldr	r2, [pc, #168]	@ (80024a0 <HAL_RCC_DeInit+0x24c>)
 80023f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 80023fa:	4b22      	ldr	r3, [pc, #136]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 80023fc:	4a29      	ldr	r2, [pc, #164]	@ (80024a4 <HAL_RCC_DeInit+0x250>)
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002400:	4b20      	ldr	r3, [pc, #128]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002402:	2200      	movs	r2, #0
 8002404:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8002406:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002408:	4a26      	ldr	r2, [pc, #152]	@ (80024a4 <HAL_RCC_DeInit+0x250>)
 800240a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 800240e:	2200      	movs	r2, #0
 8002410:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8002412:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002414:	4a23      	ldr	r2, [pc, #140]	@ (80024a4 <HAL_RCC_DeInit+0x250>)
 8002416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002424:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002428:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800242a:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 800242c:	2200      	movs	r2, #0
 800242e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002430:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002432:	f04f 32ff 	mov.w	r2, #4294967295
 8002436:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002438:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 800243a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800243e:	4a11      	ldr	r2, [pc, #68]	@ (8002484 <HAL_RCC_DeInit+0x230>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002444:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002448:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_RCC_DeInit+0x22c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00f      	beq.n	8002474 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002454:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <HAL_RCC_DeInit+0x22c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 030f 	bic.w	r3, r3, #15
 800245c:	4a08      	ldr	r2, [pc, #32]	@ (8002480 <HAL_RCC_DeInit+0x22c>)
 800245e:	f043 0307 	orr.w	r3, r3, #7
 8002462:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_RCC_DeInit+0x22c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	2b07      	cmp	r3, #7
 800246e:	d001      	beq.n	8002474 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	52002000 	.word	0x52002000
 8002484:	58024400 	.word	0x58024400
 8002488:	24000000 	.word	0x24000000
 800248c:	03d09000 	.word	0x03d09000
 8002490:	24000004 	.word	0x24000004
 8002494:	24000008 	.word	0x24000008
 8002498:	fff6ed45 	.word	0xfff6ed45
 800249c:	02020200 	.word	0x02020200
 80024a0:	01ff0000 	.word	0x01ff0000
 80024a4:	01010280 	.word	0x01010280

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	@ 0x30
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e3c8      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8087 	beq.w	80025d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c8:	4b88      	ldr	r3, [pc, #544]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d2:	4b86      	ldr	r3, [pc, #536]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d007      	beq.n	80024ee <HAL_RCC_OscConfig+0x46>
 80024de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e0:	2b18      	cmp	r3, #24
 80024e2:	d110      	bne.n	8002506 <HAL_RCC_OscConfig+0x5e>
 80024e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d10b      	bne.n	8002506 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ee:	4b7f      	ldr	r3, [pc, #508]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d06c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x12c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d168      	bne.n	80025d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e3a2      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x76>
 8002510:	4b76      	ldr	r3, [pc, #472]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a75      	ldr	r2, [pc, #468]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e02e      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b71      	ldr	r3, [pc, #452]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a70      	ldr	r2, [pc, #448]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800252c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b6e      	ldr	r3, [pc, #440]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6d      	ldr	r2, [pc, #436]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002538:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e01d      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0xbc>
 800254a:	4b68      	ldr	r3, [pc, #416]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a67      	ldr	r2, [pc, #412]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b65      	ldr	r3, [pc, #404]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a64      	ldr	r2, [pc, #400]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 8002564:	4b61      	ldr	r3, [pc, #388]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a60      	ldr	r2, [pc, #384]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800256a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b5e      	ldr	r3, [pc, #376]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a5d      	ldr	r2, [pc, #372]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7ff f9a2 	bl	80018cc <HAL_GetTick>
 8002588:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff f99e 	bl	80018cc <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	@ 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e356      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800259e:	4b53      	ldr	r3, [pc, #332]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0xe4>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff f98e 	bl	80018cc <HAL_GetTick>
 80025b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7ff f98a 	bl	80018cc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	@ 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e342      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025c6:	4b49      	ldr	r3, [pc, #292]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x10c>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 808c 	beq.w	80026fc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e4:	4b41      	ldr	r3, [pc, #260]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ee:	4b3f      	ldr	r3, [pc, #252]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <HAL_RCC_OscConfig+0x162>
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2b18      	cmp	r3, #24
 80025fe:	d137      	bne.n	8002670 <HAL_RCC_OscConfig+0x1c8>
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d132      	bne.n	8002670 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260a:	4b38      	ldr	r3, [pc, #224]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x17a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e314      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002622:	4b32      	ldr	r3, [pc, #200]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0219 	bic.w	r2, r3, #25
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	492f      	ldr	r1, [pc, #188]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7ff f94a 	bl	80018cc <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263c:	f7ff f946 	bl	80018cc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e2fe      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264e:	4b27      	ldr	r3, [pc, #156]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	061b      	lsls	r3, r3, #24
 8002668:	4920      	ldr	r1, [pc, #128]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800266a:	4313      	orrs	r3, r2
 800266c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800266e:	e045      	b.n	80026fc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d026      	beq.n	80026c6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002678:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 0219 	bic.w	r2, r3, #25
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4919      	ldr	r1, [pc, #100]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7ff f91f 	bl	80018cc <HAL_GetTick>
 800268e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002692:	f7ff f91b 	bl	80018cc <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e2d3      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	490b      	ldr	r1, [pc, #44]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
 80026c4:	e01a      	b.n	80026fc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a08      	ldr	r2, [pc, #32]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7ff f8fb 	bl	80018cc <HAL_GetTick>
 80026d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026da:	f7ff f8f7 	bl	80018cc <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d903      	bls.n	80026f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e2af      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
 80026ec:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026f0:	4b96      	ldr	r3, [pc, #600]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d06a      	beq.n	80027de <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002708:	4b90      	ldr	r3, [pc, #576]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002710:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002712:	4b8e      	ldr	r3, [pc, #568]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b08      	cmp	r3, #8
 800271c:	d007      	beq.n	800272e <HAL_RCC_OscConfig+0x286>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b18      	cmp	r3, #24
 8002722:	d11b      	bne.n	800275c <HAL_RCC_OscConfig+0x2b4>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d116      	bne.n	800275c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800272e:	4b87      	ldr	r3, [pc, #540]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x29e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b80      	cmp	r3, #128	@ 0x80
 8002740:	d001      	beq.n	8002746 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e282      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002746:	4b81      	ldr	r3, [pc, #516]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	061b      	lsls	r3, r3, #24
 8002754:	497d      	ldr	r1, [pc, #500]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800275a:	e040      	b.n	80027de <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d023      	beq.n	80027ac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002764:	4b79      	ldr	r3, [pc, #484]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a78      	ldr	r2, [pc, #480]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 800276a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800276e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7ff f8ac 	bl	80018cc <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002778:	f7ff f8a8 	bl	80018cc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e260      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800278a:	4b70      	ldr	r3, [pc, #448]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002796:	4b6d      	ldr	r3, [pc, #436]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	061b      	lsls	r3, r3, #24
 80027a4:	4969      	ldr	r1, [pc, #420]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
 80027aa:	e018      	b.n	80027de <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027ac:	4b67      	ldr	r3, [pc, #412]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a66      	ldr	r2, [pc, #408]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 80027b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7ff f888 	bl	80018cc <HAL_GetTick>
 80027bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027c0:	f7ff f884 	bl	80018cc <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e23c      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027d2:	4b5e      	ldr	r3, [pc, #376]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d036      	beq.n	8002858 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d019      	beq.n	8002826 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b56      	ldr	r3, [pc, #344]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 80027f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f6:	4a55      	ldr	r2, [pc, #340]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7ff f865 	bl	80018cc <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002806:	f7ff f861 	bl	80018cc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e219      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002818:	4b4c      	ldr	r3, [pc, #304]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x35e>
 8002824:	e018      	b.n	8002858 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002826:	4b49      	ldr	r3, [pc, #292]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282a:	4a48      	ldr	r2, [pc, #288]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7ff f84b 	bl	80018cc <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283a:	f7ff f847 	bl	80018cc <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1ff      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800284c:	4b3f      	ldr	r3, [pc, #252]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d036      	beq.n	80028d2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d019      	beq.n	80028a0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800286c:	4b37      	ldr	r3, [pc, #220]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a36      	ldr	r2, [pc, #216]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002872:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002876:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002878:	f7ff f828 	bl	80018cc <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002880:	f7ff f824 	bl	80018cc <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e1dc      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002892:	4b2e      	ldr	r3, [pc, #184]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x3d8>
 800289e:	e018      	b.n	80028d2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028a0:	4b2a      	ldr	r3, [pc, #168]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a29      	ldr	r2, [pc, #164]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 80028a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028ac:	f7ff f80e 	bl	80018cc <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b4:	f7ff f80a 	bl	80018cc <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1c2      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c6:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8086 	beq.w	80029ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_RCC_OscConfig+0x4a8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002950 <HAL_RCC_OscConfig+0x4a8>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028ec:	f7fe ffee 	bl	80018cc <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f4:	f7fe ffea 	bl	80018cc <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1a2      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002906:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <HAL_RCC_OscConfig+0x4a8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d106      	bne.n	8002928 <HAL_RCC_OscConfig+0x480>
 800291a:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	4a0b      	ldr	r2, [pc, #44]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6713      	str	r3, [r2, #112]	@ 0x70
 8002926:	e032      	b.n	800298e <HAL_RCC_OscConfig+0x4e6>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d111      	bne.n	8002954 <HAL_RCC_OscConfig+0x4ac>
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	4a05      	ldr	r2, [pc, #20]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	@ 0x70
 800293c:	4b03      	ldr	r3, [pc, #12]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a02      	ldr	r2, [pc, #8]	@ (800294c <HAL_RCC_OscConfig+0x4a4>)
 8002942:	f023 0304 	bic.w	r3, r3, #4
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
 8002948:	e021      	b.n	800298e <HAL_RCC_OscConfig+0x4e6>
 800294a:	bf00      	nop
 800294c:	58024400 	.word	0x58024400
 8002950:	58024800 	.word	0x58024800
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d10c      	bne.n	8002976 <HAL_RCC_OscConfig+0x4ce>
 800295c:	4b83      	ldr	r3, [pc, #524]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4a82      	ldr	r2, [pc, #520]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	6713      	str	r3, [r2, #112]	@ 0x70
 8002968:	4b80      	ldr	r3, [pc, #512]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
 8002974:	e00b      	b.n	800298e <HAL_RCC_OscConfig+0x4e6>
 8002976:	4b7d      	ldr	r3, [pc, #500]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	4b7a      	ldr	r3, [pc, #488]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	4a79      	ldr	r2, [pc, #484]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7fe ff99 	bl	80018cc <HAL_GetTick>
 800299a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe ff95 	bl	80018cc <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e14b      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b4:	4b6d      	ldr	r3, [pc, #436]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ee      	beq.n	800299e <HAL_RCC_OscConfig+0x4f6>
 80029c0:	e014      	b.n	80029ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe ff83 	bl	80018cc <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe ff7f 	bl	80018cc <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e135      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029e0:	4b62      	ldr	r3, [pc, #392]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ee      	bne.n	80029ca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 812a 	beq.w	8002c4a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029f6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029fe:	2b18      	cmp	r3, #24
 8002a00:	f000 80ba 	beq.w	8002b78 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	f040 8095 	bne.w	8002b38 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b57      	ldr	r3, [pc, #348]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a56      	ldr	r2, [pc, #344]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002a14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7fe ff57 	bl	80018cc <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe ff53 	bl	80018cc <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e10b      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a34:	4b4d      	ldr	r3, [pc, #308]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a40:	4b4a      	ldr	r3, [pc, #296]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002a42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a44:	4b4a      	ldr	r3, [pc, #296]	@ (8002b70 <HAL_RCC_OscConfig+0x6c8>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	430a      	orrs	r2, r1
 8002a54:	4945      	ldr	r1, [pc, #276]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	025b      	lsls	r3, r3, #9
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a74:	3b01      	subs	r3, #1
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a82:	3b01      	subs	r3, #1
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a8a:	4938      	ldr	r1, [pc, #224]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a90:	4b36      	ldr	r3, [pc, #216]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	4a35      	ldr	r2, [pc, #212]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a9c:	4b33      	ldr	r3, [pc, #204]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aa0:	4b34      	ldr	r3, [pc, #208]	@ (8002b74 <HAL_RCC_OscConfig+0x6cc>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002aa8:	00d2      	lsls	r2, r2, #3
 8002aaa:	4930      	ldr	r1, [pc, #192]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	f023 020c 	bic.w	r2, r3, #12
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	492b      	ldr	r1, [pc, #172]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac6:	f023 0202 	bic.w	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	4927      	ldr	r1, [pc, #156]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ad4:	4b25      	ldr	r3, [pc, #148]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	4a24      	ldr	r2, [pc, #144]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002ada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae0:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	4a21      	ldr	r2, [pc, #132]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002aec:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002af2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002af8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b04:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a18      	ldr	r2, [pc, #96]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fedc 	bl	80018cc <HAL_GetTick>
 8002b14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fed8 	bl	80018cc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e090      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x670>
 8002b36:	e088      	b.n	8002c4a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fec2 	bl	80018cc <HAL_GetTick>
 8002b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe febe 	bl	80018cc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e076      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b5e:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <HAL_RCC_OscConfig+0x6c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x6a4>
 8002b6a:	e06e      	b.n	8002c4a <HAL_RCC_OscConfig+0x7a2>
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	fffffc0c 	.word	0xfffffc0c
 8002b74:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b78:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <HAL_RCC_OscConfig+0x7ac>)
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b7e:	4b35      	ldr	r3, [pc, #212]	@ (8002c54 <HAL_RCC_OscConfig+0x7ac>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d031      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f003 0203 	and.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d12a      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d122      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d11a      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	0a5b      	lsrs	r3, r3, #9
 8002bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d111      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0e1b      	lsrs	r3, r3, #24
 8002be2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e02b      	b.n	8002c4c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bf4:	4b17      	ldr	r3, [pc, #92]	@ (8002c54 <HAL_RCC_OscConfig+0x7ac>)
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf8:	08db      	lsrs	r3, r3, #3
 8002bfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bfe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d01f      	beq.n	8002c4a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c0a:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <HAL_RCC_OscConfig+0x7ac>)
 8002c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0e:	4a11      	ldr	r2, [pc, #68]	@ (8002c54 <HAL_RCC_OscConfig+0x7ac>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c16:	f7fe fe59 	bl	80018cc <HAL_GetTick>
 8002c1a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c1c:	bf00      	nop
 8002c1e:	f7fe fe55 	bl	80018cc <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d0f9      	beq.n	8002c1e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <HAL_RCC_OscConfig+0x7ac>)
 8002c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <HAL_RCC_OscConfig+0x7b0>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c36:	00d2      	lsls	r2, r2, #3
 8002c38:	4906      	ldr	r1, [pc, #24]	@ (8002c54 <HAL_RCC_OscConfig+0x7ac>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c3e:	4b05      	ldr	r3, [pc, #20]	@ (8002c54 <HAL_RCC_OscConfig+0x7ac>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c42:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <HAL_RCC_OscConfig+0x7ac>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3730      	adds	r7, #48	@ 0x30
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	58024400 	.word	0x58024400
 8002c58:	ffff0007 	.word	0xffff0007

08002c5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e19c      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b8a      	ldr	r3, [pc, #552]	@ (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d910      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b87      	ldr	r3, [pc, #540]	@ (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 020f 	bic.w	r2, r3, #15
 8002c86:	4985      	ldr	r1, [pc, #532]	@ (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b83      	ldr	r3, [pc, #524]	@ (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e184      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d010      	beq.n	8002cce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d908      	bls.n	8002cce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cbc:	4b78      	ldr	r3, [pc, #480]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4975      	ldr	r1, [pc, #468]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d010      	beq.n	8002cfc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	4b70      	ldr	r3, [pc, #448]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d908      	bls.n	8002cfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cea:	4b6d      	ldr	r3, [pc, #436]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	496a      	ldr	r1, [pc, #424]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d908      	bls.n	8002d2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d18:	4b61      	ldr	r3, [pc, #388]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	495e      	ldr	r1, [pc, #376]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d010      	beq.n	8002d58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	4b59      	ldr	r3, [pc, #356]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d908      	bls.n	8002d58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d46:	4b56      	ldr	r3, [pc, #344]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4953      	ldr	r1, [pc, #332]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d908      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f023 020f 	bic.w	r2, r3, #15
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4947      	ldr	r1, [pc, #284]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d055      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d92:	4b43      	ldr	r3, [pc, #268]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	4940      	ldr	r1, [pc, #256]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dac:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d121      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0f6      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc4:	4b36      	ldr	r3, [pc, #216]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d115      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0ea      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ddc:	4b30      	ldr	r3, [pc, #192]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0de      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dec:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0d6      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dfc:	4b28      	ldr	r3, [pc, #160]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f023 0207 	bic.w	r2, r3, #7
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4925      	ldr	r1, [pc, #148]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0e:	f7fe fd5d 	bl	80018cc <HAL_GetTick>
 8002e12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e16:	f7fe fd59 	bl	80018cc <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0be      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d1eb      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	4b14      	ldr	r3, [pc, #80]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d208      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f023 020f 	bic.w	r2, r3, #15
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	490e      	ldr	r1, [pc, #56]	@ (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d214      	bcs.n	8002ea4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 020f 	bic.w	r2, r3, #15
 8002e82:	4906      	ldr	r1, [pc, #24]	@ (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b04      	ldr	r3, [pc, #16]	@ (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e086      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
 8002e9c:	52002000 	.word	0x52002000
 8002ea0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d208      	bcs.n	8002ed2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	4939      	ldr	r1, [pc, #228]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	4b34      	ldr	r3, [pc, #208]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d208      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eee:	4b31      	ldr	r3, [pc, #196]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	492e      	ldr	r1, [pc, #184]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d208      	bcs.n	8002f2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f1c:	4b25      	ldr	r3, [pc, #148]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4922      	ldr	r1, [pc, #136]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d208      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4917      	ldr	r1, [pc, #92]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f5c:	f000 f834 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	4912      	ldr	r1, [pc, #72]	@ (8002fb8 <HAL_RCC_ClockConfig+0x35c>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb8 <HAL_RCC_ClockConfig+0x35c>)
 8002f84:	5cd3      	ldrb	r3, [r2, r3]
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f90:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <HAL_RCC_ClockConfig+0x360>)
 8002f92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f94:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc0 <HAL_RCC_ClockConfig+0x364>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <HAL_RCC_ClockConfig+0x368>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fc4a 	bl	8001838 <HAL_InitTick>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	58024400 	.word	0x58024400
 8002fb8:	0800a0fc 	.word	0x0800a0fc
 8002fbc:	24000004 	.word	0x24000004
 8002fc0:	24000000 	.word	0x24000000
 8002fc4:	24000008 	.word	0x24000008

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	@ 0x24
 8002fcc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fce:	4bb3      	ldr	r3, [pc, #716]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fd6:	2b18      	cmp	r3, #24
 8002fd8:	f200 8155 	bhi.w	8003286 <HAL_RCC_GetSysClockFreq+0x2be>
 8002fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08003049 	.word	0x08003049
 8002fe8:	08003287 	.word	0x08003287
 8002fec:	08003287 	.word	0x08003287
 8002ff0:	08003287 	.word	0x08003287
 8002ff4:	08003287 	.word	0x08003287
 8002ff8:	08003287 	.word	0x08003287
 8002ffc:	08003287 	.word	0x08003287
 8003000:	08003287 	.word	0x08003287
 8003004:	0800306f 	.word	0x0800306f
 8003008:	08003287 	.word	0x08003287
 800300c:	08003287 	.word	0x08003287
 8003010:	08003287 	.word	0x08003287
 8003014:	08003287 	.word	0x08003287
 8003018:	08003287 	.word	0x08003287
 800301c:	08003287 	.word	0x08003287
 8003020:	08003287 	.word	0x08003287
 8003024:	08003075 	.word	0x08003075
 8003028:	08003287 	.word	0x08003287
 800302c:	08003287 	.word	0x08003287
 8003030:	08003287 	.word	0x08003287
 8003034:	08003287 	.word	0x08003287
 8003038:	08003287 	.word	0x08003287
 800303c:	08003287 	.word	0x08003287
 8003040:	08003287 	.word	0x08003287
 8003044:	0800307b 	.word	0x0800307b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003048:	4b94      	ldr	r3, [pc, #592]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003054:	4b91      	ldr	r3, [pc, #580]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	08db      	lsrs	r3, r3, #3
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	4a90      	ldr	r2, [pc, #576]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
 8003064:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003066:	e111      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003068:	4b8d      	ldr	r3, [pc, #564]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800306a:	61bb      	str	r3, [r7, #24]
      break;
 800306c:	e10e      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800306e:	4b8d      	ldr	r3, [pc, #564]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003070:	61bb      	str	r3, [r7, #24]
      break;
 8003072:	e10b      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003074:	4b8c      	ldr	r3, [pc, #560]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003076:	61bb      	str	r3, [r7, #24]
      break;
 8003078:	e108      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800307a:	4b88      	ldr	r3, [pc, #544]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003084:	4b85      	ldr	r3, [pc, #532]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800308e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003090:	4b82      	ldr	r3, [pc, #520]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800309a:	4b80      	ldr	r3, [pc, #512]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309e:	08db      	lsrs	r3, r3, #3
 80030a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80e1 	beq.w	8003280 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	f000 8083 	beq.w	80031cc <HAL_RCC_GetSysClockFreq+0x204>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	f200 80a1 	bhi.w	8003210 <HAL_RCC_GetSysClockFreq+0x248>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x114>
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d056      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030da:	e099      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030dc:	4b6f      	ldr	r3, [pc, #444]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d02d      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030e8:	4b6c      	ldr	r3, [pc, #432]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	08db      	lsrs	r3, r3, #3
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	4a6b      	ldr	r2, [pc, #428]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
 80030f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003112:	4b62      	ldr	r3, [pc, #392]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003122:	ed97 6a02 	vldr	s12, [r7, #8]
 8003126:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800312a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800312e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003142:	e087      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003156:	4b51      	ldr	r3, [pc, #324]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003166:	ed97 6a02 	vldr	s12, [r7, #8]
 800316a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800316e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800317a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003186:	e065      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319a:	4b40      	ldr	r3, [pc, #256]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ca:	e043      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031de:	4b2f      	ldr	r3, [pc, #188]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80031f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800320e:	e021      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800321e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003222:	4b1e      	ldr	r3, [pc, #120]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003232:	ed97 6a02 	vldr	s12, [r7, #8]
 8003236:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800323a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800323e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800324a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003252:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003254:	4b11      	ldr	r3, [pc, #68]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	0a5b      	lsrs	r3, r3, #9
 800325a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800325e:	3301      	adds	r3, #1
 8003260:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800326c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003278:	ee17 3a90 	vmov	r3, s15
 800327c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800327e:	e005      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
      break;
 8003284:	e002      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003286:	4b07      	ldr	r3, [pc, #28]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003288:	61bb      	str	r3, [r7, #24]
      break;
 800328a:	bf00      	nop
  }

  return sysclockfreq;
 800328c:	69bb      	ldr	r3, [r7, #24]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3724      	adds	r7, #36	@ 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	58024400 	.word	0x58024400
 80032a0:	03d09000 	.word	0x03d09000
 80032a4:	003d0900 	.word	0x003d0900
 80032a8:	017d7840 	.word	0x017d7840
 80032ac:	46000000 	.word	0x46000000
 80032b0:	4c742400 	.word	0x4c742400
 80032b4:	4a742400 	.word	0x4a742400
 80032b8:	4bbebc20 	.word	0x4bbebc20

080032bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032c2:	f7ff fe81 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 80032c6:	4602      	mov	r2, r0
 80032c8:	4b10      	ldr	r3, [pc, #64]	@ (800330c <HAL_RCC_GetHCLKFreq+0x50>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	490f      	ldr	r1, [pc, #60]	@ (8003310 <HAL_RCC_GetHCLKFreq+0x54>)
 80032d4:	5ccb      	ldrb	r3, [r1, r3]
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032e0:	4b0a      	ldr	r3, [pc, #40]	@ (800330c <HAL_RCC_GetHCLKFreq+0x50>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	4a09      	ldr	r2, [pc, #36]	@ (8003310 <HAL_RCC_GetHCLKFreq+0x54>)
 80032ea:	5cd3      	ldrb	r3, [r2, r3]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	fa22 f303 	lsr.w	r3, r2, r3
 80032f6:	4a07      	ldr	r2, [pc, #28]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x58>)
 80032f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032fa:	4a07      	ldr	r2, [pc, #28]	@ (8003318 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003300:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x58>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	58024400 	.word	0x58024400
 8003310:	0800a0fc 	.word	0x0800a0fc
 8003314:	24000004 	.word	0x24000004
 8003318:	24000000 	.word	0x24000000

0800331c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003320:	f7ff ffcc 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4904      	ldr	r1, [pc, #16]	@ (8003344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	58024400 	.word	0x58024400
 8003344:	0800a0fc 	.word	0x0800a0fc

08003348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800334c:	f7ff ffb6 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b06      	ldr	r3, [pc, #24]	@ (800336c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4904      	ldr	r1, [pc, #16]	@ (8003370 <HAL_RCC_GetPCLK2Freq+0x28>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	58024400 	.word	0x58024400
 8003370:	0800a0fc 	.word	0x0800a0fc

08003374 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003378:	b0c6      	sub	sp, #280	@ 0x118
 800337a:	af00      	add	r7, sp, #0
 800337c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003380:	2300      	movs	r3, #0
 8003382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003386:	2300      	movs	r3, #0
 8003388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800338c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003398:	2500      	movs	r5, #0
 800339a:	ea54 0305 	orrs.w	r3, r4, r5
 800339e:	d049      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033aa:	d02f      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033b0:	d828      	bhi.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033b6:	d01a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033bc:	d822      	bhi.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c6:	d007      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033c8:	e01c      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ca:	4bab      	ldr	r3, [pc, #684]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ce:	4aaa      	ldr	r2, [pc, #680]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033d6:	e01a      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033dc:	3308      	adds	r3, #8
 80033de:	2102      	movs	r1, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 fc25 	bl	8004c30 <RCCEx_PLL2_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033ec:	e00f      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f2:	3328      	adds	r3, #40	@ 0x28
 80033f4:	2102      	movs	r1, #2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 fccc 	bl	8004d94 <RCCEx_PLL3_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003402:	e004      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800340a:	e000      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800340c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800340e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003416:	4b98      	ldr	r3, [pc, #608]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800341e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003424:	4a94      	ldr	r2, [pc, #592]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003426:	430b      	orrs	r3, r1
 8003428:	6513      	str	r3, [r2, #80]	@ 0x50
 800342a:	e003      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003430:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003440:	f04f 0900 	mov.w	r9, #0
 8003444:	ea58 0309 	orrs.w	r3, r8, r9
 8003448:	d047      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800344a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	2b04      	cmp	r3, #4
 8003452:	d82a      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003454:	a201      	add	r2, pc, #4	@ (adr r2, 800345c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003471 	.word	0x08003471
 8003460:	0800347f 	.word	0x0800347f
 8003464:	08003495 	.word	0x08003495
 8003468:	080034b3 	.word	0x080034b3
 800346c:	080034b3 	.word	0x080034b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003470:	4b81      	ldr	r3, [pc, #516]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	4a80      	ldr	r2, [pc, #512]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800347a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800347c:	e01a      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800347e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003482:	3308      	adds	r3, #8
 8003484:	2100      	movs	r1, #0
 8003486:	4618      	mov	r0, r3
 8003488:	f001 fbd2 	bl	8004c30 <RCCEx_PLL2_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003492:	e00f      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003498:	3328      	adds	r3, #40	@ 0x28
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f001 fc79 	bl	8004d94 <RCCEx_PLL3_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a8:	e004      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034bc:	4b6e      	ldr	r3, [pc, #440]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c0:	f023 0107 	bic.w	r1, r3, #7
 80034c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	4a6b      	ldr	r2, [pc, #428]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80034e6:	f04f 0b00 	mov.w	fp, #0
 80034ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80034ee:	d05b      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034f8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80034fc:	d03b      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80034fe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003502:	d834      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003504:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003508:	d037      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800350a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800350e:	d82e      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003510:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003514:	d033      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003516:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800351a:	d828      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800351c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003520:	d01a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003526:	d822      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800352c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003530:	d007      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003532:	e01c      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003534:	4b50      	ldr	r3, [pc, #320]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	4a4f      	ldr	r2, [pc, #316]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800353a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003540:	e01e      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003546:	3308      	adds	r3, #8
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f001 fb70 	bl	8004c30 <RCCEx_PLL2_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003556:	e013      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800355c:	3328      	adds	r3, #40	@ 0x28
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fc17 	bl	8004d94 <RCCEx_PLL3_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800356c:	e008      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003574:	e004      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800357e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10b      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003588:	4b3b      	ldr	r3, [pc, #236]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003594:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003598:	4a37      	ldr	r2, [pc, #220]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800359a:	430b      	orrs	r3, r1
 800359c:	6593      	str	r3, [r2, #88]	@ 0x58
 800359e:	e003      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035c2:	460b      	mov	r3, r1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	d05d      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035d0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035d4:	d03b      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80035d6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035da:	d834      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035e0:	d037      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80035e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035e6:	d82e      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035ec:	d033      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80035ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035f2:	d828      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035f8:	d01a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80035fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035fe:	d822      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003608:	d007      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800360a:	e01c      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360c:	4b1a      	ldr	r3, [pc, #104]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	4a19      	ldr	r2, [pc, #100]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003618:	e01e      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800361a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361e:	3308      	adds	r3, #8
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fb04 	bl	8004c30 <RCCEx_PLL2_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800362e:	e013      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003634:	3328      	adds	r3, #40	@ 0x28
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fbab 	bl	8004d94 <RCCEx_PLL3_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003644:	e008      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800364c:	e004      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800364e:	bf00      	nop
 8003650:	e002      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003664:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003670:	4a01      	ldr	r2, [pc, #4]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003672:	430b      	orrs	r3, r1
 8003674:	6593      	str	r3, [r2, #88]	@ 0x58
 8003676:	e005      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003690:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800369a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800369e:	460b      	mov	r3, r1
 80036a0:	4313      	orrs	r3, r2
 80036a2:	d03a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80036a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036aa:	2b30      	cmp	r3, #48	@ 0x30
 80036ac:	d01f      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80036ae:	2b30      	cmp	r3, #48	@ 0x30
 80036b0:	d819      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d00c      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d815      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d019      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d111      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c2:	4baa      	ldr	r3, [pc, #680]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	4aa9      	ldr	r2, [pc, #676]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036ce:	e011      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d4:	3308      	adds	r3, #8
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 faa9 	bl	8004c30 <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036e4:	e006      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036ec:	e002      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80036f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036fc:	4b9b      	ldr	r3, [pc, #620]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003700:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370a:	4a98      	ldr	r2, [pc, #608]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800370c:	430b      	orrs	r3, r1
 800370e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003716:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800371a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003726:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003730:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003734:	460b      	mov	r3, r1
 8003736:	4313      	orrs	r3, r2
 8003738:	d051      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800373a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003744:	d035      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003746:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800374a:	d82e      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 800374c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003750:	d031      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003752:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003756:	d828      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800375c:	d01a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003762:	d822      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800376c:	d007      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800376e:	e01c      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003770:	4b7e      	ldr	r3, [pc, #504]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	4a7d      	ldr	r2, [pc, #500]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800377a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800377c:	e01c      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800377e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003782:	3308      	adds	r3, #8
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f001 fa52 	bl	8004c30 <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003792:	e011      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003798:	3328      	adds	r3, #40	@ 0x28
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f001 faf9 	bl	8004d94 <RCCEx_PLL3_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a8:	e006      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037b0:	e002      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80037b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037c0:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	4a67      	ldr	r2, [pc, #412]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037d4:	e003      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037f4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d053      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003808:	d033      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800380a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800380e:	d82c      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003810:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003814:	d02f      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003816:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800381a:	d826      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800381c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003820:	d02b      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003822:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003826:	d820      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800382c:	d012      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800382e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003832:	d81a      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d022      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800383c:	d115      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800383e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003842:	3308      	adds	r3, #8
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f001 f9f2 	bl	8004c30 <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003852:	e015      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003858:	3328      	adds	r3, #40	@ 0x28
 800385a:	2101      	movs	r1, #1
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fa99 	bl	8004d94 <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003868:	e00a      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003872:	bf00      	nop
 8003874:	e004      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003888:	4b38      	ldr	r3, [pc, #224]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003896:	4a35      	ldr	r2, [pc, #212]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6513      	str	r3, [r2, #80]	@ 0x50
 800389c:	e003      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038bc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038c0:	460b      	mov	r3, r1
 80038c2:	4313      	orrs	r3, r2
 80038c4:	d058      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038d2:	d033      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80038d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038d8:	d82c      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038de:	d02f      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e4:	d826      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038ea:	d02b      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80038ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038f0:	d820      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038f6:	d012      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80038f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038fc:	d81a      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d022      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003906:	d115      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390c:	3308      	adds	r3, #8
 800390e:	2101      	movs	r1, #1
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f98d 	bl	8004c30 <RCCEx_PLL2_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800391c:	e015      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800391e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003922:	3328      	adds	r3, #40	@ 0x28
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f001 fa34 	bl	8004d94 <RCCEx_PLL3_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003932:	e00a      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800393a:	e006      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800393c:	bf00      	nop
 800393e:	e004      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10e      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003956:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800395a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800395e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003962:	4a02      	ldr	r2, [pc, #8]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003964:	430b      	orrs	r3, r1
 8003966:	6593      	str	r3, [r2, #88]	@ 0x58
 8003968:	e006      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800396a:	bf00      	nop
 800396c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003974:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800398e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003992:	460b      	mov	r3, r1
 8003994:	4313      	orrs	r3, r2
 8003996:	d037      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800399c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800399e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a2:	d00e      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80039a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a8:	d816      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d018      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80039ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039b2:	d111      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b4:	4bc4      	ldr	r3, [pc, #784]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b8:	4ac3      	ldr	r2, [pc, #780]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039c0:	e00f      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c6:	3308      	adds	r3, #8
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 f930 	bl	8004c30 <RCCEx_PLL2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039d6:	e004      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039de:	e000      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80039e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ea:	4bb7      	ldr	r3, [pc, #732]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039f8:	4ab3      	ldr	r2, [pc, #716]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d039      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d81c      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a32:	a201      	add	r2, pc, #4	@ (adr r2, 8003a38 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a75 	.word	0x08003a75
 8003a3c:	08003a49 	.word	0x08003a49
 8003a40:	08003a57 	.word	0x08003a57
 8003a44:	08003a75 	.word	0x08003a75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a48:	4b9f      	ldr	r3, [pc, #636]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	4a9e      	ldr	r2, [pc, #632]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a54:	e00f      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 f8e6 	bl	8004c30 <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a6a:	e004      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a7e:	4b92      	ldr	r3, [pc, #584]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a82:	f023 0103 	bic.w	r1, r3, #3
 8003a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8c:	4a8e      	ldr	r2, [pc, #568]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a92:	e003      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aac:	2300      	movs	r3, #0
 8003aae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ab2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f000 8099 	beq.w	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003abe:	4b83      	ldr	r3, [pc, #524]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a82      	ldr	r2, [pc, #520]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aca:	f7fd feff 	bl	80018cc <HAL_GetTick>
 8003ace:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad2:	e00b      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad4:	f7fd fefa 	bl	80018cc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b64      	cmp	r3, #100	@ 0x64
 8003ae2:	d903      	bls.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003aea:	e005      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aec:	4b77      	ldr	r3, [pc, #476]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ed      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d173      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b00:	4b71      	ldr	r3, [pc, #452]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b0c:	4053      	eors	r3, r2
 8003b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d015      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b16:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b1e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b22:	4b69      	ldr	r3, [pc, #420]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	4a68      	ldr	r2, [pc, #416]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2e:	4b66      	ldr	r3, [pc, #408]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	4a65      	ldr	r2, [pc, #404]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b38:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b3a:	4a63      	ldr	r2, [pc, #396]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b40:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b4e:	d118      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd febc 	bl	80018cc <HAL_GetTick>
 8003b54:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b58:	e00d      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fd feb7 	bl	80018cc <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b64:	1ad2      	subs	r2, r2, r3
 8003b66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d903      	bls.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003b74:	e005      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b76:	4b54      	ldr	r3, [pc, #336]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0eb      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003b82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d129      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b9a:	d10e      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bac:	091a      	lsrs	r2, r3, #4
 8003bae:	4b48      	ldr	r3, [pc, #288]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	4a45      	ldr	r2, [pc, #276]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6113      	str	r3, [r2, #16]
 8003bb8:	e005      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003bba:	4b43      	ldr	r3, [pc, #268]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	4a42      	ldr	r2, [pc, #264]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bc4:	6113      	str	r3, [r2, #16]
 8003bc6:	4b40      	ldr	r3, [pc, #256]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003be2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003be6:	e003      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f002 0301 	and.w	r3, r2, #1
 8003bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f000 808f 	beq.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c18:	2b28      	cmp	r3, #40	@ 0x28
 8003c1a:	d871      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003d09 	.word	0x08003d09
 8003c28:	08003d01 	.word	0x08003d01
 8003c2c:	08003d01 	.word	0x08003d01
 8003c30:	08003d01 	.word	0x08003d01
 8003c34:	08003d01 	.word	0x08003d01
 8003c38:	08003d01 	.word	0x08003d01
 8003c3c:	08003d01 	.word	0x08003d01
 8003c40:	08003d01 	.word	0x08003d01
 8003c44:	08003cd5 	.word	0x08003cd5
 8003c48:	08003d01 	.word	0x08003d01
 8003c4c:	08003d01 	.word	0x08003d01
 8003c50:	08003d01 	.word	0x08003d01
 8003c54:	08003d01 	.word	0x08003d01
 8003c58:	08003d01 	.word	0x08003d01
 8003c5c:	08003d01 	.word	0x08003d01
 8003c60:	08003d01 	.word	0x08003d01
 8003c64:	08003ceb 	.word	0x08003ceb
 8003c68:	08003d01 	.word	0x08003d01
 8003c6c:	08003d01 	.word	0x08003d01
 8003c70:	08003d01 	.word	0x08003d01
 8003c74:	08003d01 	.word	0x08003d01
 8003c78:	08003d01 	.word	0x08003d01
 8003c7c:	08003d01 	.word	0x08003d01
 8003c80:	08003d01 	.word	0x08003d01
 8003c84:	08003d09 	.word	0x08003d09
 8003c88:	08003d01 	.word	0x08003d01
 8003c8c:	08003d01 	.word	0x08003d01
 8003c90:	08003d01 	.word	0x08003d01
 8003c94:	08003d01 	.word	0x08003d01
 8003c98:	08003d01 	.word	0x08003d01
 8003c9c:	08003d01 	.word	0x08003d01
 8003ca0:	08003d01 	.word	0x08003d01
 8003ca4:	08003d09 	.word	0x08003d09
 8003ca8:	08003d01 	.word	0x08003d01
 8003cac:	08003d01 	.word	0x08003d01
 8003cb0:	08003d01 	.word	0x08003d01
 8003cb4:	08003d01 	.word	0x08003d01
 8003cb8:	08003d01 	.word	0x08003d01
 8003cbc:	08003d01 	.word	0x08003d01
 8003cc0:	08003d01 	.word	0x08003d01
 8003cc4:	08003d09 	.word	0x08003d09
 8003cc8:	58024400 	.word	0x58024400
 8003ccc:	58024800 	.word	0x58024800
 8003cd0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd8:	3308      	adds	r3, #8
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 ffa7 	bl	8004c30 <RCCEx_PLL2_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ce8:	e00f      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cee:	3328      	adds	r3, #40	@ 0x28
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 f84e 	bl	8004d94 <RCCEx_PLL3_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cfe:	e004      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d06:	e000      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d12:	4bbf      	ldr	r3, [pc, #764]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d20:	4abb      	ldr	r2, [pc, #748]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f002 0302 	and.w	r3, r2, #2
 8003d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	d041      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d824      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d60 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003dad 	.word	0x08003dad
 8003d64:	08003d79 	.word	0x08003d79
 8003d68:	08003d8f 	.word	0x08003d8f
 8003d6c:	08003dad 	.word	0x08003dad
 8003d70:	08003dad 	.word	0x08003dad
 8003d74:	08003dad 	.word	0x08003dad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 ff55 	bl	8004c30 <RCCEx_PLL2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d8c:	e00f      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d92:	3328      	adds	r3, #40	@ 0x28
 8003d94:	2101      	movs	r1, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fffc 	bl	8004d94 <RCCEx_PLL3_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003da2:	e004      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003daa:	e000      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003db6:	4b96      	ldr	r3, [pc, #600]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	f023 0107 	bic.w	r1, r3, #7
 8003dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc4:	4a92      	ldr	r2, [pc, #584]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f002 0304 	and.w	r3, r2, #4
 8003de0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dee:	460b      	mov	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	d044      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfc:	2b05      	cmp	r3, #5
 8003dfe:	d825      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003e00:	a201      	add	r2, pc, #4	@ (adr r2, 8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e55 	.word	0x08003e55
 8003e0c:	08003e21 	.word	0x08003e21
 8003e10:	08003e37 	.word	0x08003e37
 8003e14:	08003e55 	.word	0x08003e55
 8003e18:	08003e55 	.word	0x08003e55
 8003e1c:	08003e55 	.word	0x08003e55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e24:	3308      	adds	r3, #8
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 ff01 	bl	8004c30 <RCCEx_PLL2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e34:	e00f      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3a:	3328      	adds	r3, #40	@ 0x28
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 ffa8 	bl	8004d94 <RCCEx_PLL3_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e62:	f023 0107 	bic.w	r1, r3, #7
 8003e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	4a68      	ldr	r2, [pc, #416]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e74:	e003      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f002 0320 	and.w	r3, r2, #32
 8003e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d055      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eaa:	d033      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eb0:	d82c      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb6:	d02f      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebc:	d826      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ebe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ec2:	d02b      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ec4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ec8:	d820      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ece:	d012      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed4:	d81a      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d022      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ede:	d115      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fea1 	bl	8004c30 <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e015      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2102      	movs	r1, #2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 ff48 	bl	8004d94 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f12:	e006      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f14:	bf00      	nop
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f2a:	4b39      	ldr	r3, [pc, #228]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f3a:	4a35      	ldr	r2, [pc, #212]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f60:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f64:	460b      	mov	r3, r1
 8003f66:	4313      	orrs	r3, r2
 8003f68:	d058      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f72:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f76:	d033      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003f78:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f7c:	d82c      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f82:	d02f      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f88:	d826      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f8e:	d02b      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003f90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f94:	d820      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9a:	d012      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fa0:	d81a      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d022      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003faa:	d115      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fe3b 	bl	8004c30 <RCCEx_PLL2_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fc0:	e015      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc6:	3328      	adds	r3, #40	@ 0x28
 8003fc8:	2102      	movs	r1, #2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fee2 	bl	8004d94 <RCCEx_PLL3_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fd6:	e00a      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fde:	e006      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fe0:	bf00      	nop
 8003fe2:	e004      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fe4:	bf00      	nop
 8003fe6:	e002      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fe8:	bf00      	nop
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10e      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004006:	4a02      	ldr	r2, [pc, #8]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004008:	430b      	orrs	r3, r1
 800400a:	6593      	str	r3, [r2, #88]	@ 0x58
 800400c:	e006      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800400e:	bf00      	nop
 8004010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004018:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800401c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004032:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004036:	460b      	mov	r3, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	d055      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800403c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004040:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004044:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004048:	d033      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800404a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800404e:	d82c      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004050:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004054:	d02f      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800405a:	d826      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800405c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004060:	d02b      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004062:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004066:	d820      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004068:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800406c:	d012      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800406e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004072:	d81a      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d022      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407c:	d115      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800407e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004082:	3308      	adds	r3, #8
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fdd2 	bl	8004c30 <RCCEx_PLL2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004092:	e015      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004098:	3328      	adds	r3, #40	@ 0x28
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fe79 	bl	8004d94 <RCCEx_PLL3_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040a8:	e00a      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040b0:	e006      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040b2:	bf00      	nop
 80040b4:	e004      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10b      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040c8:	4ba0      	ldr	r3, [pc, #640]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040d8:	4a9c      	ldr	r2, [pc, #624]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040da:	430b      	orrs	r3, r1
 80040dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80040de:	e003      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80040e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	f002 0308 	and.w	r3, r2, #8
 80040f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040f8:	2300      	movs	r3, #0
 80040fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040fe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004102:	460b      	mov	r3, r1
 8004104:	4313      	orrs	r3, r2
 8004106:	d01e      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004114:	d10c      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411a:	3328      	adds	r3, #40	@ 0x28
 800411c:	2102      	movs	r1, #2
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fe38 	bl	8004d94 <RCCEx_PLL3_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004130:	4b86      	ldr	r3, [pc, #536]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004134:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004140:	4a82      	ldr	r2, [pc, #520]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004142:	430b      	orrs	r3, r1
 8004144:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f002 0310 	and.w	r3, r2, #16
 8004152:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004156:	2300      	movs	r3, #0
 8004158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800415c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004160:	460b      	mov	r3, r1
 8004162:	4313      	orrs	r3, r2
 8004164:	d01e      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800416e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004172:	d10c      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004178:	3328      	adds	r3, #40	@ 0x28
 800417a:	2102      	movs	r1, #2
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fe09 	bl	8004d94 <RCCEx_PLL3_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800418e:	4b6f      	ldr	r3, [pc, #444]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004192:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800419e:	4a6b      	ldr	r2, [pc, #428]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80041b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041b2:	2300      	movs	r3, #0
 80041b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041b6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041ba:	460b      	mov	r3, r1
 80041bc:	4313      	orrs	r3, r2
 80041be:	d03e      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041cc:	d022      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80041ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041d2:	d81b      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041dc:	d00b      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80041de:	e015      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e4:	3308      	adds	r3, #8
 80041e6:	2100      	movs	r1, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fd21 	bl	8004c30 <RCCEx_PLL2_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041f4:	e00f      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fa:	3328      	adds	r3, #40	@ 0x28
 80041fc:	2102      	movs	r1, #2
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fdc8 	bl	8004d94 <RCCEx_PLL3_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800421e:	4b4b      	ldr	r3, [pc, #300]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004222:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800422e:	4a47      	ldr	r2, [pc, #284]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6593      	str	r3, [r2, #88]	@ 0x58
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800423a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800423e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800424a:	673b      	str	r3, [r7, #112]	@ 0x70
 800424c:	2300      	movs	r3, #0
 800424e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004250:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004254:	460b      	mov	r3, r1
 8004256:	4313      	orrs	r3, r2
 8004258:	d03b      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800425a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004262:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004266:	d01f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004268:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800426c:	d818      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800426e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004272:	d003      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004274:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004278:	d007      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800427a:	e011      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427c:	4b33      	ldr	r3, [pc, #204]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	4a32      	ldr	r2, [pc, #200]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004288:	e00f      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800428a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428e:	3328      	adds	r3, #40	@ 0x28
 8004290:	2101      	movs	r1, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fd7e 	bl	8004d94 <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b2:	4b26      	ldr	r3, [pc, #152]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c2:	4a22      	ldr	r2, [pc, #136]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042e0:	2300      	movs	r3, #0
 80042e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042e4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042e8:	460b      	mov	r3, r1
 80042ea:	4313      	orrs	r3, r2
 80042ec:	d034      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fc:	d007      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80042fe:	e011      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004300:	4b12      	ldr	r3, [pc, #72]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	4a11      	ldr	r2, [pc, #68]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800430a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800430c:	e00e      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800430e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004312:	3308      	adds	r3, #8
 8004314:	2102      	movs	r1, #2
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fc8a 	bl	8004c30 <RCCEx_PLL2_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004322:	e003      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800432a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10d      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004334:	4b05      	ldr	r3, [pc, #20]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004338:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004342:	4a02      	ldr	r2, [pc, #8]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004344:	430b      	orrs	r3, r1
 8004346:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800434a:	bf00      	nop
 800434c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004364:	663b      	str	r3, [r7, #96]	@ 0x60
 8004366:	2300      	movs	r3, #0
 8004368:	667b      	str	r3, [r7, #100]	@ 0x64
 800436a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800436e:	460b      	mov	r3, r1
 8004370:	4313      	orrs	r3, r2
 8004372:	d00c      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004378:	3328      	adds	r3, #40	@ 0x28
 800437a:	2102      	movs	r1, #2
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fd09 	bl	8004d94 <RCCEx_PLL3_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800438e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800439a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800439c:	2300      	movs	r3, #0
 800439e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043a0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043a4:	460b      	mov	r3, r1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	d036      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b4:	d018      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ba:	d811      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c0:	d014      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c6:	d80b      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d011      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80043cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043d0:	d106      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d2:	4bb7      	ldr	r3, [pc, #732]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	4ab6      	ldr	r2, [pc, #728]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043de:	e008      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043e6:	e004      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80043e8:	bf00      	nop
 80043ea:	e002      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80043ec:	bf00      	nop
 80043ee:	e000      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80043f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10a      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043fa:	4bad      	ldr	r3, [pc, #692]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004408:	4aa9      	ldr	r2, [pc, #676]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800440a:	430b      	orrs	r3, r1
 800440c:	6553      	str	r3, [r2, #84]	@ 0x54
 800440e:	e003      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004414:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004424:	653b      	str	r3, [r7, #80]	@ 0x50
 8004426:	2300      	movs	r3, #0
 8004428:	657b      	str	r3, [r7, #84]	@ 0x54
 800442a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004434:	4b9e      	ldr	r3, [pc, #632]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004438:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800443c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004442:	4a9b      	ldr	r2, [pc, #620]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004444:	430b      	orrs	r3, r1
 8004446:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004454:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004456:	2300      	movs	r3, #0
 8004458:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800445a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	d009      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004464:	4b92      	ldr	r3, [pc, #584]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004468:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800446c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004472:	4a8f      	ldr	r2, [pc, #572]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004474:	430b      	orrs	r3, r1
 8004476:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004484:	643b      	str	r3, [r7, #64]	@ 0x40
 8004486:	2300      	movs	r3, #0
 8004488:	647b      	str	r3, [r7, #68]	@ 0x44
 800448a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800448e:	460b      	mov	r3, r1
 8004490:	4313      	orrs	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004494:	4b86      	ldr	r3, [pc, #536]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	4a85      	ldr	r2, [pc, #532]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800449a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800449e:	6113      	str	r3, [r2, #16]
 80044a0:	4b83      	ldr	r3, [pc, #524]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044a2:	6919      	ldr	r1, [r3, #16]
 80044a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044ac:	4a80      	ldr	r2, [pc, #512]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80044be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044c0:	2300      	movs	r3, #0
 80044c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044c8:	460b      	mov	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044ce:	4b78      	ldr	r3, [pc, #480]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044dc:	4a74      	ldr	r2, [pc, #464]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044de:	430b      	orrs	r3, r1
 80044e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80044ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80044f0:	2300      	movs	r3, #0
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80044f8:	460b      	mov	r3, r1
 80044fa:	4313      	orrs	r3, r2
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044fe:	4b6c      	ldr	r3, [pc, #432]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	4a68      	ldr	r2, [pc, #416]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	2100      	movs	r1, #0
 800451e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004526:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800452a:	460b      	mov	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	d011      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004534:	3308      	adds	r3, #8
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fb79 	bl	8004c30 <RCCEx_PLL2_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004544:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004550:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	2100      	movs	r1, #0
 800455e:	6239      	str	r1, [r7, #32]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	627b      	str	r3, [r7, #36]	@ 0x24
 8004566:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800456a:	460b      	mov	r3, r1
 800456c:	4313      	orrs	r3, r2
 800456e:	d011      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004574:	3308      	adds	r3, #8
 8004576:	2101      	movs	r1, #1
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fb59 	bl	8004c30 <RCCEx_PLL2_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004584:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	2100      	movs	r1, #0
 800459e:	61b9      	str	r1, [r7, #24]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045aa:	460b      	mov	r3, r1
 80045ac:	4313      	orrs	r3, r2
 80045ae:	d011      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b4:	3308      	adds	r3, #8
 80045b6:	2102      	movs	r1, #2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fb39 	bl	8004c30 <RCCEx_PLL2_Config>
 80045be:	4603      	mov	r3, r0
 80045c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	2100      	movs	r1, #0
 80045de:	6139      	str	r1, [r7, #16]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045ea:	460b      	mov	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	d011      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f4:	3328      	adds	r3, #40	@ 0x28
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fbcb 	bl	8004d94 <RCCEx_PLL3_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004604:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004610:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	2100      	movs	r1, #0
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800462a:	460b      	mov	r3, r1
 800462c:	4313      	orrs	r3, r2
 800462e:	d011      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004634:	3328      	adds	r3, #40	@ 0x28
 8004636:	2101      	movs	r1, #1
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fbab 	bl	8004d94 <RCCEx_PLL3_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004644:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004650:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	2100      	movs	r1, #0
 800465e:	6039      	str	r1, [r7, #0]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	607b      	str	r3, [r7, #4]
 8004666:	e9d7 1200 	ldrd	r1, r2, [r7]
 800466a:	460b      	mov	r3, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	d011      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004674:	3328      	adds	r3, #40	@ 0x28
 8004676:	2102      	movs	r1, #2
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fb8b 	bl	8004d94 <RCCEx_PLL3_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004684:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004690:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004694:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80046a8:	46bd      	mov	sp, r7
 80046aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ae:	bf00      	nop
 80046b0:	58024400 	.word	0x58024400

080046b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046b8:	f7fe fe00 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 80046bc:	4602      	mov	r2, r0
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	4904      	ldr	r1, [pc, #16]	@ (80046dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046ca:	5ccb      	ldrb	r3, [r1, r3]
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	58024400 	.word	0x58024400
 80046dc:	0800a0fc 	.word	0x0800a0fc

080046e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	@ 0x24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046e8:	4ba1      	ldr	r3, [pc, #644]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80046f2:	4b9f      	ldr	r3, [pc, #636]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f6:	0b1b      	lsrs	r3, r3, #12
 80046f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046fe:	4b9c      	ldr	r3, [pc, #624]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800470a:	4b99      	ldr	r3, [pc, #612]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470e:	08db      	lsrs	r3, r3, #3
 8004710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8111 	beq.w	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b02      	cmp	r3, #2
 8004732:	f000 8083 	beq.w	800483c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b02      	cmp	r3, #2
 800473a:	f200 80a1 	bhi.w	8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d056      	beq.n	80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800474a:	e099      	b.n	8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800474c:	4b88      	ldr	r3, [pc, #544]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02d      	beq.n	80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004758:	4b85      	ldr	r3, [pc, #532]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	08db      	lsrs	r3, r3, #3
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	4a84      	ldr	r2, [pc, #528]	@ (8004974 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
 8004768:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004782:	4b7b      	ldr	r3, [pc, #492]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004792:	ed97 6a03 	vldr	s12, [r7, #12]
 8004796:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800479a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047b2:	e087      	b.n	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800497c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047f6:	e065      	b.n	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004802:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480a:	4b59      	ldr	r3, [pc, #356]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481a:	ed97 6a03 	vldr	s12, [r7, #12]
 800481e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800482e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800483a:	e043      	b.n	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800484a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484e:	4b48      	ldr	r3, [pc, #288]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004862:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800487e:	e021      	b.n	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800488e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004892:	4b37      	ldr	r3, [pc, #220]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	0a5b      	lsrs	r3, r3, #9
 80048ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048de:	edd7 6a07 	vldr	s13, [r7, #28]
 80048e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ea:	ee17 2a90 	vmov	r2, s15
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80048f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004904:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800490c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004918:	ee17 2a90 	vmov	r2, s15
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004920:	4b13      	ldr	r3, [pc, #76]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004924:	0e1b      	lsrs	r3, r3, #24
 8004926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800493a:	edd7 6a07 	vldr	s13, [r7, #28]
 800493e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004946:	ee17 2a90 	vmov	r2, s15
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800494e:	e008      	b.n	8004962 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
}
 8004962:	bf00      	nop
 8004964:	3724      	adds	r7, #36	@ 0x24
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
 8004974:	03d09000 	.word	0x03d09000
 8004978:	46000000 	.word	0x46000000
 800497c:	4c742400 	.word	0x4c742400
 8004980:	4a742400 	.word	0x4a742400
 8004984:	4bbebc20 	.word	0x4bbebc20

08004988 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	@ 0x24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004990:	4ba1      	ldr	r3, [pc, #644]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800499a:	4b9f      	ldr	r3, [pc, #636]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	0d1b      	lsrs	r3, r3, #20
 80049a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049a6:	4b9c      	ldr	r3, [pc, #624]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049b2:	4b99      	ldr	r3, [pc, #612]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b6:	08db      	lsrs	r3, r3, #3
 80049b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8111 	beq.w	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	f000 8083 	beq.w	8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	f200 80a1 	bhi.w	8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d056      	beq.n	8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049f2:	e099      	b.n	8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049f4:	4b88      	ldr	r3, [pc, #544]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02d      	beq.n	8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a00:	4b85      	ldr	r3, [pc, #532]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	4a84      	ldr	r2, [pc, #528]	@ (8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a5a:	e087      	b.n	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9e:	e065      	b.n	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	4b59      	ldr	r3, [pc, #356]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae2:	e043      	b.n	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b48      	ldr	r3, [pc, #288]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b26:	e021      	b.n	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b37      	ldr	r3, [pc, #220]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	0a5b      	lsrs	r3, r3, #9
 8004b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b92:	ee17 2a90 	vmov	r2, s15
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc0:	ee17 2a90 	vmov	r2, s15
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004bc8:	4b13      	ldr	r3, [pc, #76]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	0e1b      	lsrs	r3, r3, #24
 8004bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bee:	ee17 2a90 	vmov	r2, s15
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bf6:	e008      	b.n	8004c0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	609a      	str	r2, [r3, #8]
}
 8004c0a:	bf00      	nop
 8004c0c:	3724      	adds	r7, #36	@ 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	58024400 	.word	0x58024400
 8004c1c:	03d09000 	.word	0x03d09000
 8004c20:	46000000 	.word	0x46000000
 8004c24:	4c742400 	.word	0x4c742400
 8004c28:	4a742400 	.word	0x4a742400
 8004c2c:	4bbebc20 	.word	0x4bbebc20

08004c30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c3e:	4b53      	ldr	r3, [pc, #332]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d101      	bne.n	8004c4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e099      	b.n	8004d82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a4e      	ldr	r2, [pc, #312]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5a:	f7fc fe37 	bl	80018cc <HAL_GetTick>
 8004c5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c60:	e008      	b.n	8004c74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c62:	f7fc fe33 	bl	80018cc <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e086      	b.n	8004d82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c74:	4b45      	ldr	r3, [pc, #276]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f0      	bne.n	8004c62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c80:	4b42      	ldr	r3, [pc, #264]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	031b      	lsls	r3, r3, #12
 8004c8e:	493f      	ldr	r1, [pc, #252]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	025b      	lsls	r3, r3, #9
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	041b      	lsls	r3, r3, #16
 8004cb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cc4:	4931      	ldr	r1, [pc, #196]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cca:	4b30      	ldr	r3, [pc, #192]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	492d      	ldr	r1, [pc, #180]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	f023 0220 	bic.w	r2, r3, #32
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	4928      	ldr	r1, [pc, #160]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cee:	4b27      	ldr	r3, [pc, #156]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	4a26      	ldr	r2, [pc, #152]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cf4:	f023 0310 	bic.w	r3, r3, #16
 8004cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cfa:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cfe:	4b24      	ldr	r3, [pc, #144]	@ (8004d90 <RCCEx_PLL2_Config+0x160>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	69d2      	ldr	r2, [r2, #28]
 8004d06:	00d2      	lsls	r2, r2, #3
 8004d08:	4920      	ldr	r1, [pc, #128]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	4a1e      	ldr	r2, [pc, #120]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d14:	f043 0310 	orr.w	r3, r3, #16
 8004d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d20:	4b1a      	ldr	r3, [pc, #104]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	4a19      	ldr	r2, [pc, #100]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d2c:	e00f      	b.n	8004d4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d106      	bne.n	8004d42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d34:	4b15      	ldr	r3, [pc, #84]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	4a14      	ldr	r2, [pc, #80]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d40:	e005      	b.n	8004d4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d42:	4b12      	ldr	r3, [pc, #72]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d46:	4a11      	ldr	r2, [pc, #68]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a0e      	ldr	r2, [pc, #56]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5a:	f7fc fdb7 	bl	80018cc <HAL_GetTick>
 8004d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d60:	e008      	b.n	8004d74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d62:	f7fc fdb3 	bl	80018cc <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e006      	b.n	8004d82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d74:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	ffff0007 	.word	0xffff0007

08004d94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004da2:	4b53      	ldr	r3, [pc, #332]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d101      	bne.n	8004db2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e099      	b.n	8004ee6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004db2:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a4e      	ldr	r2, [pc, #312]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dbe:	f7fc fd85 	bl	80018cc <HAL_GetTick>
 8004dc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dc6:	f7fc fd81 	bl	80018cc <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e086      	b.n	8004ee6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dd8:	4b45      	ldr	r3, [pc, #276]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004de4:	4b42      	ldr	r3, [pc, #264]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	051b      	lsls	r3, r3, #20
 8004df2:	493f      	ldr	r1, [pc, #252]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	025b      	lsls	r3, r3, #9
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	061b      	lsls	r3, r3, #24
 8004e24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e28:	4931      	ldr	r1, [pc, #196]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e2e:	4b30      	ldr	r3, [pc, #192]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	492d      	ldr	r1, [pc, #180]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e40:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	4928      	ldr	r1, [pc, #160]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e52:	4b27      	ldr	r3, [pc, #156]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	4a26      	ldr	r2, [pc, #152]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e62:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <RCCEx_PLL3_Config+0x160>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	69d2      	ldr	r2, [r2, #28]
 8004e6a:	00d2      	lsls	r2, r2, #3
 8004e6c:	4920      	ldr	r1, [pc, #128]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e72:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e84:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	4a19      	ldr	r2, [pc, #100]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e90:	e00f      	b.n	8004eb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d106      	bne.n	8004ea6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e98:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ea4:	e005      	b.n	8004eb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ea6:	4b12      	ldr	r3, [pc, #72]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	4a11      	ldr	r2, [pc, #68]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebe:	f7fc fd05 	bl	80018cc <HAL_GetTick>
 8004ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ec4:	e008      	b.n	8004ed8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ec6:	f7fc fd01 	bl	80018cc <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e006      	b.n	8004ee6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ed8:	4b05      	ldr	r3, [pc, #20]	@ (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	ffff0007 	.word	0xffff0007

08004ef8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e10f      	b.n	800512a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a87      	ldr	r2, [pc, #540]	@ (8005134 <HAL_SPI_Init+0x23c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00f      	beq.n	8004f3a <HAL_SPI_Init+0x42>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a86      	ldr	r2, [pc, #536]	@ (8005138 <HAL_SPI_Init+0x240>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00a      	beq.n	8004f3a <HAL_SPI_Init+0x42>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a84      	ldr	r2, [pc, #528]	@ (800513c <HAL_SPI_Init+0x244>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d005      	beq.n	8004f3a <HAL_SPI_Init+0x42>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	d901      	bls.n	8004f3a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0f7      	b.n	800512a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f900 	bl	8005140 <SPI_GetPacketSize>
 8004f40:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a7b      	ldr	r2, [pc, #492]	@ (8005134 <HAL_SPI_Init+0x23c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00c      	beq.n	8004f66 <HAL_SPI_Init+0x6e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a79      	ldr	r2, [pc, #484]	@ (8005138 <HAL_SPI_Init+0x240>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <HAL_SPI_Init+0x6e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a78      	ldr	r2, [pc, #480]	@ (800513c <HAL_SPI_Init+0x244>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d002      	beq.n	8004f66 <HAL_SPI_Init+0x6e>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d811      	bhi.n	8004f8a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f6a:	4a72      	ldr	r2, [pc, #456]	@ (8005134 <HAL_SPI_Init+0x23c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a70      	ldr	r2, [pc, #448]	@ (8005138 <HAL_SPI_Init+0x240>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_SPI_Init+0x8c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800513c <HAL_SPI_Init+0x244>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d104      	bne.n	8004f8e <HAL_SPI_Init+0x96>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d901      	bls.n	8004f8e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e0cd      	b.n	800512a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc f9cc 	bl	8001340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004fca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fd4:	d119      	bne.n	800500a <HAL_SPI_Init+0x112>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fde:	d103      	bne.n	8004fe8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10c      	bne.n	800500a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004ff4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ff8:	d107      	bne.n	800500a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005008:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00f      	beq.n	8005036 <HAL_SPI_Init+0x13e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2b06      	cmp	r3, #6
 800501c:	d90b      	bls.n	8005036 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e007      	b.n	8005046 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	431a      	orrs	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005058:	ea42 0103 	orr.w	r1, r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a6:	ea42 0103 	orr.w	r1, r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d113      	bne.n	80050e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40013000 	.word	0x40013000
 8005138:	40003800 	.word	0x40003800
 800513c:	40003c00 	.word	0x40003c00

08005140 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	3307      	adds	r3, #7
 800515e:	08db      	lsrs	r3, r3, #3
 8005160:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	fb02 f303 	mul.w	r3, r2, r3
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e042      	b.n	800520e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fc f93a 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	@ 0x24
 80051a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 ff23 	bl	800600c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8b4 	bl	8005334 <UART_SetConfig>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e01b      	b.n	800520e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 ffa2 	bl	8006150 <UART_CheckIdleState>
 800520c:	4603      	mov	r3, r0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b08a      	sub	sp, #40	@ 0x28
 800521a:	af02      	add	r7, sp, #8
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522c:	2b20      	cmp	r3, #32
 800522e:	d17b      	bne.n	8005328 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <HAL_UART_Transmit+0x26>
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e074      	b.n	800532a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2221      	movs	r2, #33	@ 0x21
 800524c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005250:	f7fc fb3c 	bl	80018cc <HAL_GetTick>
 8005254:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	88fa      	ldrh	r2, [r7, #6]
 8005262:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800526e:	d108      	bne.n	8005282 <HAL_UART_Transmit+0x6c>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005278:	2300      	movs	r3, #0
 800527a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	e003      	b.n	800528a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800528a:	e030      	b.n	80052ee <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2200      	movs	r2, #0
 8005294:	2180      	movs	r1, #128	@ 0x80
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f001 f804 	bl	80062a4 <UART_WaitOnFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e03d      	b.n	800532a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	3302      	adds	r3, #2
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e007      	b.n	80052dc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	781a      	ldrb	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	3301      	adds	r3, #1
 80052da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1c8      	bne.n	800528c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	2140      	movs	r1, #64	@ 0x40
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 ffcd 	bl	80062a4 <UART_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e006      	b.n	800532a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005338:	b092      	sub	sp, #72	@ 0x48
 800533a:	af00      	add	r7, sp, #0
 800533c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	431a      	orrs	r2, r3
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	431a      	orrs	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	4313      	orrs	r3, r2
 800535a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4bbe      	ldr	r3, [pc, #760]	@ (800565c <UART_SetConfig+0x328>)
 8005364:	4013      	ands	r3, r2
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800536c:	430b      	orrs	r3, r1
 800536e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4ab3      	ldr	r2, [pc, #716]	@ (8005660 <UART_SetConfig+0x32c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539c:	4313      	orrs	r3, r2
 800539e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	4baf      	ldr	r3, [pc, #700]	@ (8005664 <UART_SetConfig+0x330>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ba:	f023 010f 	bic.w	r1, r3, #15
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4aa6      	ldr	r2, [pc, #664]	@ (8005668 <UART_SetConfig+0x334>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d177      	bne.n	80054c4 <UART_SetConfig+0x190>
 80053d4:	4ba5      	ldr	r3, [pc, #660]	@ (800566c <UART_SetConfig+0x338>)
 80053d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053dc:	2b28      	cmp	r3, #40	@ 0x28
 80053de:	d86d      	bhi.n	80054bc <UART_SetConfig+0x188>
 80053e0:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <UART_SetConfig+0xb4>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	0800548d 	.word	0x0800548d
 80053ec:	080054bd 	.word	0x080054bd
 80053f0:	080054bd 	.word	0x080054bd
 80053f4:	080054bd 	.word	0x080054bd
 80053f8:	080054bd 	.word	0x080054bd
 80053fc:	080054bd 	.word	0x080054bd
 8005400:	080054bd 	.word	0x080054bd
 8005404:	080054bd 	.word	0x080054bd
 8005408:	08005495 	.word	0x08005495
 800540c:	080054bd 	.word	0x080054bd
 8005410:	080054bd 	.word	0x080054bd
 8005414:	080054bd 	.word	0x080054bd
 8005418:	080054bd 	.word	0x080054bd
 800541c:	080054bd 	.word	0x080054bd
 8005420:	080054bd 	.word	0x080054bd
 8005424:	080054bd 	.word	0x080054bd
 8005428:	0800549d 	.word	0x0800549d
 800542c:	080054bd 	.word	0x080054bd
 8005430:	080054bd 	.word	0x080054bd
 8005434:	080054bd 	.word	0x080054bd
 8005438:	080054bd 	.word	0x080054bd
 800543c:	080054bd 	.word	0x080054bd
 8005440:	080054bd 	.word	0x080054bd
 8005444:	080054bd 	.word	0x080054bd
 8005448:	080054a5 	.word	0x080054a5
 800544c:	080054bd 	.word	0x080054bd
 8005450:	080054bd 	.word	0x080054bd
 8005454:	080054bd 	.word	0x080054bd
 8005458:	080054bd 	.word	0x080054bd
 800545c:	080054bd 	.word	0x080054bd
 8005460:	080054bd 	.word	0x080054bd
 8005464:	080054bd 	.word	0x080054bd
 8005468:	080054ad 	.word	0x080054ad
 800546c:	080054bd 	.word	0x080054bd
 8005470:	080054bd 	.word	0x080054bd
 8005474:	080054bd 	.word	0x080054bd
 8005478:	080054bd 	.word	0x080054bd
 800547c:	080054bd 	.word	0x080054bd
 8005480:	080054bd 	.word	0x080054bd
 8005484:	080054bd 	.word	0x080054bd
 8005488:	080054b5 	.word	0x080054b5
 800548c:	2301      	movs	r3, #1
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005492:	e326      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005494:	2304      	movs	r3, #4
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549a:	e322      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 800549c:	2308      	movs	r3, #8
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e31e      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e31a      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80054ac:	2320      	movs	r3, #32
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e316      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80054b4:	2340      	movs	r3, #64	@ 0x40
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e312      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80054bc:	2380      	movs	r3, #128	@ 0x80
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e30e      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a69      	ldr	r2, [pc, #420]	@ (8005670 <UART_SetConfig+0x33c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d130      	bne.n	8005530 <UART_SetConfig+0x1fc>
 80054ce:	4b67      	ldr	r3, [pc, #412]	@ (800566c <UART_SetConfig+0x338>)
 80054d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d826      	bhi.n	8005528 <UART_SetConfig+0x1f4>
 80054da:	a201      	add	r2, pc, #4	@ (adr r2, 80054e0 <UART_SetConfig+0x1ac>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	080054f9 	.word	0x080054f9
 80054e4:	08005501 	.word	0x08005501
 80054e8:	08005509 	.word	0x08005509
 80054ec:	08005511 	.word	0x08005511
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005521 	.word	0x08005521
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fe:	e2f0      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005500:	2304      	movs	r3, #4
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005506:	e2ec      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005508:	2308      	movs	r3, #8
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550e:	e2e8      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005510:	2310      	movs	r3, #16
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005516:	e2e4      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005518:	2320      	movs	r3, #32
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e2e0      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005520:	2340      	movs	r3, #64	@ 0x40
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e2dc      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005528:	2380      	movs	r3, #128	@ 0x80
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e2d8      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a4f      	ldr	r2, [pc, #316]	@ (8005674 <UART_SetConfig+0x340>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d130      	bne.n	800559c <UART_SetConfig+0x268>
 800553a:	4b4c      	ldr	r3, [pc, #304]	@ (800566c <UART_SetConfig+0x338>)
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	2b05      	cmp	r3, #5
 8005544:	d826      	bhi.n	8005594 <UART_SetConfig+0x260>
 8005546:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <UART_SetConfig+0x218>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005565 	.word	0x08005565
 8005550:	0800556d 	.word	0x0800556d
 8005554:	08005575 	.word	0x08005575
 8005558:	0800557d 	.word	0x0800557d
 800555c:	08005585 	.word	0x08005585
 8005560:	0800558d 	.word	0x0800558d
 8005564:	2300      	movs	r3, #0
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556a:	e2ba      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 800556c:	2304      	movs	r3, #4
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005572:	e2b6      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005574:	2308      	movs	r3, #8
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557a:	e2b2      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 800557c:	2310      	movs	r3, #16
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005582:	e2ae      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005584:	2320      	movs	r3, #32
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558a:	e2aa      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 800558c:	2340      	movs	r3, #64	@ 0x40
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e2a6      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005594:	2380      	movs	r3, #128	@ 0x80
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559a:	e2a2      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a35      	ldr	r2, [pc, #212]	@ (8005678 <UART_SetConfig+0x344>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d130      	bne.n	8005608 <UART_SetConfig+0x2d4>
 80055a6:	4b31      	ldr	r3, [pc, #196]	@ (800566c <UART_SetConfig+0x338>)
 80055a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	2b05      	cmp	r3, #5
 80055b0:	d826      	bhi.n	8005600 <UART_SetConfig+0x2cc>
 80055b2:	a201      	add	r2, pc, #4	@ (adr r2, 80055b8 <UART_SetConfig+0x284>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055d1 	.word	0x080055d1
 80055bc:	080055d9 	.word	0x080055d9
 80055c0:	080055e1 	.word	0x080055e1
 80055c4:	080055e9 	.word	0x080055e9
 80055c8:	080055f1 	.word	0x080055f1
 80055cc:	080055f9 	.word	0x080055f9
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d6:	e284      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80055d8:	2304      	movs	r3, #4
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055de:	e280      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80055e0:	2308      	movs	r3, #8
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e6:	e27c      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80055e8:	2310      	movs	r3, #16
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ee:	e278      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80055f0:	2320      	movs	r3, #32
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e274      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80055f8:	2340      	movs	r3, #64	@ 0x40
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e270      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005600:	2380      	movs	r3, #128	@ 0x80
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005606:	e26c      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1b      	ldr	r2, [pc, #108]	@ (800567c <UART_SetConfig+0x348>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d142      	bne.n	8005698 <UART_SetConfig+0x364>
 8005612:	4b16      	ldr	r3, [pc, #88]	@ (800566c <UART_SetConfig+0x338>)
 8005614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	2b05      	cmp	r3, #5
 800561c:	d838      	bhi.n	8005690 <UART_SetConfig+0x35c>
 800561e:	a201      	add	r2, pc, #4	@ (adr r2, 8005624 <UART_SetConfig+0x2f0>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	0800563d 	.word	0x0800563d
 8005628:	08005645 	.word	0x08005645
 800562c:	0800564d 	.word	0x0800564d
 8005630:	08005655 	.word	0x08005655
 8005634:	08005681 	.word	0x08005681
 8005638:	08005689 	.word	0x08005689
 800563c:	2300      	movs	r3, #0
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005642:	e24e      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005644:	2304      	movs	r3, #4
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e24a      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 800564c:	2308      	movs	r3, #8
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e246      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e242      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 800565c:	cfff69f3 	.word	0xcfff69f3
 8005660:	58000c00 	.word	0x58000c00
 8005664:	11fff4ff 	.word	0x11fff4ff
 8005668:	40011000 	.word	0x40011000
 800566c:	58024400 	.word	0x58024400
 8005670:	40004400 	.word	0x40004400
 8005674:	40004800 	.word	0x40004800
 8005678:	40004c00 	.word	0x40004c00
 800567c:	40005000 	.word	0x40005000
 8005680:	2320      	movs	r3, #32
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005686:	e22c      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005688:	2340      	movs	r3, #64	@ 0x40
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568e:	e228      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005690:	2380      	movs	r3, #128	@ 0x80
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005696:	e224      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4ab1      	ldr	r2, [pc, #708]	@ (8005964 <UART_SetConfig+0x630>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d176      	bne.n	8005790 <UART_SetConfig+0x45c>
 80056a2:	4bb1      	ldr	r3, [pc, #708]	@ (8005968 <UART_SetConfig+0x634>)
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056aa:	2b28      	cmp	r3, #40	@ 0x28
 80056ac:	d86c      	bhi.n	8005788 <UART_SetConfig+0x454>
 80056ae:	a201      	add	r2, pc, #4	@ (adr r2, 80056b4 <UART_SetConfig+0x380>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	08005759 	.word	0x08005759
 80056b8:	08005789 	.word	0x08005789
 80056bc:	08005789 	.word	0x08005789
 80056c0:	08005789 	.word	0x08005789
 80056c4:	08005789 	.word	0x08005789
 80056c8:	08005789 	.word	0x08005789
 80056cc:	08005789 	.word	0x08005789
 80056d0:	08005789 	.word	0x08005789
 80056d4:	08005761 	.word	0x08005761
 80056d8:	08005789 	.word	0x08005789
 80056dc:	08005789 	.word	0x08005789
 80056e0:	08005789 	.word	0x08005789
 80056e4:	08005789 	.word	0x08005789
 80056e8:	08005789 	.word	0x08005789
 80056ec:	08005789 	.word	0x08005789
 80056f0:	08005789 	.word	0x08005789
 80056f4:	08005769 	.word	0x08005769
 80056f8:	08005789 	.word	0x08005789
 80056fc:	08005789 	.word	0x08005789
 8005700:	08005789 	.word	0x08005789
 8005704:	08005789 	.word	0x08005789
 8005708:	08005789 	.word	0x08005789
 800570c:	08005789 	.word	0x08005789
 8005710:	08005789 	.word	0x08005789
 8005714:	08005771 	.word	0x08005771
 8005718:	08005789 	.word	0x08005789
 800571c:	08005789 	.word	0x08005789
 8005720:	08005789 	.word	0x08005789
 8005724:	08005789 	.word	0x08005789
 8005728:	08005789 	.word	0x08005789
 800572c:	08005789 	.word	0x08005789
 8005730:	08005789 	.word	0x08005789
 8005734:	08005779 	.word	0x08005779
 8005738:	08005789 	.word	0x08005789
 800573c:	08005789 	.word	0x08005789
 8005740:	08005789 	.word	0x08005789
 8005744:	08005789 	.word	0x08005789
 8005748:	08005789 	.word	0x08005789
 800574c:	08005789 	.word	0x08005789
 8005750:	08005789 	.word	0x08005789
 8005754:	08005781 	.word	0x08005781
 8005758:	2301      	movs	r3, #1
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575e:	e1c0      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005760:	2304      	movs	r3, #4
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005766:	e1bc      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005768:	2308      	movs	r3, #8
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576e:	e1b8      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005770:	2310      	movs	r3, #16
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005776:	e1b4      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005778:	2320      	movs	r3, #32
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577e:	e1b0      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005780:	2340      	movs	r3, #64	@ 0x40
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e1ac      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005788:	2380      	movs	r3, #128	@ 0x80
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e1a8      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a75      	ldr	r2, [pc, #468]	@ (800596c <UART_SetConfig+0x638>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d130      	bne.n	80057fc <UART_SetConfig+0x4c8>
 800579a:	4b73      	ldr	r3, [pc, #460]	@ (8005968 <UART_SetConfig+0x634>)
 800579c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	2b05      	cmp	r3, #5
 80057a4:	d826      	bhi.n	80057f4 <UART_SetConfig+0x4c0>
 80057a6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <UART_SetConfig+0x478>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057c5 	.word	0x080057c5
 80057b0:	080057cd 	.word	0x080057cd
 80057b4:	080057d5 	.word	0x080057d5
 80057b8:	080057dd 	.word	0x080057dd
 80057bc:	080057e5 	.word	0x080057e5
 80057c0:	080057ed 	.word	0x080057ed
 80057c4:	2300      	movs	r3, #0
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ca:	e18a      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80057cc:	2304      	movs	r3, #4
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d2:	e186      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80057d4:	2308      	movs	r3, #8
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057da:	e182      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e2:	e17e      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80057e4:	2320      	movs	r3, #32
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ea:	e17a      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80057ec:	2340      	movs	r3, #64	@ 0x40
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f2:	e176      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fa:	e172      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a5b      	ldr	r2, [pc, #364]	@ (8005970 <UART_SetConfig+0x63c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d130      	bne.n	8005868 <UART_SetConfig+0x534>
 8005806:	4b58      	ldr	r3, [pc, #352]	@ (8005968 <UART_SetConfig+0x634>)
 8005808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	2b05      	cmp	r3, #5
 8005810:	d826      	bhi.n	8005860 <UART_SetConfig+0x52c>
 8005812:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <UART_SetConfig+0x4e4>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	08005831 	.word	0x08005831
 800581c:	08005839 	.word	0x08005839
 8005820:	08005841 	.word	0x08005841
 8005824:	08005849 	.word	0x08005849
 8005828:	08005851 	.word	0x08005851
 800582c:	08005859 	.word	0x08005859
 8005830:	2300      	movs	r3, #0
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005836:	e154      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005838:	2304      	movs	r3, #4
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583e:	e150      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005840:	2308      	movs	r3, #8
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005846:	e14c      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005848:	2310      	movs	r3, #16
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800584e:	e148      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005850:	2320      	movs	r3, #32
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005856:	e144      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005858:	2340      	movs	r3, #64	@ 0x40
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585e:	e140      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005860:	2380      	movs	r3, #128	@ 0x80
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e13c      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a41      	ldr	r2, [pc, #260]	@ (8005974 <UART_SetConfig+0x640>)
 800586e:	4293      	cmp	r3, r2
 8005870:	f040 8082 	bne.w	8005978 <UART_SetConfig+0x644>
 8005874:	4b3c      	ldr	r3, [pc, #240]	@ (8005968 <UART_SetConfig+0x634>)
 8005876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800587c:	2b28      	cmp	r3, #40	@ 0x28
 800587e:	d86d      	bhi.n	800595c <UART_SetConfig+0x628>
 8005880:	a201      	add	r2, pc, #4	@ (adr r2, 8005888 <UART_SetConfig+0x554>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	0800592d 	.word	0x0800592d
 800588c:	0800595d 	.word	0x0800595d
 8005890:	0800595d 	.word	0x0800595d
 8005894:	0800595d 	.word	0x0800595d
 8005898:	0800595d 	.word	0x0800595d
 800589c:	0800595d 	.word	0x0800595d
 80058a0:	0800595d 	.word	0x0800595d
 80058a4:	0800595d 	.word	0x0800595d
 80058a8:	08005935 	.word	0x08005935
 80058ac:	0800595d 	.word	0x0800595d
 80058b0:	0800595d 	.word	0x0800595d
 80058b4:	0800595d 	.word	0x0800595d
 80058b8:	0800595d 	.word	0x0800595d
 80058bc:	0800595d 	.word	0x0800595d
 80058c0:	0800595d 	.word	0x0800595d
 80058c4:	0800595d 	.word	0x0800595d
 80058c8:	0800593d 	.word	0x0800593d
 80058cc:	0800595d 	.word	0x0800595d
 80058d0:	0800595d 	.word	0x0800595d
 80058d4:	0800595d 	.word	0x0800595d
 80058d8:	0800595d 	.word	0x0800595d
 80058dc:	0800595d 	.word	0x0800595d
 80058e0:	0800595d 	.word	0x0800595d
 80058e4:	0800595d 	.word	0x0800595d
 80058e8:	08005945 	.word	0x08005945
 80058ec:	0800595d 	.word	0x0800595d
 80058f0:	0800595d 	.word	0x0800595d
 80058f4:	0800595d 	.word	0x0800595d
 80058f8:	0800595d 	.word	0x0800595d
 80058fc:	0800595d 	.word	0x0800595d
 8005900:	0800595d 	.word	0x0800595d
 8005904:	0800595d 	.word	0x0800595d
 8005908:	0800594d 	.word	0x0800594d
 800590c:	0800595d 	.word	0x0800595d
 8005910:	0800595d 	.word	0x0800595d
 8005914:	0800595d 	.word	0x0800595d
 8005918:	0800595d 	.word	0x0800595d
 800591c:	0800595d 	.word	0x0800595d
 8005920:	0800595d 	.word	0x0800595d
 8005924:	0800595d 	.word	0x0800595d
 8005928:	08005955 	.word	0x08005955
 800592c:	2301      	movs	r3, #1
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005932:	e0d6      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005934:	2304      	movs	r3, #4
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593a:	e0d2      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 800593c:	2308      	movs	r3, #8
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005942:	e0ce      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005944:	2310      	movs	r3, #16
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594a:	e0ca      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 800594c:	2320      	movs	r3, #32
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005952:	e0c6      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005954:	2340      	movs	r3, #64	@ 0x40
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595a:	e0c2      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 800595c:	2380      	movs	r3, #128	@ 0x80
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005962:	e0be      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005964:	40011400 	.word	0x40011400
 8005968:	58024400 	.word	0x58024400
 800596c:	40007800 	.word	0x40007800
 8005970:	40007c00 	.word	0x40007c00
 8005974:	40011800 	.word	0x40011800
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4aad      	ldr	r2, [pc, #692]	@ (8005c34 <UART_SetConfig+0x900>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d176      	bne.n	8005a70 <UART_SetConfig+0x73c>
 8005982:	4bad      	ldr	r3, [pc, #692]	@ (8005c38 <UART_SetConfig+0x904>)
 8005984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005986:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800598a:	2b28      	cmp	r3, #40	@ 0x28
 800598c:	d86c      	bhi.n	8005a68 <UART_SetConfig+0x734>
 800598e:	a201      	add	r2, pc, #4	@ (adr r2, 8005994 <UART_SetConfig+0x660>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	08005a39 	.word	0x08005a39
 8005998:	08005a69 	.word	0x08005a69
 800599c:	08005a69 	.word	0x08005a69
 80059a0:	08005a69 	.word	0x08005a69
 80059a4:	08005a69 	.word	0x08005a69
 80059a8:	08005a69 	.word	0x08005a69
 80059ac:	08005a69 	.word	0x08005a69
 80059b0:	08005a69 	.word	0x08005a69
 80059b4:	08005a41 	.word	0x08005a41
 80059b8:	08005a69 	.word	0x08005a69
 80059bc:	08005a69 	.word	0x08005a69
 80059c0:	08005a69 	.word	0x08005a69
 80059c4:	08005a69 	.word	0x08005a69
 80059c8:	08005a69 	.word	0x08005a69
 80059cc:	08005a69 	.word	0x08005a69
 80059d0:	08005a69 	.word	0x08005a69
 80059d4:	08005a49 	.word	0x08005a49
 80059d8:	08005a69 	.word	0x08005a69
 80059dc:	08005a69 	.word	0x08005a69
 80059e0:	08005a69 	.word	0x08005a69
 80059e4:	08005a69 	.word	0x08005a69
 80059e8:	08005a69 	.word	0x08005a69
 80059ec:	08005a69 	.word	0x08005a69
 80059f0:	08005a69 	.word	0x08005a69
 80059f4:	08005a51 	.word	0x08005a51
 80059f8:	08005a69 	.word	0x08005a69
 80059fc:	08005a69 	.word	0x08005a69
 8005a00:	08005a69 	.word	0x08005a69
 8005a04:	08005a69 	.word	0x08005a69
 8005a08:	08005a69 	.word	0x08005a69
 8005a0c:	08005a69 	.word	0x08005a69
 8005a10:	08005a69 	.word	0x08005a69
 8005a14:	08005a59 	.word	0x08005a59
 8005a18:	08005a69 	.word	0x08005a69
 8005a1c:	08005a69 	.word	0x08005a69
 8005a20:	08005a69 	.word	0x08005a69
 8005a24:	08005a69 	.word	0x08005a69
 8005a28:	08005a69 	.word	0x08005a69
 8005a2c:	08005a69 	.word	0x08005a69
 8005a30:	08005a69 	.word	0x08005a69
 8005a34:	08005a61 	.word	0x08005a61
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3e:	e050      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005a40:	2304      	movs	r3, #4
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a46:	e04c      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005a48:	2308      	movs	r3, #8
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4e:	e048      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005a50:	2310      	movs	r3, #16
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a56:	e044      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005a58:	2320      	movs	r3, #32
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5e:	e040      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005a60:	2340      	movs	r3, #64	@ 0x40
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e03c      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005a68:	2380      	movs	r3, #128	@ 0x80
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e038      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a71      	ldr	r2, [pc, #452]	@ (8005c3c <UART_SetConfig+0x908>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d130      	bne.n	8005adc <UART_SetConfig+0x7a8>
 8005a7a:	4b6f      	ldr	r3, [pc, #444]	@ (8005c38 <UART_SetConfig+0x904>)
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	d826      	bhi.n	8005ad4 <UART_SetConfig+0x7a0>
 8005a86:	a201      	add	r2, pc, #4	@ (adr r2, 8005a8c <UART_SetConfig+0x758>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005aa5 	.word	0x08005aa5
 8005a90:	08005aad 	.word	0x08005aad
 8005a94:	08005ab5 	.word	0x08005ab5
 8005a98:	08005abd 	.word	0x08005abd
 8005a9c:	08005ac5 	.word	0x08005ac5
 8005aa0:	08005acd 	.word	0x08005acd
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e01a      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005aac:	2304      	movs	r3, #4
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e016      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005ab4:	2308      	movs	r3, #8
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aba:	e012      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005abc:	2310      	movs	r3, #16
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e00e      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005ac4:	2320      	movs	r3, #32
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aca:	e00a      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005acc:	2340      	movs	r3, #64	@ 0x40
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e006      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005ad4:	2380      	movs	r3, #128	@ 0x80
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e002      	b.n	8005ae2 <UART_SetConfig+0x7ae>
 8005adc:	2380      	movs	r3, #128	@ 0x80
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a55      	ldr	r2, [pc, #340]	@ (8005c3c <UART_SetConfig+0x908>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	f040 80f8 	bne.w	8005cde <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005aee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	dc46      	bgt.n	8005b84 <UART_SetConfig+0x850>
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	db75      	blt.n	8005be6 <UART_SetConfig+0x8b2>
 8005afa:	3b02      	subs	r3, #2
 8005afc:	2b1e      	cmp	r3, #30
 8005afe:	d872      	bhi.n	8005be6 <UART_SetConfig+0x8b2>
 8005b00:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <UART_SetConfig+0x7d4>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b8b 	.word	0x08005b8b
 8005b0c:	08005be7 	.word	0x08005be7
 8005b10:	08005b93 	.word	0x08005b93
 8005b14:	08005be7 	.word	0x08005be7
 8005b18:	08005be7 	.word	0x08005be7
 8005b1c:	08005be7 	.word	0x08005be7
 8005b20:	08005ba3 	.word	0x08005ba3
 8005b24:	08005be7 	.word	0x08005be7
 8005b28:	08005be7 	.word	0x08005be7
 8005b2c:	08005be7 	.word	0x08005be7
 8005b30:	08005be7 	.word	0x08005be7
 8005b34:	08005be7 	.word	0x08005be7
 8005b38:	08005be7 	.word	0x08005be7
 8005b3c:	08005be7 	.word	0x08005be7
 8005b40:	08005bb3 	.word	0x08005bb3
 8005b44:	08005be7 	.word	0x08005be7
 8005b48:	08005be7 	.word	0x08005be7
 8005b4c:	08005be7 	.word	0x08005be7
 8005b50:	08005be7 	.word	0x08005be7
 8005b54:	08005be7 	.word	0x08005be7
 8005b58:	08005be7 	.word	0x08005be7
 8005b5c:	08005be7 	.word	0x08005be7
 8005b60:	08005be7 	.word	0x08005be7
 8005b64:	08005be7 	.word	0x08005be7
 8005b68:	08005be7 	.word	0x08005be7
 8005b6c:	08005be7 	.word	0x08005be7
 8005b70:	08005be7 	.word	0x08005be7
 8005b74:	08005be7 	.word	0x08005be7
 8005b78:	08005be7 	.word	0x08005be7
 8005b7c:	08005be7 	.word	0x08005be7
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	2b40      	cmp	r3, #64	@ 0x40
 8005b86:	d02a      	beq.n	8005bde <UART_SetConfig+0x8aa>
 8005b88:	e02d      	b.n	8005be6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005b8a:	f7fe fd93 	bl	80046b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b90:	e02f      	b.n	8005bf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fda2 	bl	80046e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba0:	e027      	b.n	8005bf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ba2:	f107 0318 	add.w	r3, r7, #24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe feee 	bl	8004988 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb0:	e01f      	b.n	8005bf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb2:	4b21      	ldr	r3, [pc, #132]	@ (8005c38 <UART_SetConfig+0x904>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005c38 <UART_SetConfig+0x904>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	08db      	lsrs	r3, r3, #3
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c40 <UART_SetConfig+0x90c>)
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bd0:	e00f      	b.n	8005bf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c40 <UART_SetConfig+0x90c>)
 8005bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd6:	e00c      	b.n	8005bf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c44 <UART_SetConfig+0x910>)
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bdc:	e009      	b.n	8005bf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be4:	e005      	b.n	8005bf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005bf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 81ee 	beq.w	8005fd6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfe:	4a12      	ldr	r2, [pc, #72]	@ (8005c48 <UART_SetConfig+0x914>)
 8005c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c04:	461a      	mov	r2, r3
 8005c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c0c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	4413      	add	r3, r2
 8005c18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d305      	bcc.n	8005c2a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d910      	bls.n	8005c4c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c30:	e1d1      	b.n	8005fd6 <UART_SetConfig+0xca2>
 8005c32:	bf00      	nop
 8005c34:	40011c00 	.word	0x40011c00
 8005c38:	58024400 	.word	0x58024400
 8005c3c:	58000c00 	.word	0x58000c00
 8005c40:	03d09000 	.word	0x03d09000
 8005c44:	003d0900 	.word	0x003d0900
 8005c48:	0800a10c 	.word	0x0800a10c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c4e:	2200      	movs	r2, #0
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	60fa      	str	r2, [r7, #12]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c58:	4ac0      	ldr	r2, [pc, #768]	@ (8005f5c <UART_SetConfig+0xc28>)
 8005c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2200      	movs	r2, #0
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	607a      	str	r2, [r7, #4]
 8005c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c6e:	f7fa fb4d 	bl	800030c <__aeabi_uldivmod>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4610      	mov	r0, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	020b      	lsls	r3, r1, #8
 8005c84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c88:	0202      	lsls	r2, r0, #8
 8005c8a:	6979      	ldr	r1, [r7, #20]
 8005c8c:	6849      	ldr	r1, [r1, #4]
 8005c8e:	0849      	lsrs	r1, r1, #1
 8005c90:	2000      	movs	r0, #0
 8005c92:	460c      	mov	r4, r1
 8005c94:	4605      	mov	r5, r0
 8005c96:	eb12 0804 	adds.w	r8, r2, r4
 8005c9a:	eb43 0905 	adc.w	r9, r3, r5
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	469a      	mov	sl, r3
 8005ca6:	4693      	mov	fp, r2
 8005ca8:	4652      	mov	r2, sl
 8005caa:	465b      	mov	r3, fp
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	f7fa fb2c 	bl	800030c <__aeabi_uldivmod>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4613      	mov	r3, r2
 8005cba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cc2:	d308      	bcc.n	8005cd6 <UART_SetConfig+0x9a2>
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cca:	d204      	bcs.n	8005cd6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cd2:	60da      	str	r2, [r3, #12]
 8005cd4:	e17f      	b.n	8005fd6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005cdc:	e17b      	b.n	8005fd6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ce6:	f040 80bd 	bne.w	8005e64 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005cea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	dc48      	bgt.n	8005d84 <UART_SetConfig+0xa50>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	db7b      	blt.n	8005dee <UART_SetConfig+0xaba>
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d879      	bhi.n	8005dee <UART_SetConfig+0xaba>
 8005cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <UART_SetConfig+0x9cc>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d8b 	.word	0x08005d8b
 8005d04:	08005d93 	.word	0x08005d93
 8005d08:	08005def 	.word	0x08005def
 8005d0c:	08005def 	.word	0x08005def
 8005d10:	08005d9b 	.word	0x08005d9b
 8005d14:	08005def 	.word	0x08005def
 8005d18:	08005def 	.word	0x08005def
 8005d1c:	08005def 	.word	0x08005def
 8005d20:	08005dab 	.word	0x08005dab
 8005d24:	08005def 	.word	0x08005def
 8005d28:	08005def 	.word	0x08005def
 8005d2c:	08005def 	.word	0x08005def
 8005d30:	08005def 	.word	0x08005def
 8005d34:	08005def 	.word	0x08005def
 8005d38:	08005def 	.word	0x08005def
 8005d3c:	08005def 	.word	0x08005def
 8005d40:	08005dbb 	.word	0x08005dbb
 8005d44:	08005def 	.word	0x08005def
 8005d48:	08005def 	.word	0x08005def
 8005d4c:	08005def 	.word	0x08005def
 8005d50:	08005def 	.word	0x08005def
 8005d54:	08005def 	.word	0x08005def
 8005d58:	08005def 	.word	0x08005def
 8005d5c:	08005def 	.word	0x08005def
 8005d60:	08005def 	.word	0x08005def
 8005d64:	08005def 	.word	0x08005def
 8005d68:	08005def 	.word	0x08005def
 8005d6c:	08005def 	.word	0x08005def
 8005d70:	08005def 	.word	0x08005def
 8005d74:	08005def 	.word	0x08005def
 8005d78:	08005def 	.word	0x08005def
 8005d7c:	08005def 	.word	0x08005def
 8005d80:	08005de1 	.word	0x08005de1
 8005d84:	2b40      	cmp	r3, #64	@ 0x40
 8005d86:	d02e      	beq.n	8005de6 <UART_SetConfig+0xab2>
 8005d88:	e031      	b.n	8005dee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d8a:	f7fd fac7 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 8005d8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d90:	e033      	b.n	8005dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d92:	f7fd fad9 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 8005d96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d98:	e02f      	b.n	8005dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fc9e 	bl	80046e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da8:	e027      	b.n	8005dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005daa:	f107 0318 	add.w	r3, r7, #24
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe fdea 	bl	8004988 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005db8:	e01f      	b.n	8005dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dba:	4b69      	ldr	r3, [pc, #420]	@ (8005f60 <UART_SetConfig+0xc2c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dc6:	4b66      	ldr	r3, [pc, #408]	@ (8005f60 <UART_SetConfig+0xc2c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	08db      	lsrs	r3, r3, #3
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	4a64      	ldr	r2, [pc, #400]	@ (8005f64 <UART_SetConfig+0xc30>)
 8005dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005dd8:	e00f      	b.n	8005dfa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005dda:	4b62      	ldr	r3, [pc, #392]	@ (8005f64 <UART_SetConfig+0xc30>)
 8005ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dde:	e00c      	b.n	8005dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005de0:	4b61      	ldr	r3, [pc, #388]	@ (8005f68 <UART_SetConfig+0xc34>)
 8005de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005de4:	e009      	b.n	8005dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dec:	e005      	b.n	8005dfa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005df8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80ea 	beq.w	8005fd6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	4a55      	ldr	r2, [pc, #340]	@ (8005f5c <UART_SetConfig+0xc28>)
 8005e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e14:	005a      	lsls	r2, r3, #1
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	441a      	add	r2, r3
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	2b0f      	cmp	r3, #15
 8005e2c:	d916      	bls.n	8005e5c <UART_SetConfig+0xb28>
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e34:	d212      	bcs.n	8005e5c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f023 030f 	bic.w	r3, r3, #15
 8005e3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005e58:	60da      	str	r2, [r3, #12]
 8005e5a:	e0bc      	b.n	8005fd6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005e62:	e0b8      	b.n	8005fd6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	dc4b      	bgt.n	8005f04 <UART_SetConfig+0xbd0>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f2c0 8087 	blt.w	8005f80 <UART_SetConfig+0xc4c>
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	f200 8084 	bhi.w	8005f80 <UART_SetConfig+0xc4c>
 8005e78:	a201      	add	r2, pc, #4	@ (adr r2, 8005e80 <UART_SetConfig+0xb4c>)
 8005e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7e:	bf00      	nop
 8005e80:	08005f0b 	.word	0x08005f0b
 8005e84:	08005f13 	.word	0x08005f13
 8005e88:	08005f81 	.word	0x08005f81
 8005e8c:	08005f81 	.word	0x08005f81
 8005e90:	08005f1b 	.word	0x08005f1b
 8005e94:	08005f81 	.word	0x08005f81
 8005e98:	08005f81 	.word	0x08005f81
 8005e9c:	08005f81 	.word	0x08005f81
 8005ea0:	08005f2b 	.word	0x08005f2b
 8005ea4:	08005f81 	.word	0x08005f81
 8005ea8:	08005f81 	.word	0x08005f81
 8005eac:	08005f81 	.word	0x08005f81
 8005eb0:	08005f81 	.word	0x08005f81
 8005eb4:	08005f81 	.word	0x08005f81
 8005eb8:	08005f81 	.word	0x08005f81
 8005ebc:	08005f81 	.word	0x08005f81
 8005ec0:	08005f3b 	.word	0x08005f3b
 8005ec4:	08005f81 	.word	0x08005f81
 8005ec8:	08005f81 	.word	0x08005f81
 8005ecc:	08005f81 	.word	0x08005f81
 8005ed0:	08005f81 	.word	0x08005f81
 8005ed4:	08005f81 	.word	0x08005f81
 8005ed8:	08005f81 	.word	0x08005f81
 8005edc:	08005f81 	.word	0x08005f81
 8005ee0:	08005f81 	.word	0x08005f81
 8005ee4:	08005f81 	.word	0x08005f81
 8005ee8:	08005f81 	.word	0x08005f81
 8005eec:	08005f81 	.word	0x08005f81
 8005ef0:	08005f81 	.word	0x08005f81
 8005ef4:	08005f81 	.word	0x08005f81
 8005ef8:	08005f81 	.word	0x08005f81
 8005efc:	08005f81 	.word	0x08005f81
 8005f00:	08005f73 	.word	0x08005f73
 8005f04:	2b40      	cmp	r3, #64	@ 0x40
 8005f06:	d037      	beq.n	8005f78 <UART_SetConfig+0xc44>
 8005f08:	e03a      	b.n	8005f80 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f0a:	f7fd fa07 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 8005f0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f10:	e03c      	b.n	8005f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f12:	f7fd fa19 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 8005f16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f18:	e038      	b.n	8005f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe fbde 	bl	80046e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f28:	e030      	b.n	8005f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f2a:	f107 0318 	add.w	r3, r7, #24
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fd2a 	bl	8004988 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f38:	e028      	b.n	8005f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f3a:	4b09      	ldr	r3, [pc, #36]	@ (8005f60 <UART_SetConfig+0xc2c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d012      	beq.n	8005f6c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f46:	4b06      	ldr	r3, [pc, #24]	@ (8005f60 <UART_SetConfig+0xc2c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	08db      	lsrs	r3, r3, #3
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	4a04      	ldr	r2, [pc, #16]	@ (8005f64 <UART_SetConfig+0xc30>)
 8005f52:	fa22 f303 	lsr.w	r3, r2, r3
 8005f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f58:	e018      	b.n	8005f8c <UART_SetConfig+0xc58>
 8005f5a:	bf00      	nop
 8005f5c:	0800a10c 	.word	0x0800a10c
 8005f60:	58024400 	.word	0x58024400
 8005f64:	03d09000 	.word	0x03d09000
 8005f68:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005f6c:	4b24      	ldr	r3, [pc, #144]	@ (8006000 <UART_SetConfig+0xccc>)
 8005f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f70:	e00c      	b.n	8005f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f72:	4b24      	ldr	r3, [pc, #144]	@ (8006004 <UART_SetConfig+0xcd0>)
 8005f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f76:	e009      	b.n	8005f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f7e:	e005      	b.n	8005f8c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005f8a:	bf00      	nop
    }

    if (pclk != 0U)
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d021      	beq.n	8005fd6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f96:	4a1c      	ldr	r2, [pc, #112]	@ (8006008 <UART_SetConfig+0xcd4>)
 8005f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa0:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	441a      	add	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb8:	2b0f      	cmp	r3, #15
 8005fba:	d909      	bls.n	8005fd0 <UART_SetConfig+0xc9c>
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc2:	d205      	bcs.n	8005fd0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	e002      	b.n	8005fd6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005ff2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3748      	adds	r7, #72	@ 0x48
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006000:	03d09000 	.word	0x03d09000
 8006004:	003d0900 	.word	0x003d0900
 8006008:	0800a10c 	.word	0x0800a10c

0800600c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01a      	beq.n	8006122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800610a:	d10a      	bne.n	8006122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
  }
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b098      	sub	sp, #96	@ 0x60
 8006154:	af02      	add	r7, sp, #8
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006160:	f7fb fbb4 	bl	80018cc <HAL_GetTick>
 8006164:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b08      	cmp	r3, #8
 8006172:	d12f      	bne.n	80061d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800617c:	2200      	movs	r2, #0
 800617e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f88e 	bl	80062a4 <UART_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d022      	beq.n	80061d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800619c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e6      	bne.n	800618e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e063      	b.n	800629c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d149      	bne.n	8006276 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ea:	2200      	movs	r2, #0
 80061ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f857 	bl	80062a4 <UART_WaitOnFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d03c      	beq.n	8006276 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	623b      	str	r3, [r7, #32]
   return(result);
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800621a:	633b      	str	r3, [r7, #48]	@ 0x30
 800621c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e6      	bne.n	80061fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	60fb      	str	r3, [r7, #12]
   return(result);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3308      	adds	r3, #8
 800624c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800624e:	61fa      	str	r2, [r7, #28]
 8006250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	69b9      	ldr	r1, [r7, #24]
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	617b      	str	r3, [r7, #20]
   return(result);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e5      	bne.n	800622e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e012      	b.n	800629c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3758      	adds	r7, #88	@ 0x58
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b4:	e04f      	b.n	8006356 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d04b      	beq.n	8006356 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fb fb05 	bl	80018cc <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e04e      	b.n	8006376 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d037      	beq.n	8006356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b80      	cmp	r3, #128	@ 0x80
 80062ea:	d034      	beq.n	8006356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b40      	cmp	r3, #64	@ 0x40
 80062f0:	d031      	beq.n	8006356 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d110      	bne.n	8006322 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2208      	movs	r2, #8
 8006306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f839 	bl	8006380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2208      	movs	r2, #8
 8006312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e029      	b.n	8006376 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800632c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006330:	d111      	bne.n	8006356 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800633a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f81f 	bl	8006380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e00f      	b.n	8006376 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4013      	ands	r3, r2
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	429a      	cmp	r2, r3
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	429a      	cmp	r2, r3
 8006372:	d0a0      	beq.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b095      	sub	sp, #84	@ 0x54
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800639c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80063a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e6      	bne.n	8006388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006448 <UART_EndRxTransfer+0xc8>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3308      	adds	r3, #8
 80063d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e5      	bne.n	80063ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d118      	bne.n	8006428 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	60bb      	str	r3, [r7, #8]
   return(result);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f023 0310 	bic.w	r3, r3, #16
 800640a:	647b      	str	r3, [r7, #68]	@ 0x44
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6979      	ldr	r1, [r7, #20]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	613b      	str	r3, [r7, #16]
   return(result);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e6      	bne.n	80063f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800643c:	bf00      	nop
 800643e:	3754      	adds	r7, #84	@ 0x54
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	effffffe 	.word	0xeffffffe

0800644c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_UARTEx_DisableFifoMode+0x16>
 800645e:	2302      	movs	r3, #2
 8006460:	e027      	b.n	80064b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2224      	movs	r2, #36	@ 0x24
 800646e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006490:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d101      	bne.n	80064d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064d2:	2302      	movs	r3, #2
 80064d4:	e02d      	b.n	8006532 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2224      	movs	r2, #36	@ 0x24
 80064e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f850 	bl	80065b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800654e:	2302      	movs	r3, #2
 8006550:	e02d      	b.n	80065ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2224      	movs	r2, #36	@ 0x24
 800655e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0201 	bic.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f812 	bl	80065b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d108      	bne.n	80065da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065d8:	e031      	b.n	800663e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065da:	2310      	movs	r3, #16
 80065dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065de:	2310      	movs	r3, #16
 80065e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	0e5b      	lsrs	r3, r3, #25
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	0f5b      	lsrs	r3, r3, #29
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	7b3a      	ldrb	r2, [r7, #12]
 8006606:	4911      	ldr	r1, [pc, #68]	@ (800664c <UARTEx_SetNbDataToProcess+0x94>)
 8006608:	5c8a      	ldrb	r2, [r1, r2]
 800660a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800660e:	7b3a      	ldrb	r2, [r7, #12]
 8006610:	490f      	ldr	r1, [pc, #60]	@ (8006650 <UARTEx_SetNbDataToProcess+0x98>)
 8006612:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006614:	fb93 f3f2 	sdiv	r3, r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	7b7a      	ldrb	r2, [r7, #13]
 8006624:	4909      	ldr	r1, [pc, #36]	@ (800664c <UARTEx_SetNbDataToProcess+0x94>)
 8006626:	5c8a      	ldrb	r2, [r1, r2]
 8006628:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800662c:	7b7a      	ldrb	r2, [r7, #13]
 800662e:	4908      	ldr	r1, [pc, #32]	@ (8006650 <UARTEx_SetNbDataToProcess+0x98>)
 8006630:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006632:	fb93 f3f2 	sdiv	r3, r3, r2
 8006636:	b29a      	uxth	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	0800a124 	.word	0x0800a124
 8006650:	0800a12c 	.word	0x0800a12c

08006654 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006658:	4904      	ldr	r1, [pc, #16]	@ (800666c <MX_FATFS_Init+0x18>)
 800665a:	4805      	ldr	r0, [pc, #20]	@ (8006670 <MX_FATFS_Init+0x1c>)
 800665c:	f003 fb12 	bl	8009c84 <FATFS_LinkDriver>
 8006660:	4603      	mov	r3, r0
 8006662:	461a      	mov	r2, r3
 8006664:	4b03      	ldr	r3, [pc, #12]	@ (8006674 <MX_FATFS_Init+0x20>)
 8006666:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006668:	bf00      	nop
 800666a:	bd80      	pop	{r7, pc}
 800666c:	240015ec 	.word	0x240015ec
 8006670:	24000010 	.word	0x24000010
 8006674:	240015e8 	.word	0x240015e8

08006678 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800667c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800667e:	4618      	mov	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fa29 	bl	8006aec <USER_SPI_initialize>
 800669a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 f9f3 	bl	8006a9c <USER_SPI_status>
 80066b6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	607a      	str	r2, [r7, #4]
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 80066d0:	7bf8      	ldrb	r0, [r7, #15]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	f000 faea 	bl	8006cb0 <USER_SPI_read>
 80066dc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	4603      	mov	r3, r0
 80066f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80066f6:	7bf8      	ldrb	r0, [r7, #15]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	f000 fb3d 	bl	8006d7c <USER_SPI_write>
 8006702:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	603a      	str	r2, [r7, #0]
 8006716:	71fb      	strb	r3, [r7, #7]
 8006718:	460b      	mov	r3, r1
 800671a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800671c:	79b9      	ldrb	r1, [r7, #6]
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fba6 	bl	8006e74 <USER_SPI_ioctl>
 8006728:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_SPI_TransmitReceive_fast>:
static BYTE CardType;	// b0:MMC, b1:SDv1, b2:SDv2, b3:Block addressing

// This is a stripped down version of:
// HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout);
void HAL_SPI_TransmitReceive_fast(const uint8_t *pTxData, uint8_t *pRxData, uint16_t count)
{
 8006734:	b480      	push	{r7}
 8006736:	b08b      	sub	sp, #44	@ 0x2c
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
	uint32_t rx_count = count;
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t tx_count = count;
 8006746:	88fb      	ldrh	r3, [r7, #6]
 8006748:	623b      	str	r3, [r7, #32]
	static volatile uint8_t dummy;

	volatile uint8_t *TXDR = (uint8_t*) &(SD_SPI_HANDLE.Instance->TXDR);
 800674a:	4b38      	ldr	r3, [pc, #224]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3320      	adds	r3, #32
 8006750:	61fb      	str	r3, [r7, #28]
	volatile uint8_t *RXDR = (uint8_t*) &(SD_SPI_HANDLE.Instance->RXDR);
 8006752:	4b36      	ldr	r3, [pc, #216]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3330      	adds	r3, #48	@ 0x30
 8006758:	61bb      	str	r3, [r7, #24]
	volatile uint32_t *SR = &(SD_SPI_HANDLE.Instance->SR);
 800675a:	4b34      	ldr	r3, [pc, #208]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	617b      	str	r3, [r7, #20]

	__HAL_SPI_ENABLE(&SD_SPI_HANDLE); // Required
 8006762:	4b32      	ldr	r3, [pc, #200]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	4b30      	ldr	r3, [pc, #192]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0201 	orr.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]
	SET_BIT(SD_SPI_HANDLE.Instance->CR1, SPI_CR1_CSTART); // Required
 8006772:	4b2e      	ldr	r3, [pc, #184]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	4b2c      	ldr	r3, [pc, #176]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006780:	601a      	str	r2, [r3, #0]

	while (tx_count || rx_count)
 8006782:	e034      	b.n	80067ee <HAL_SPI_TransmitReceive_fast+0xba>
	{
		// Check the TXP flag
		if (tx_count && (*SR & SPI_FLAG_TXE))
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d015      	beq.n	80067b6 <HAL_SPI_TransmitReceive_fast+0x82>
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00f      	beq.n	80067b6 <HAL_SPI_TransmitReceive_fast+0x82>
		{
			if (pTxData)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d006      	beq.n	80067aa <HAL_SPI_TransmitReceive_fast+0x76>
				*TXDR = *pTxData++;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	60fa      	str	r2, [r7, #12]
 80067a2:	781a      	ldrb	r2, [r3, #0]
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e002      	b.n	80067b0 <HAL_SPI_TransmitReceive_fast+0x7c>
			else
				*TXDR = 0xFF;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	22ff      	movs	r2, #255	@ 0xff
 80067ae:	701a      	strb	r2, [r3, #0]
			tx_count--;
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	623b      	str	r3, [r7, #32]
		}

		if (rx_count && (*SR & SPI_FLAG_RXNE))
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d018      	beq.n	80067ee <HAL_SPI_TransmitReceive_fast+0xba>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d012      	beq.n	80067ee <HAL_SPI_TransmitReceive_fast+0xba>
		{
			if (pRxData)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <HAL_SPI_TransmitReceive_fast+0xaa>
			  *pRxData++ = *RXDR;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	60ba      	str	r2, [r7, #8]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	7812      	ldrb	r2, [r2, #0]
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e004      	b.n	80067e8 <HAL_SPI_TransmitReceive_fast+0xb4>
			else
			  dummy = *RXDR;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	4b12      	ldr	r3, [pc, #72]	@ (8006830 <HAL_SPI_TransmitReceive_fast+0xfc>)
 80067e6:	701a      	strb	r2, [r3, #0]
			rx_count--;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	3b01      	subs	r3, #1
 80067ec:	627b      	str	r3, [r7, #36]	@ 0x24
	while (tx_count || rx_count)
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1c7      	bne.n	8006784 <HAL_SPI_TransmitReceive_fast+0x50>
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1c4      	bne.n	8006784 <HAL_SPI_TransmitReceive_fast+0x50>
		}
	}

	__HAL_SPI_CLEAR_TXTFFLAG(&SD_SPI_HANDLE); // Not Required
 80067fa:	4b0c      	ldr	r3, [pc, #48]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699a      	ldr	r2, [r3, #24]
 8006800:	4b0a      	ldr	r3, [pc, #40]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0210 	orr.w	r2, r2, #16
 8006808:	619a      	str	r2, [r3, #24]
	__HAL_SPI_DISABLE(&SD_SPI_HANDLE);		  // Not Required
 800680a:	4b08      	ldr	r3, [pc, #32]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	4b06      	ldr	r3, [pc, #24]	@ (800682c <HAL_SPI_TransmitReceive_fast+0xf8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0201 	bic.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]
	UNUSED(dummy);
 800681a:	4b05      	ldr	r3, [pc, #20]	@ (8006830 <HAL_SPI_TransmitReceive_fast+0xfc>)
 800681c:	781b      	ldrb	r3, [r3, #0]
}
 800681e:	bf00      	nop
 8006820:	372c      	adds	r7, #44	@ 0x2c
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	24000044 	.word	0x24000044
 8006830:	240015f1 	.word	0x240015f1

08006834 <transmit_mmc>:
#if _USE_WRITE
/*----------------------------------------------------------------------*/
/* Transmit data to the card											*/
/*----------------------------------------------------------------------*/
static void transmit_mmc(const BYTE *buf, UINT count)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
	HAL_SPI_TransmitReceive_fast(buf, NULL, count);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	2100      	movs	r1, #0
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff ff74 	bl	8006734 <HAL_SPI_TransmitReceive_fast>
}
 800684c:	bf00      	nop
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <receive_mmc1>:

/*----------------------------------------------------------------------*/
/* Receive 1 byte from the MMC											*/
/*----------------------------------------------------------------------*/
static BYTE receive_mmc1()
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
	BYTE rxdata;
	HAL_SPI_TransmitReceive_fast(NULL, &rxdata, 1);
 800685a:	1dfb      	adds	r3, r7, #7
 800685c:	2201      	movs	r2, #1
 800685e:	4619      	mov	r1, r3
 8006860:	2000      	movs	r0, #0
 8006862:	f7ff ff67 	bl	8006734 <HAL_SPI_TransmitReceive_fast>
	return rxdata;
 8006866:	79fb      	ldrb	r3, [r7, #7]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <wait_ready>:
/*----------------------------------------------------------------------*/
/* Wait for card ready													*/
/*----------------------------------------------------------------------*/
// 1:Ready, 0:Timeout
static int wait_ready(UINT timeout)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
	BYTE data = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	73fb      	strb	r3, [r7, #15]
	uint32_t start = HAL_GetTick();
 800687c:	f7fb f826 	bl	80018cc <HAL_GetTick>
 8006880:	60b8      	str	r0, [r7, #8]

	while ((data != 0xFF) && (HAL_GetTick() - start < timeout))
 8006882:	e003      	b.n	800688c <wait_ready+0x1c>
	{
		data = receive_mmc1();
 8006884:	f7ff ffe6 	bl	8006854 <receive_mmc1>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
	while ((data != 0xFF) && (HAL_GetTick() - start < timeout))
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2bff      	cmp	r3, #255	@ 0xff
 8006890:	d007      	beq.n	80068a2 <wait_ready+0x32>
 8006892:	f7fb f81b 	bl	80018cc <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d8f0      	bhi.n	8006884 <wait_ready+0x14>
	}

	return (data == 0xFF);
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	2bff      	cmp	r3, #255	@ 0xff
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <spi_deselect>:

/*----------------------------------------------------------------------*/
/* De-select the card and release the SPI bus							*/
/*----------------------------------------------------------------------*/
static void spi_deselect(void)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
#else
	#warning Make sure SD_CS_GPIO_Port and SD_CS_Pin are defined when not using SPI Hardware NSS
#endif

	receive_mmc1(); // Dummy clock to force DO hi-z for multiple slave SPI
 80068ba:	f7ff ffcb 	bl	8006854 <receive_mmc1>
}
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <spi_select>:
/*----------------------------------------------------------------------*/
/* Select card and wait for card ready									*/
/*----------------------------------------------------------------------*/
// 1:OK, 0:Timeout
static int spi_select(void)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	af00      	add	r7, sp, #0
#ifdef SD_CS_GPIO_Port
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
#else
	#warning Make sure SD_CS_GPIO_Port and SD_CS_Pin are defined when not using SPI Hardware NSS
#endif
	receive_mmc1(); // Dummy clock (force DO enabled)
 80068c6:	f7ff ffc5 	bl	8006854 <receive_mmc1>

	if (wait_ready(500))
 80068ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80068ce:	f7ff ffcf 	bl	8006870 <wait_ready>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <spi_select+0x1a>
		return 1; // OK
 80068d8:	2301      	movs	r3, #1
 80068da:	e002      	b.n	80068e2 <spi_select+0x20>

	spi_deselect();
 80068dc:	f7ff ffeb 	bl	80068b6 <spi_deselect>
	return 0; // Timeout
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <receive_datablock>:
/*----------------------------------------------------------------------*/
/* Receive a data sector from the MMC									*/
/*----------------------------------------------------------------------*/
// 1:OK, 0:Error
static int receive_datablock(BYTE *buf, UINT count)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
	BYTE data[2];

	do { // Wait for DataStart token
		data[0] = receive_mmc1();
 80068f0:	f7ff ffb0 	bl	8006854 <receive_mmc1>
 80068f4:	4603      	mov	r3, r0
 80068f6:	733b      	strb	r3, [r7, #12]
	} while (data[0] == 0xFF);
 80068f8:	7b3b      	ldrb	r3, [r7, #12]
 80068fa:	2bff      	cmp	r3, #255	@ 0xff
 80068fc:	d0f8      	beq.n	80068f0 <receive_datablock+0xa>

	// Check for invalid data
	if (data[0] != 0xFE)
 80068fe:	7b3b      	ldrb	r3, [r7, #12]
 8006900:	2bfe      	cmp	r3, #254	@ 0xfe
 8006902:	d001      	beq.n	8006908 <receive_datablock+0x22>
		return 0; // Error
 8006904:	2300      	movs	r3, #0
 8006906:	e00e      	b.n	8006926 <receive_datablock+0x40>

	HAL_SPI_TransmitReceive_fast(NULL, buf, count); // Receive the data block
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	2000      	movs	r0, #0
 8006912:	f7ff ff0f 	bl	8006734 <HAL_SPI_TransmitReceive_fast>
	HAL_SPI_TransmitReceive_fast(NULL, data, 2);	// Read CRC
 8006916:	f107 030c 	add.w	r3, r7, #12
 800691a:	2202      	movs	r2, #2
 800691c:	4619      	mov	r1, r3
 800691e:	2000      	movs	r0, #0
 8006920:	f7ff ff08 	bl	8006734 <HAL_SPI_TransmitReceive_fast>

	return 1; // OK
 8006924:	2301      	movs	r3, #1
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <transmit_datablock>:
/* Send a data sector to the MMC										*/
/*----------------------------------------------------------------------*/
// 1:OK, 0:Failed
#if _USE_WRITE
static int transmit_datablock(const BYTE *buf, BYTE token)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	70fb      	strb	r3, [r7, #3]
	BYTE data[2];

	if (!wait_ready(500))
 800693a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800693e:	f7ff ff97 	bl	8006870 <wait_ready>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <transmit_datablock+0x1e>
		return 0;
 8006948:	2300      	movs	r3, #0
 800694a:	e022      	b.n	8006992 <transmit_datablock+0x64>

	data[0] = token;
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	733b      	strb	r3, [r7, #12]
	transmit_mmc(data, 1);		// Transmit token
 8006950:	f107 030c 	add.w	r3, r7, #12
 8006954:	2101      	movs	r1, #1
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff ff6c 	bl	8006834 <transmit_mmc>
	if (token != 0xFD)			// Is it data token?
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	2bfd      	cmp	r3, #253	@ 0xfd
 8006960:	d016      	beq.n	8006990 <transmit_datablock+0x62>
		{
		transmit_mmc(buf, SECTOR_SIZE); // Transmit 1 sector of data to the MMC
 8006962:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff ff64 	bl	8006834 <transmit_mmc>
		HAL_SPI_TransmitReceive_fast(NULL, data, 2); // Dummy CRC
 800696c:	f107 030c 	add.w	r3, r7, #12
 8006970:	2202      	movs	r2, #2
 8006972:	4619      	mov	r1, r3
 8006974:	2000      	movs	r0, #0
 8006976:	f7ff fedd 	bl	8006734 <HAL_SPI_TransmitReceive_fast>
		data[0] = receive_mmc1(); 		// Receive data response
 800697a:	f7ff ff6b 	bl	8006854 <receive_mmc1>
 800697e:	4603      	mov	r3, r0
 8006980:	733b      	strb	r3, [r7, #12]

		if ((data[0] & 0x1F) != 0x05)
 8006982:	7b3b      	ldrb	r3, [r7, #12]
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	2b05      	cmp	r3, #5
 800698a:	d001      	beq.n	8006990 <transmit_datablock+0x62>
			return 0; // Failed, data not accepted
 800698c:	2300      	movs	r3, #0
 800698e:	e000      	b.n	8006992 <transmit_datablock+0x64>
	}
	return 1; // OK
 8006990:	2301      	movs	r3, #1
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <transmit_mmc1>:

/*----------------------------------------------------------------------*/
/* Receive 1 byte from the MMC											*/
/*----------------------------------------------------------------------*/
static BYTE transmit_mmc1(BYTE txdata)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	4603      	mov	r3, r0
 80069a2:	71fb      	strb	r3, [r7, #7]
	BYTE rxdata;
	//HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &txdata, &rxdata, 1, 100);
	HAL_SPI_TransmitReceive_fast(&txdata, &rxdata, 1);
 80069a4:	f107 010f 	add.w	r1, r7, #15
 80069a8:	1dfb      	adds	r3, r7, #7
 80069aa:	2201      	movs	r2, #1
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fec1 	bl	8006734 <HAL_SPI_TransmitReceive_fast>
	return rxdata;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <send_cmd>:
/*----------------------------------------------------------------------*/
/* Send a command to the MMC											*/
/*----------------------------------------------------------------------*/
// Returns command response R1 (bit7==1:Send failed)
static BYTE send_cmd(BYTE cmd, DWORD arg)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	6039      	str	r1, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
	BYTE n, result;

	if (cmd & 0x80) // ACMD<n> is the command sequence of CMD55-CMD<n>
 80069c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da0e      	bge.n	80069ee <send_cmd+0x32>
	{
		cmd &= 0x7F;
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069d6:	71fb      	strb	r3, [r7, #7]
		result = send_cmd(CMD55, 0); // Command: APP_CMD
 80069d8:	2100      	movs	r1, #0
 80069da:	2037      	movs	r0, #55	@ 0x37
 80069dc:	f7ff ffee 	bl	80069bc <send_cmd>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73bb      	strb	r3, [r7, #14]
		if (result > 1)
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d901      	bls.n	80069ee <send_cmd+0x32>
			return result;
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	e052      	b.n	8006a94 <send_cmd+0xd8>
	}

	// Select the card and wait for ready except to stop multiple block read
	if (cmd != CMD12) // Command: STOP_TRANSMISSION
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	d008      	beq.n	8006a06 <send_cmd+0x4a>
	{
		spi_deselect();
 80069f4:	f7ff ff5f 	bl	80068b6 <spi_deselect>
		if (!spi_select())
 80069f8:	f7ff ff63 	bl	80068c2 <spi_select>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <send_cmd+0x4a>
			return 0xFF;
 8006a02:	23ff      	movs	r3, #255	@ 0xff
 8006a04:	e046      	b.n	8006a94 <send_cmd+0xd8>
	}

	// Send a command
	transmit_mmc1(0x40 | cmd);			// Start + command index
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff ffc3 	bl	800699a <transmit_mmc1>
	transmit_mmc1((BYTE)(arg >> 24));	// Argument[31..24]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	0e1b      	lsrs	r3, r3, #24
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff ffbd 	bl	800699a <transmit_mmc1>
	transmit_mmc1((BYTE)(arg >> 16));	// Argument[23..16]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	0c1b      	lsrs	r3, r3, #16
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff ffb7 	bl	800699a <transmit_mmc1>
	transmit_mmc1((BYTE)(arg >>  8));	// Argument[15..8]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff ffb1 	bl	800699a <transmit_mmc1>
	transmit_mmc1((BYTE) arg);			// Argument[7..0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff ffac 	bl	800699a <transmit_mmc1>
	n = 0x01;							// Dummy CRC + Stop
 8006a42:	2301      	movs	r3, #1
 8006a44:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD0)					// Valid CRC for CMD0(0)
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <send_cmd+0x96>
		n = 0x95;
 8006a4c:	2395      	movs	r3, #149	@ 0x95
 8006a4e:	73fb      	strb	r3, [r7, #15]
 8006a50:	e004      	b.n	8006a5c <send_cmd+0xa0>
	else
	if (cmd == CMD8)					// Valid CRC for CMD8(0x1AA)
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d101      	bne.n	8006a5c <send_cmd+0xa0>
		n = 0x87;
 8006a58:	2387      	movs	r3, #135	@ 0x87
 8006a5a:	73fb      	strb	r3, [r7, #15]

	transmit_mmc1(n);
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff ff9b 	bl	800699a <transmit_mmc1>

	// Receive command response
	if (cmd == CMD12) // Skip a stuff byte when stop reading
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	2b0c      	cmp	r3, #12
 8006a68:	d103      	bne.n	8006a72 <send_cmd+0xb6>
		result = receive_mmc1();
 8006a6a:	f7ff fef3 	bl	8006854 <receive_mmc1>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73bb      	strb	r3, [r7, #14]

	// Wait for a valid response (max 10 attempts)
	n = 10;
 8006a72:	230a      	movs	r3, #10
 8006a74:	73fb      	strb	r3, [r7, #15]
	do {
		result = receive_mmc1();
 8006a76:	f7ff feed 	bl	8006854 <receive_mmc1>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73bb      	strb	r3, [r7, #14]
	} while ((result & 0x80) && --n);
 8006a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da05      	bge.n	8006a92 <send_cmd+0xd6>
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	73fb      	strb	r3, [r7, #15]
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1f1      	bne.n	8006a76 <send_cmd+0xba>

	return result; // Returns the response value
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USER_SPI_status>:

/*----------------------------------------------------------------------*/
/* Get disk status														*/
/*----------------------------------------------------------------------*/
DSTATUS USER_SPI_status(BYTE drive) // Drive number, should be 0
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	71fb      	strb	r3, [r7, #7]
	if (drive) // Supports only drive 0
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <USER_SPI_status+0x14>
		return STA_NOINIT;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e017      	b.n	8006ae0 <USER_SPI_status+0x44>

	// Check if the card is initialized
	if (!(DiskStatus & STA_NOINIT))
 8006ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <USER_SPI_status+0x4c>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10d      	bne.n	8006ada <USER_SPI_status+0x3e>
	{
		if (send_cmd(CMD13, 0))	// Command: SEND_STATUS
 8006abe:	2100      	movs	r1, #0
 8006ac0:	200d      	movs	r0, #13
 8006ac2:	f7ff ff7b 	bl	80069bc <send_cmd>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <USER_SPI_status+0x36>
			DiskStatus = STA_NOINIT;
 8006acc:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <USER_SPI_status+0x4c>)
 8006ace:	2201      	movs	r2, #1
 8006ad0:	701a      	strb	r2, [r3, #0]

		receive_mmc1(); // Get next byte of R2
 8006ad2:	f7ff febf 	bl	8006854 <receive_mmc1>
		spi_deselect();
 8006ad6:	f7ff feee 	bl	80068b6 <spi_deselect>
	}

	return DiskStatus;
 8006ada:	4b03      	ldr	r3, [pc, #12]	@ (8006ae8 <USER_SPI_status+0x4c>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b2db      	uxtb	r3, r3
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	24000024 	.word	0x24000024

08006aec <USER_SPI_initialize>:

/*----------------------------------------------------------------------*/
/* Initialize disk drive												*/
/*----------------------------------------------------------------------*/
DSTATUS USER_SPI_initialize(BYTE drive) // Physical drive number, should be 0
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, cmd, buf[4];
	UINT counter;

	if (drive) // Only drive 0 is supported
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <USER_SPI_initialize+0x14>
		return STA_NOINIT;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0cc      	b.n	8006c9a <USER_SPI_initialize+0x1ae>

	__HAL_SPI_ENABLE(&SD_SPI_HANDLE);
 8006b00:	4b68      	ldr	r3, [pc, #416]	@ (8006ca4 <USER_SPI_initialize+0x1b8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4b67      	ldr	r3, [pc, #412]	@ (8006ca4 <USER_SPI_initialize+0x1b8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
	
	if (DiskStatus & STA_NODISK)			// Is a card present?
 8006b10:	4b65      	ldr	r3, [pc, #404]	@ (8006ca8 <USER_SPI_initialize+0x1bc>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <USER_SPI_initialize+0x3a>
		return DiskStatus;
 8006b1e:	4b62      	ldr	r3, [pc, #392]	@ (8006ca8 <USER_SPI_initialize+0x1bc>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	e0b9      	b.n	8006c9a <USER_SPI_initialize+0x1ae>

	// Store current SPI speed
	uint16_t oldspeed =	(SD_SPI_HANDLE.Instance->CR1 & SPI_BAUDRATEPRESCALER_256);
 8006b26:	4b5f      	ldr	r3, [pc, #380]	@ (8006ca4 <USER_SPI_initialize+0x1b8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	81fb      	strh	r3, [r7, #14]

	// Switch to slow speed (100-400KHz) to enter native operating mode
	SD_SPI_HANDLE.Instance->CR1 =
		(SD_SPI_HANDLE.Instance->CR1 & ~SPI_BAUDRATEPRESCALER_256) | SPI_BAUDRATEPRESCALER_256;
 8006b30:	4b5c      	ldr	r3, [pc, #368]	@ (8006ca4 <USER_SPI_initialize+0x1b8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
	SD_SPI_HANDLE.Instance->CR1 =
 8006b36:	4b5b      	ldr	r3, [pc, #364]	@ (8006ca4 <USER_SPI_initialize+0x1b8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
		(SD_SPI_HANDLE.Instance->CR1 & ~SPI_BAUDRATEPRESCALER_256) | SPI_BAUDRATEPRESCALER_256;
 8006b3a:	f042 42e0 	orr.w	r2, r2, #1879048192	@ 0x70000000
	SD_SPI_HANDLE.Instance->CR1 =
 8006b3e:	601a      	str	r2, [r3, #0]

	for (n = 10; n; n--) // Generate 80 dummy clocks at low speed (74 clock are required)
 8006b40:	230a      	movs	r3, #10
 8006b42:	75fb      	strb	r3, [r7, #23]
 8006b44:	e004      	b.n	8006b50 <USER_SPI_initialize+0x64>
		receive_mmc1();
 8006b46:	f7ff fe85 	bl	8006854 <receive_mmc1>
	for (n = 10; n; n--) // Generate 80 dummy clocks at low speed (74 clock are required)
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f7      	bne.n	8006b46 <USER_SPI_initialize+0x5a>

	// Restore previous (fast) speed
	SD_SPI_HANDLE.Instance->CR1 =
		(SD_SPI_HANDLE.Instance->CR1 & ~SPI_BAUDRATEPRESCALER_256) | oldspeed;
 8006b56:	4b53      	ldr	r3, [pc, #332]	@ (8006ca4 <USER_SPI_initialize+0x1b8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b60:	89fa      	ldrh	r2, [r7, #14]
	SD_SPI_HANDLE.Instance->CR1 =
 8006b62:	4b50      	ldr	r3, [pc, #320]	@ (8006ca4 <USER_SPI_initialize+0x1b8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
		(SD_SPI_HANDLE.Instance->CR1 & ~SPI_BAUDRATEPRESCALER_256) | oldspeed;
 8006b66:	430a      	orrs	r2, r1
	SD_SPI_HANDLE.Instance->CR1 =
 8006b68:	601a      	str	r2, [r3, #0]

	ty = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75bb      	strb	r3, [r7, #22]
	if (send_cmd(CMD0, 0) == 1) // Enter idle state
 8006b6e:	2100      	movs	r1, #0
 8006b70:	2000      	movs	r0, #0
 8006b72:	f7ff ff23 	bl	80069bc <send_cmd>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d177      	bne.n	8006c6c <USER_SPI_initialize+0x180>
	{
		if (send_cmd(CMD8, 0x1AA) == 1) // Is it SDv2?
 8006b7c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006b80:	2008      	movs	r0, #8
 8006b82:	f7ff ff1b 	bl	80069bc <send_cmd>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d13b      	bne.n	8006c04 <USER_SPI_initialize+0x118>
		{	// Get R7 (32 bits)
			HAL_SPI_TransmitReceive_fast(NULL, buf, 4);
 8006b8c:	f107 0308 	add.w	r3, r7, #8
 8006b90:	2204      	movs	r2, #4
 8006b92:	4619      	mov	r1, r3
 8006b94:	2000      	movs	r0, #0
 8006b96:	f7ff fdcd 	bl	8006734 <HAL_SPI_TransmitReceive_fast>
			if ((buf[2] == 0x01) && (buf[3] == 0xAA))
 8006b9a:	7abb      	ldrb	r3, [r7, #10]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d165      	bne.n	8006c6c <USER_SPI_initialize+0x180>
 8006ba0:	7afb      	ldrb	r3, [r7, #11]
 8006ba2:	2baa      	cmp	r3, #170	@ 0xaa
 8006ba4:	d162      	bne.n	8006c6c <USER_SPI_initialize+0x180>
			{ // The card can use a Vcc range of 2.7-3.6V

				for (counter = 1000; counter; counter--) // 1 second timeout, usually needs 10ms
 8006ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	e00d      	b.n	8006bca <USER_SPI_initialize+0xde>
				{
					if (send_cmd(ACMD41, 1UL << 30) == 0) // Command: SEND_OP_COND (SDC)
 8006bae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006bb2:	20a9      	movs	r0, #169	@ 0xa9
 8006bb4:	f7ff ff02 	bl	80069bc <send_cmd>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <USER_SPI_initialize+0xe6>
						break;
					HAL_Delay(1);
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f7fa fe90 	bl	80018e4 <HAL_Delay>
				for (counter = 1000; counter; counter--) // 1 second timeout, usually needs 10ms
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1ee      	bne.n	8006bae <USER_SPI_initialize+0xc2>
 8006bd0:	e000      	b.n	8006bd4 <USER_SPI_initialize+0xe8>
						break;
 8006bd2:	bf00      	nop
				}

				if (!send_cmd(CMD58, 0)) // Check CCS bit in the OCR
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	203a      	movs	r0, #58	@ 0x3a
 8006bd8:	f7ff fef0 	bl	80069bc <send_cmd>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d144      	bne.n	8006c6c <USER_SPI_initialize+0x180>
				{
					HAL_SPI_TransmitReceive_fast(NULL, buf, 4);
 8006be2:	f107 0308 	add.w	r3, r7, #8
 8006be6:	2204      	movs	r2, #4
 8006be8:	4619      	mov	r1, r3
 8006bea:	2000      	movs	r0, #0
 8006bec:	f7ff fda2 	bl	8006734 <HAL_SPI_TransmitReceive_fast>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // Card ID SDv2
 8006bf0:	7a3b      	ldrb	r3, [r7, #8]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <USER_SPI_initialize+0x112>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	e000      	b.n	8006c00 <USER_SPI_initialize+0x114>
 8006bfe:	2304      	movs	r3, #4
 8006c00:	75bb      	strb	r3, [r7, #22]
 8006c02:	e033      	b.n	8006c6c <USER_SPI_initialize+0x180>
				}
			}
		}
		else // SDv1 or MMCv3, not SDv2
		{
			if (send_cmd(ACMD41, 0) <= 1) // Is it SDv1 or MMC?
 8006c04:	2100      	movs	r1, #0
 8006c06:	20a9      	movs	r0, #169	@ 0xa9
 8006c08:	f7ff fed8 	bl	80069bc <send_cmd>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d804      	bhi.n	8006c1c <USER_SPI_initialize+0x130>
			{
				ty = CT_SD1; // SDv1 (ACMD41(0))
 8006c12:	2302      	movs	r3, #2
 8006c14:	75bb      	strb	r3, [r7, #22]
				cmd = ACMD41;
 8006c16:	23a9      	movs	r3, #169	@ 0xa9
 8006c18:	757b      	strb	r3, [r7, #21]
 8006c1a:	e003      	b.n	8006c24 <USER_SPI_initialize+0x138>
			}
			else // MMCv3
			{
				ty = CT_MMC; // MMCv3 (CMD1(0))
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	75bb      	strb	r3, [r7, #22]
				cmd = CMD1;
 8006c20:	2301      	movs	r3, #1
 8006c22:	757b      	strb	r3, [r7, #21]
			}

			for (counter = 1000; counter; counter--) // 1 second timeout for leaving idle state
 8006c24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	e00d      	b.n	8006c48 <USER_SPI_initialize+0x15c>
			{
				if (send_cmd(cmd, 0) == 0)
 8006c2c:	7d7b      	ldrb	r3, [r7, #21]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff fec3 	bl	80069bc <send_cmd>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <USER_SPI_initialize+0x164>
					break;
				HAL_Delay(1);
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	f7fa fe51 	bl	80018e4 <HAL_Delay>
			for (counter = 1000; counter; counter--) // 1 second timeout for leaving idle state
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1ee      	bne.n	8006c2c <USER_SPI_initialize+0x140>
 8006c4e:	e000      	b.n	8006c52 <USER_SPI_initialize+0x166>
					break;
 8006c50:	bf00      	nop
			}

			if (!counter || send_cmd(CMD16, SECTOR_SIZE)) // Command: SET_BLOCKLEN 512
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d007      	beq.n	8006c68 <USER_SPI_initialize+0x17c>
 8006c58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006c5c:	2010      	movs	r0, #16
 8006c5e:	f7ff fead 	bl	80069bc <send_cmd>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <USER_SPI_initialize+0x180>
				ty = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	75bb      	strb	r3, [r7, #22]
		}
	}
	CardType = ty; // Card type
 8006c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8006cac <USER_SPI_initialize+0x1c0>)
 8006c6e:	7dbb      	ldrb	r3, [r7, #22]
 8006c70:	7013      	strb	r3, [r2, #0]

	if (ty)						// OK
 8006c72:	7dbb      	ldrb	r3, [r7, #22]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d008      	beq.n	8006c8a <USER_SPI_initialize+0x19e>
		DiskStatus &= ~STA_NOINIT;	// Clear STA_NOINIT flag
 8006c78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca8 <USER_SPI_initialize+0x1bc>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f023 0301 	bic.w	r3, r3, #1
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	4b08      	ldr	r3, [pc, #32]	@ (8006ca8 <USER_SPI_initialize+0x1bc>)
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	e002      	b.n	8006c90 <USER_SPI_initialize+0x1a4>
	 else						// Failed
		DiskStatus = STA_NOINIT;
 8006c8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ca8 <USER_SPI_initialize+0x1bc>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	701a      	strb	r2, [r3, #0]
	spi_deselect();
 8006c90:	f7ff fe11 	bl	80068b6 <spi_deselect>

	return DiskStatus;
 8006c94:	4b04      	ldr	r3, [pc, #16]	@ (8006ca8 <USER_SPI_initialize+0x1bc>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	b2db      	uxtb	r3, r3
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	24000044 	.word	0x24000044
 8006ca8:	24000024 	.word	0x24000024
 8006cac:	240015f0 	.word	0x240015f0

08006cb0 <USER_SPI_read>:
/*----------------------------------------------------------------------*/
DRESULT USER_SPI_read(BYTE drive,	// Physical drive number, should be 0
					  BYTE *buf,	// Pointer to the data buffer to store the data
					  DWORD sector,	// Start sector number (LBA)
					  UINT count)	// Number of sectors to read (1..128)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
	if (drive || !count)		// Check drive and count
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d102      	bne.n	8006ccc <USER_SPI_read+0x1c>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <USER_SPI_read+0x20>
		return RES_PARERR;
 8006ccc:	2304      	movs	r3, #4
 8006cce:	e04d      	b.n	8006d6c <USER_SPI_read+0xbc>

	if (DiskStatus & STA_NOINIT) // Check if card is ready
 8006cd0:	4b28      	ldr	r3, [pc, #160]	@ (8006d74 <USER_SPI_read+0xc4>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <USER_SPI_read+0x32>
		return RES_NOTRDY;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e044      	b.n	8006d6c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) // Convert LBA to byte address
 8006ce2:	4b25      	ldr	r3, [pc, #148]	@ (8006d78 <USER_SPI_read+0xc8>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d102      	bne.n	8006cf4 <USER_SPI_read+0x44>
		sector = sector * SECTOR_SIZE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	025b      	lsls	r3, r3, #9
 8006cf2:	607b      	str	r3, [r7, #4]

	if (count == 1) // Command: READ_SINGLE_BLOCK
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d111      	bne.n	8006d1e <USER_SPI_read+0x6e>
	{
		if ((send_cmd(CMD17, sector) == 0) && receive_datablock(buf, SECTOR_SIZE)) // Command: READ_SINGLE_BLOCK
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	2011      	movs	r0, #17
 8006cfe:	f7ff fe5d 	bl	80069bc <send_cmd>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d129      	bne.n	8006d5c <USER_SPI_read+0xac>
 8006d08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d0c:	68b8      	ldr	r0, [r7, #8]
 8006d0e:	f7ff fdea 	bl	80068e6 <receive_datablock>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d021      	beq.n	8006d5c <USER_SPI_read+0xac>
			count = 0; // Done
 8006d18:	2300      	movs	r3, #0
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	e01e      	b.n	8006d5c <USER_SPI_read+0xac>
	}
	else // Multiple sector read
	{
		if (send_cmd(CMD18, sector) == 0) // Command: READ_MULTIPLE_BLOCK
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	2012      	movs	r0, #18
 8006d22:	f7ff fe4b 	bl	80069bc <send_cmd>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d117      	bne.n	8006d5c <USER_SPI_read+0xac>
		{
			do
			{
				if (!receive_datablock(buf, SECTOR_SIZE))
 8006d2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d30:	68b8      	ldr	r0, [r7, #8]
 8006d32:	f7ff fdd8 	bl	80068e6 <receive_datablock>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <USER_SPI_read+0xa2>
					break;
				buf += SECTOR_SIZE;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006d42:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	603b      	str	r3, [r7, #0]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1ed      	bne.n	8006d2c <USER_SPI_read+0x7c>
 8006d50:	e000      	b.n	8006d54 <USER_SPI_read+0xa4>
					break;
 8006d52:	bf00      	nop

			send_cmd(CMD12, 0); // Command: STOP_TRANSMISSION
 8006d54:	2100      	movs	r1, #0
 8006d56:	200c      	movs	r0, #12
 8006d58:	f7ff fe30 	bl	80069bc <send_cmd>
		}
	}

	spi_deselect();
 8006d5c:	f7ff fdab 	bl	80068b6 <spi_deselect>

	return count ? RES_ERROR : RES_OK;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bf14      	ite	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	2300      	moveq	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	24000024 	.word	0x24000024
 8006d78:	240015f0 	.word	0x240015f0

08006d7c <USER_SPI_write>:
/*----------------------------------------------------------------------*/
DRESULT USER_SPI_write(BYTE drive,		// Physical drive number, should be 0
					   const BYTE *buf,	// Pointer to the data to be written
					   DWORD sector,	// Start sector number (LBA)
					   UINT count)		// Number of sectors to write (1..128)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
	if (drive || !count)		// Check parameters
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <USER_SPI_write+0x1c>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <USER_SPI_write+0x20>
		return RES_PARERR;
 8006d98:	2304      	movs	r3, #4
 8006d9a:	e063      	b.n	8006e64 <USER_SPI_write+0xe8>

	if (DiskStatus & STA_NOINIT) // Check drive status
 8006d9c:	4b33      	ldr	r3, [pc, #204]	@ (8006e6c <USER_SPI_write+0xf0>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <USER_SPI_write+0x32>
		return RES_NOTRDY;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e05a      	b.n	8006e64 <USER_SPI_write+0xe8>

	if (DiskStatus & STA_PROTECT) // Check write protect
 8006dae:	4b2f      	ldr	r3, [pc, #188]	@ (8006e6c <USER_SPI_write+0xf0>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <USER_SPI_write+0x44>
		return RES_WRPRT;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e051      	b.n	8006e64 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) // LBA ==> BA conversion (byte addressing cards)
 8006dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8006e70 <USER_SPI_write+0xf4>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d102      	bne.n	8006dd2 <USER_SPI_write+0x56>
		sector = sector * SECTOR_SIZE; // Convert LBA to byte address
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	025b      	lsls	r3, r3, #9
 8006dd0:	607b      	str	r3, [r7, #4]

	if (count == 1) // Single sector write
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d110      	bne.n	8006dfa <USER_SPI_write+0x7e>
	{
		if ((send_cmd(CMD24, sector) == 0) && transmit_datablock(buf, 0xFE)) // Command: WRITE_BLOCK
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	2018      	movs	r0, #24
 8006ddc:	f7ff fdee 	bl	80069bc <send_cmd>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d136      	bne.n	8006e54 <USER_SPI_write+0xd8>
 8006de6:	21fe      	movs	r1, #254	@ 0xfe
 8006de8:	68b8      	ldr	r0, [r7, #8]
 8006dea:	f7ff fda0 	bl	800692e <transmit_datablock>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d02f      	beq.n	8006e54 <USER_SPI_write+0xd8>
			count = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	e02c      	b.n	8006e54 <USER_SPI_write+0xd8>
	}
	else // Multiple sector write
	{
		if (CardType & CT_SDC)
 8006dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8006e70 <USER_SPI_write+0xf4>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	f003 0306 	and.w	r3, r3, #6
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <USER_SPI_write+0x92>
			send_cmd(ACMD23, count); // Command: SET_WR_BLK_ERASE_COUNT
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	2097      	movs	r0, #151	@ 0x97
 8006e0a:	f7ff fdd7 	bl	80069bc <send_cmd>

		if (send_cmd(CMD25, sector) == 0) // Command: WRITE_MULTIPLE_BLOCK
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	2019      	movs	r0, #25
 8006e12:	f7ff fdd3 	bl	80069bc <send_cmd>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d11b      	bne.n	8006e54 <USER_SPI_write+0xd8>
		{
			do {
				if (!transmit_datablock(buf, 0xFC))
 8006e1c:	21fc      	movs	r1, #252	@ 0xfc
 8006e1e:	68b8      	ldr	r0, [r7, #8]
 8006e20:	f7ff fd85 	bl	800692e <transmit_datablock>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <USER_SPI_write+0xc4>
					break;
				buf += SECTOR_SIZE;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006e30:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1ee      	bne.n	8006e1c <USER_SPI_write+0xa0>
 8006e3e:	e000      	b.n	8006e42 <USER_SPI_write+0xc6>
					break;
 8006e40:	bf00      	nop

			if (!transmit_datablock(0, 0xFD)) // STOP_TRAN token
 8006e42:	21fd      	movs	r1, #253	@ 0xfd
 8006e44:	2000      	movs	r0, #0
 8006e46:	f7ff fd72 	bl	800692e <transmit_datablock>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <USER_SPI_write+0xd8>
				count = 1;
 8006e50:	2301      	movs	r3, #1
 8006e52:	603b      	str	r3, [r7, #0]
		}
	}
	spi_deselect();
 8006e54:	f7ff fd2f 	bl	80068b6 <spi_deselect>

	return count ? RES_ERROR : RES_OK;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bf14      	ite	ne
 8006e5e:	2301      	movne	r3, #1
 8006e60:	2300      	moveq	r3, #0
 8006e62:	b2db      	uxtb	r3, r3
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	24000024 	.word	0x24000024
 8006e70:	240015f0 	.word	0x240015f0

08006e74 <USER_SPI_ioctl>:
#if _USE_IOCTL
/*----------------------------------------------------------------------*/
/* Miscellaneous Functions												*/
/*----------------------------------------------------------------------*/
DRESULT USER_SPI_ioctl(BYTE drive, BYTE cmd, void *buf)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08c      	sub	sp, #48	@ 0x30
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	603a      	str	r2, [r7, #0]
 8006e7e:	71fb      	strb	r3, [r7, #7]
 8006e80:	460b      	mov	r3, r1
 8006e82:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drive) // Only drive 0 is supported
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <USER_SPI_ioctl+0x1a>
		return RES_PARERR;
 8006e8a:	2304      	movs	r3, #4
 8006e8c:	e158      	b.n	8007140 <USER_SPI_ioctl+0x2cc>

	if (DiskStatus & STA_NOINIT)  // Check if drive is ready
 8006e8e:	4bae      	ldr	r3, [pc, #696]	@ (8007148 <USER_SPI_ioctl+0x2d4>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <USER_SPI_ioctl+0x2c>
		return RES_NOTRDY;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e14f      	b.n	8007140 <USER_SPI_ioctl+0x2cc>

	res = RES_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	switch (cmd)
 8006ea6:	79bb      	ldrb	r3, [r7, #6]
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	f200 8134 	bhi.w	8007116 <USER_SPI_ioctl+0x2a2>
 8006eae:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb4 <USER_SPI_ioctl+0x40>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006ec9 	.word	0x08006ec9
 8006eb8:	08006edd 	.word	0x08006edd
 8006ebc:	08007117 	.word	0x08007117
 8006ec0:	08006f89 	.word	0x08006f89
 8006ec4:	0800707b 	.word	0x0800707b
	{
		case CTRL_SYNC:	// Wait for internal write to complete
			if (spi_select())
 8006ec8:	f7ff fcfb 	bl	80068c2 <spi_select>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8125 	beq.w	800711e <USER_SPI_ioctl+0x2aa>
				res = RES_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006eda:	e120      	b.n	800711e <USER_SPI_ioctl+0x2aa>

		case GET_SECTOR_COUNT: // Get drive capacity in units of sectors (DWORD)
		if ((send_cmd(CMD9, 0) == 0) && receive_datablock(csd, 16)) // Command: SEND_CSD
 8006edc:	2100      	movs	r1, #0
 8006ede:	2009      	movs	r0, #9
 8006ee0:	f7ff fd6c 	bl	80069bc <send_cmd>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f040 811b 	bne.w	8007122 <USER_SPI_ioctl+0x2ae>
 8006eec:	f107 030c 	add.w	r3, r7, #12
 8006ef0:	2110      	movs	r1, #16
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fcf7 	bl	80068e6 <receive_datablock>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 8111 	beq.w	8007122 <USER_SPI_ioctl+0x2ae>
		{
			if ((csd[0] >> 6) == 1) // SDC version 2.00
 8006f00:	7b3b      	ldrb	r3, [r7, #12]
 8006f02:	099b      	lsrs	r3, r3, #6
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d111      	bne.n	8006f2e <USER_SPI_ioctl+0xba>
			{
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006f0a:	7d7b      	ldrb	r3, [r7, #21]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	7d3b      	ldrb	r3, [r7, #20]
 8006f10:	021b      	lsls	r3, r3, #8
 8006f12:	4413      	add	r3, r2
 8006f14:	461a      	mov	r2, r3
 8006f16:	7cfb      	ldrb	r3, [r7, #19]
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8006f1e:	4413      	add	r3, r2
 8006f20:	3301      	adds	r3, #1
 8006f22:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buf = csize << 10;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	029a      	lsls	r2, r3, #10
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	e028      	b.n	8006f80 <USER_SPI_ioctl+0x10c>
			}
			else // SDC version 1.XX or MMC version 3
			{
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006f2e:	7c7b      	ldrb	r3, [r7, #17]
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	7dbb      	ldrb	r3, [r7, #22]
 8006f38:	09db      	lsrs	r3, r3, #7
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	7d7b      	ldrb	r3, [r7, #21]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	f003 0306 	and.w	r3, r3, #6
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	4413      	add	r3, r2
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	3302      	adds	r3, #2
 8006f52:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006f56:	7d3b      	ldrb	r3, [r7, #20]
 8006f58:	099b      	lsrs	r3, r3, #6
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	7cfb      	ldrb	r3, [r7, #19]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	441a      	add	r2, r3
 8006f64:	7cbb      	ldrb	r3, [r7, #18]
 8006f66:	029b      	lsls	r3, r3, #10
 8006f68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3301      	adds	r3, #1
 8006f70:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buf = csize << (n - 9);
 8006f72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f76:	3b09      	subs	r3, #9
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006f86:	e0cc      	b.n	8007122 <USER_SPI_ioctl+0x2ae>

		case GET_BLOCK_SIZE: // Get erase block size in units of sectors (DWORD)
			if (CardType & CT_SD2)
 8006f88:	4b70      	ldr	r3, [pc, #448]	@ (800714c <USER_SPI_ioctl+0x2d8>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d02f      	beq.n	8006ff4 <USER_SPI_ioctl+0x180>
			{ // SDC version 2.00
				if (send_cmd(ACMD13, 0) == 0) // Command: Read SD status
 8006f94:	2100      	movs	r1, #0
 8006f96:	208d      	movs	r0, #141	@ 0x8d
 8006f98:	f7ff fd10 	bl	80069bc <send_cmd>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f040 80c1 	bne.w	8007126 <USER_SPI_ioctl+0x2b2>
				{
					receive_mmc1();
 8006fa4:	f7ff fc56 	bl	8006854 <receive_mmc1>
					if (receive_datablock(csd, 16)) // Read partial block
 8006fa8:	f107 030c 	add.w	r3, r7, #12
 8006fac:	2110      	movs	r1, #16
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff fc99 	bl	80068e6 <receive_datablock>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80b5 	beq.w	8007126 <USER_SPI_ioctl+0x2b2>
					{
						for (n = 48; n; n--)
 8006fbc:	2330      	movs	r3, #48	@ 0x30
 8006fbe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006fc2:	e006      	b.n	8006fd2 <USER_SPI_ioctl+0x15e>
							receive_mmc1(); // Purge trailing data
 8006fc4:	f7ff fc46 	bl	8006854 <receive_mmc1>
						for (n = 48; n; n--)
 8006fc8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006fd2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f4      	bne.n	8006fc4 <USER_SPI_ioctl+0x150>

						*(DWORD*)buf = 16UL << (csd[10] >> 4);
 8006fda:	7dbb      	ldrb	r3, [r7, #22]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2310      	movs	r3, #16
 8006fe4:	fa03 f202 	lsl.w	r2, r3, r2
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	601a      	str	r2, [r3, #0]
						res = RES_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					else // MMC
						*(DWORD*)buf = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					res = RES_OK;
				}
			}
		break;
 8006ff2:	e098      	b.n	8007126 <USER_SPI_ioctl+0x2b2>
				if ((send_cmd(CMD9, 0) == 0) && receive_datablock(csd, 16)) // Command: SEND_CSD
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	2009      	movs	r0, #9
 8006ff8:	f7ff fce0 	bl	80069bc <send_cmd>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f040 8091 	bne.w	8007126 <USER_SPI_ioctl+0x2b2>
 8007004:	f107 030c 	add.w	r3, r7, #12
 8007008:	2110      	movs	r1, #16
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fc6b 	bl	80068e6 <receive_datablock>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8087 	beq.w	8007126 <USER_SPI_ioctl+0x2b2>
					if (CardType & CT_SD1) // SDC version 1.XX
 8007018:	4b4c      	ldr	r3, [pc, #304]	@ (800714c <USER_SPI_ioctl+0x2d8>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d012      	beq.n	800704a <USER_SPI_ioctl+0x1d6>
						*(DWORD*)buf = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007024:	7dbb      	ldrb	r3, [r7, #22]
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800702c:	7dfa      	ldrb	r2, [r7, #23]
 800702e:	09d2      	lsrs	r2, r2, #7
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	4413      	add	r3, r2
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	7e7b      	ldrb	r3, [r7, #25]
 8007038:	099b      	lsrs	r3, r3, #6
 800703a:	b2db      	uxtb	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	fa02 f303 	lsl.w	r3, r2, r3
 8007042:	461a      	mov	r2, r3
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e013      	b.n	8007072 <USER_SPI_ioctl+0x1fe>
						*(DWORD*)buf = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800704a:	7dbb      	ldrb	r3, [r7, #22]
 800704c:	109b      	asrs	r3, r3, #2
 800704e:	b29b      	uxth	r3, r3
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	3301      	adds	r3, #1
 8007056:	7dfa      	ldrb	r2, [r7, #23]
 8007058:	00d2      	lsls	r2, r2, #3
 800705a:	f002 0218 	and.w	r2, r2, #24
 800705e:	7df9      	ldrb	r1, [r7, #23]
 8007060:	0949      	lsrs	r1, r1, #5
 8007062:	b2c9      	uxtb	r1, r1
 8007064:	440a      	add	r2, r1
 8007066:	3201      	adds	r2, #1
 8007068:	fb02 f303 	mul.w	r3, r2, r3
 800706c:	461a      	mov	r2, r3
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007078:	e055      	b.n	8007126 <USER_SPI_ioctl+0x2b2>

		case CTRL_TRIM : // Erase a block of sectors

			if (!(CardType & CT_SDC)) // Check if the card is SDC
 800707a:	4b34      	ldr	r3, [pc, #208]	@ (800714c <USER_SPI_ioctl+0x2d8>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	f003 0306 	and.w	r3, r3, #6
 8007082:	2b00      	cmp	r3, #0
 8007084:	d051      	beq.n	800712a <USER_SPI_ioctl+0x2b6>
				break;

			if (USER_SPI_ioctl(drive, MMC_GET_CSD, csd)) // Get CSD
 8007086:	f107 020c 	add.w	r2, r7, #12
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	210b      	movs	r1, #11
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fef0 	bl	8006e74 <USER_SPI_ioctl>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d149      	bne.n	800712e <USER_SPI_ioctl+0x2ba>
				break;

			if (!(csd[0] >> 6) && !(csd[10] & 0x40)) // Check if sector erase can be applied to the card
 800709a:	7b3b      	ldrb	r3, [r7, #12]
 800709c:	099b      	lsrs	r3, r3, #6
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <USER_SPI_ioctl+0x23a>
 80070a4:	7dbb      	ldrb	r3, [r7, #22]
 80070a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d041      	beq.n	8007132 <USER_SPI_ioctl+0x2be>
				break;

			dp = buf;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	623b      	str	r3, [r7, #32]
			st = dp[0];
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	62bb      	str	r3, [r7, #40]	@ 0x28
			ed = dp[1]; // Load sector block
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24

			if (!(CardType & CT_BLOCK))
 80070be:	4b23      	ldr	r3, [pc, #140]	@ (800714c <USER_SPI_ioctl+0x2d8>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <USER_SPI_ioctl+0x262>
			{
				st = st * SECTOR_SIZE;
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	025b      	lsls	r3, r3, #9
 80070ce:	62bb      	str	r3, [r7, #40]	@ 0x28
				ed = ed * SECTOR_SIZE;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	025b      	lsls	r3, r3, #9
 80070d4:	627b      	str	r3, [r7, #36]	@ 0x24
			}

			if ((send_cmd(CMD32, st) == 0) && // Erase sector block
 80070d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070d8:	2020      	movs	r0, #32
 80070da:	f7ff fc6f 	bl	80069bc <send_cmd>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d128      	bne.n	8007136 <USER_SPI_ioctl+0x2c2>
				(send_cmd(CMD33, ed) == 0) &&
 80070e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070e6:	2021      	movs	r0, #33	@ 0x21
 80070e8:	f7ff fc68 	bl	80069bc <send_cmd>
 80070ec:	4603      	mov	r3, r0
			if ((send_cmd(CMD32, st) == 0) && // Erase sector block
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d121      	bne.n	8007136 <USER_SPI_ioctl+0x2c2>
				(send_cmd(CMD38,  0) == 0) &&
 80070f2:	2100      	movs	r1, #0
 80070f4:	2026      	movs	r0, #38	@ 0x26
 80070f6:	f7ff fc61 	bl	80069bc <send_cmd>
 80070fa:	4603      	mov	r3, r0
				(send_cmd(CMD33, ed) == 0) &&
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d11a      	bne.n	8007136 <USER_SPI_ioctl+0x2c2>
					wait_ready(20000))
 8007100:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8007104:	f7ff fbb4 	bl	8006870 <wait_ready>
 8007108:	4603      	mov	r3, r0
				(send_cmd(CMD38,  0) == 0) &&
 800710a:	2b00      	cmp	r3, #0
 800710c:	d013      	beq.n	8007136 <USER_SPI_ioctl+0x2c2>
				res = RES_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007114:	e00f      	b.n	8007136 <USER_SPI_ioctl+0x2c2>

		default:
			res = RES_PARERR;
 8007116:	2304      	movs	r3, #4
 8007118:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800711c:	e00c      	b.n	8007138 <USER_SPI_ioctl+0x2c4>
		break;
 800711e:	bf00      	nop
 8007120:	e00a      	b.n	8007138 <USER_SPI_ioctl+0x2c4>
		break;
 8007122:	bf00      	nop
 8007124:	e008      	b.n	8007138 <USER_SPI_ioctl+0x2c4>
		break;
 8007126:	bf00      	nop
 8007128:	e006      	b.n	8007138 <USER_SPI_ioctl+0x2c4>
				break;
 800712a:	bf00      	nop
 800712c:	e004      	b.n	8007138 <USER_SPI_ioctl+0x2c4>
				break;
 800712e:	bf00      	nop
 8007130:	e002      	b.n	8007138 <USER_SPI_ioctl+0x2c4>
				break;
 8007132:	bf00      	nop
 8007134:	e000      	b.n	8007138 <USER_SPI_ioctl+0x2c4>
		break;
 8007136:	bf00      	nop
	}

	spi_deselect();
 8007138:	f7ff fbbd 	bl	80068b6 <spi_deselect>

	return res;
 800713c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007140:	4618      	mov	r0, r3
 8007142:	3730      	adds	r7, #48	@ 0x30
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	24000024 	.word	0x24000024
 800714c:	240015f0 	.word	0x240015f0

08007150 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	4a08      	ldr	r2, [pc, #32]	@ (8007180 <disk_status+0x30>)
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	79fa      	ldrb	r2, [r7, #7]
 8007168:	4905      	ldr	r1, [pc, #20]	@ (8007180 <disk_status+0x30>)
 800716a:	440a      	add	r2, r1
 800716c:	7a12      	ldrb	r2, [r2, #8]
 800716e:	4610      	mov	r0, r2
 8007170:	4798      	blx	r3
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	2400161c 	.word	0x2400161c

08007184 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	4a0e      	ldr	r2, [pc, #56]	@ (80071d0 <disk_initialize+0x4c>)
 8007196:	5cd3      	ldrb	r3, [r2, r3]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d114      	bne.n	80071c6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	4a0c      	ldr	r2, [pc, #48]	@ (80071d0 <disk_initialize+0x4c>)
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	79fa      	ldrb	r2, [r7, #7]
 80071aa:	4909      	ldr	r1, [pc, #36]	@ (80071d0 <disk_initialize+0x4c>)
 80071ac:	440a      	add	r2, r1
 80071ae:	7a12      	ldrb	r2, [r2, #8]
 80071b0:	4610      	mov	r0, r2
 80071b2:	4798      	blx	r3
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d103      	bne.n	80071c6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	4a03      	ldr	r2, [pc, #12]	@ (80071d0 <disk_initialize+0x4c>)
 80071c2:	2101      	movs	r1, #1
 80071c4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	2400161c 	.word	0x2400161c

080071d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80071d4:	b590      	push	{r4, r7, lr}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60b9      	str	r1, [r7, #8]
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	4603      	mov	r3, r0
 80071e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007210 <disk_read+0x3c>)
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	689c      	ldr	r4, [r3, #8]
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	4a07      	ldr	r2, [pc, #28]	@ (8007210 <disk_read+0x3c>)
 80071f4:	4413      	add	r3, r2
 80071f6:	7a18      	ldrb	r0, [r3, #8]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	47a0      	blx	r4
 8007200:	4603      	mov	r3, r0
 8007202:	75fb      	strb	r3, [r7, #23]
  return res;
 8007204:	7dfb      	ldrb	r3, [r7, #23]
}
 8007206:	4618      	mov	r0, r3
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	bd90      	pop	{r4, r7, pc}
 800720e:	bf00      	nop
 8007210:	2400161c 	.word	0x2400161c

08007214 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007214:	b590      	push	{r4, r7, lr}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	607a      	str	r2, [r7, #4]
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	4a0a      	ldr	r2, [pc, #40]	@ (8007250 <disk_write+0x3c>)
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	68dc      	ldr	r4, [r3, #12]
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	4a07      	ldr	r2, [pc, #28]	@ (8007250 <disk_write+0x3c>)
 8007234:	4413      	add	r3, r2
 8007236:	7a18      	ldrb	r0, [r3, #8]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	47a0      	blx	r4
 8007240:	4603      	mov	r3, r0
 8007242:	75fb      	strb	r3, [r7, #23]
  return res;
 8007244:	7dfb      	ldrb	r3, [r7, #23]
}
 8007246:	4618      	mov	r0, r3
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	bd90      	pop	{r4, r7, pc}
 800724e:	bf00      	nop
 8007250:	2400161c 	.word	0x2400161c

08007254 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	603a      	str	r2, [r7, #0]
 800725e:	71fb      	strb	r3, [r7, #7]
 8007260:	460b      	mov	r3, r1
 8007262:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	4a09      	ldr	r2, [pc, #36]	@ (800728c <disk_ioctl+0x38>)
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	79fa      	ldrb	r2, [r7, #7]
 8007272:	4906      	ldr	r1, [pc, #24]	@ (800728c <disk_ioctl+0x38>)
 8007274:	440a      	add	r2, r1
 8007276:	7a10      	ldrb	r0, [r2, #8]
 8007278:	79b9      	ldrb	r1, [r7, #6]
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	4798      	blx	r3
 800727e:	4603      	mov	r3, r0
 8007280:	73fb      	strb	r3, [r7, #15]
  return res;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	2400161c 	.word	0x2400161c

08007290 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3301      	adds	r3, #1
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80072a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80072a4:	021b      	lsls	r3, r3, #8
 80072a6:	b21a      	sxth	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b21b      	sxth	r3, r3
 80072ae:	4313      	orrs	r3, r2
 80072b0:	b21b      	sxth	r3, r3
 80072b2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80072b4:	89fb      	ldrh	r3, [r7, #14]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3303      	adds	r3, #3
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	021b      	lsls	r3, r3, #8
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	3202      	adds	r2, #2
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	3201      	adds	r2, #1
 80072e8:	7812      	ldrb	r2, [r2, #0]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	7812      	ldrb	r2, [r2, #0]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
	return rv;
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	887a      	ldrh	r2, [r7, #2]
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	887b      	ldrh	r3, [r7, #2]
 8007322:	0a1b      	lsrs	r3, r3, #8
 8007324:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	887a      	ldrh	r2, [r7, #2]
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	607a      	str	r2, [r7, #4]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	0a1b      	lsrs	r3, r3, #8
 8007358:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	0a1b      	lsrs	r3, r3, #8
 800736a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	701a      	strb	r2, [r3, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	0a1b      	lsrs	r3, r3, #8
 800737c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007396:	b480      	push	{r7}
 8007398:	b087      	sub	sp, #28
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00d      	beq.n	80073cc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	1c53      	adds	r3, r2, #1
 80073b4:	613b      	str	r3, [r7, #16]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	1c59      	adds	r1, r3, #1
 80073ba:	6179      	str	r1, [r7, #20]
 80073bc:	7812      	ldrb	r2, [r2, #0]
 80073be:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	607b      	str	r3, [r7, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1f1      	bne.n	80073b0 <mem_cpy+0x1a>
	}
}
 80073cc:	bf00      	nop
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	617a      	str	r2, [r7, #20]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f3      	bne.n	80073e8 <mem_set+0x10>
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800740e:	b480      	push	{r7}
 8007410:	b089      	sub	sp, #36	@ 0x24
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	61fa      	str	r2, [r7, #28]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	4619      	mov	r1, r3
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	61ba      	str	r2, [r7, #24]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	1acb      	subs	r3, r1, r3
 800743a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3b01      	subs	r3, #1
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <mem_cmp+0x40>
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0eb      	beq.n	8007426 <mem_cmp+0x18>

	return r;
 800744e:	697b      	ldr	r3, [r7, #20]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3724      	adds	r7, #36	@ 0x24
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007466:	e002      	b.n	800746e <chk_chr+0x12>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3301      	adds	r3, #1
 800746c:	607b      	str	r3, [r7, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <chk_chr+0x26>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	4293      	cmp	r3, r2
 8007480:	d1f2      	bne.n	8007468 <chk_chr+0xc>
	return *str;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	781b      	ldrb	r3, [r3, #0]
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
	...

08007494 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800749e:	2300      	movs	r3, #0
 80074a0:	60bb      	str	r3, [r7, #8]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	e029      	b.n	80074fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80074a8:	4a27      	ldr	r2, [pc, #156]	@ (8007548 <chk_lock+0xb4>)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	4413      	add	r3, r2
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d01d      	beq.n	80074f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074b6:	4a24      	ldr	r2, [pc, #144]	@ (8007548 <chk_lock+0xb4>)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	4413      	add	r3, r2
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d116      	bne.n	80074f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80074c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007548 <chk_lock+0xb4>)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	4413      	add	r3, r2
 80074d0:	3304      	adds	r3, #4
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074d8:	429a      	cmp	r2, r3
 80074da:	d10c      	bne.n	80074f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007548 <chk_lock+0xb4>)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	011b      	lsls	r3, r3, #4
 80074e2:	4413      	add	r3, r2
 80074e4:	3308      	adds	r3, #8
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d102      	bne.n	80074f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074f0:	e007      	b.n	8007502 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80074f2:	2301      	movs	r3, #1
 80074f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3301      	adds	r3, #1
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d9d2      	bls.n	80074a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d109      	bne.n	800751c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d102      	bne.n	8007514 <chk_lock+0x80>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d101      	bne.n	8007518 <chk_lock+0x84>
 8007514:	2300      	movs	r3, #0
 8007516:	e010      	b.n	800753a <chk_lock+0xa6>
 8007518:	2312      	movs	r3, #18
 800751a:	e00e      	b.n	800753a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d108      	bne.n	8007534 <chk_lock+0xa0>
 8007522:	4a09      	ldr	r2, [pc, #36]	@ (8007548 <chk_lock+0xb4>)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	4413      	add	r3, r2
 800752a:	330c      	adds	r3, #12
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007532:	d101      	bne.n	8007538 <chk_lock+0xa4>
 8007534:	2310      	movs	r3, #16
 8007536:	e000      	b.n	800753a <chk_lock+0xa6>
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	240015fc 	.word	0x240015fc

0800754c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007552:	2300      	movs	r3, #0
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	e002      	b.n	800755e <enq_lock+0x12>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3301      	adds	r3, #1
 800755c:	607b      	str	r3, [r7, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d806      	bhi.n	8007572 <enq_lock+0x26>
 8007564:	4a09      	ldr	r2, [pc, #36]	@ (800758c <enq_lock+0x40>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	4413      	add	r3, r2
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f2      	bne.n	8007558 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b02      	cmp	r3, #2
 8007576:	bf14      	ite	ne
 8007578:	2301      	movne	r3, #1
 800757a:	2300      	moveq	r3, #0
 800757c:	b2db      	uxtb	r3, r3
}
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	240015fc 	.word	0x240015fc

08007590 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	e01f      	b.n	80075e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80075a0:	4a41      	ldr	r2, [pc, #260]	@ (80076a8 <inc_lock+0x118>)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	4413      	add	r3, r2
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d113      	bne.n	80075da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80075b2:	4a3d      	ldr	r2, [pc, #244]	@ (80076a8 <inc_lock+0x118>)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	4413      	add	r3, r2
 80075ba:	3304      	adds	r3, #4
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d109      	bne.n	80075da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80075c6:	4a38      	ldr	r2, [pc, #224]	@ (80076a8 <inc_lock+0x118>)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	4413      	add	r3, r2
 80075ce:	3308      	adds	r3, #8
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d006      	beq.n	80075e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d9dc      	bls.n	80075a0 <inc_lock+0x10>
 80075e6:	e000      	b.n	80075ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80075e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d132      	bne.n	8007656 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e002      	b.n	80075fc <inc_lock+0x6c>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3301      	adds	r3, #1
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d806      	bhi.n	8007610 <inc_lock+0x80>
 8007602:	4a29      	ldr	r2, [pc, #164]	@ (80076a8 <inc_lock+0x118>)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	4413      	add	r3, r2
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1f2      	bne.n	80075f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b02      	cmp	r3, #2
 8007614:	d101      	bne.n	800761a <inc_lock+0x8a>
 8007616:	2300      	movs	r3, #0
 8007618:	e040      	b.n	800769c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4922      	ldr	r1, [pc, #136]	@ (80076a8 <inc_lock+0x118>)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	440b      	add	r3, r1
 8007626:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	491e      	ldr	r1, [pc, #120]	@ (80076a8 <inc_lock+0x118>)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	440b      	add	r3, r1
 8007634:	3304      	adds	r3, #4
 8007636:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	695a      	ldr	r2, [r3, #20]
 800763c:	491a      	ldr	r1, [pc, #104]	@ (80076a8 <inc_lock+0x118>)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	440b      	add	r3, r1
 8007644:	3308      	adds	r3, #8
 8007646:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007648:	4a17      	ldr	r2, [pc, #92]	@ (80076a8 <inc_lock+0x118>)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	4413      	add	r3, r2
 8007650:	330c      	adds	r3, #12
 8007652:	2200      	movs	r2, #0
 8007654:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d009      	beq.n	8007670 <inc_lock+0xe0>
 800765c:	4a12      	ldr	r2, [pc, #72]	@ (80076a8 <inc_lock+0x118>)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	4413      	add	r3, r2
 8007664:	330c      	adds	r3, #12
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <inc_lock+0xe0>
 800766c:	2300      	movs	r3, #0
 800766e:	e015      	b.n	800769c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d108      	bne.n	8007688 <inc_lock+0xf8>
 8007676:	4a0c      	ldr	r2, [pc, #48]	@ (80076a8 <inc_lock+0x118>)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	4413      	add	r3, r2
 800767e:	330c      	adds	r3, #12
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	e001      	b.n	800768c <inc_lock+0xfc>
 8007688:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800768c:	4906      	ldr	r1, [pc, #24]	@ (80076a8 <inc_lock+0x118>)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	440b      	add	r3, r1
 8007694:	330c      	adds	r3, #12
 8007696:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3301      	adds	r3, #1
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	240015fc 	.word	0x240015fc

080076ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	607b      	str	r3, [r7, #4]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d825      	bhi.n	800770c <dec_lock+0x60>
		n = Files[i].ctr;
 80076c0:	4a17      	ldr	r2, [pc, #92]	@ (8007720 <dec_lock+0x74>)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	4413      	add	r3, r2
 80076c8:	330c      	adds	r3, #12
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80076ce:	89fb      	ldrh	r3, [r7, #14]
 80076d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076d4:	d101      	bne.n	80076da <dec_lock+0x2e>
 80076d6:	2300      	movs	r3, #0
 80076d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80076da:	89fb      	ldrh	r3, [r7, #14]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <dec_lock+0x3a>
 80076e0:	89fb      	ldrh	r3, [r7, #14]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80076e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007720 <dec_lock+0x74>)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	4413      	add	r3, r2
 80076ee:	330c      	adds	r3, #12
 80076f0:	89fa      	ldrh	r2, [r7, #14]
 80076f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076f4:	89fb      	ldrh	r3, [r7, #14]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <dec_lock+0x5a>
 80076fa:	4a09      	ldr	r2, [pc, #36]	@ (8007720 <dec_lock+0x74>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	4413      	add	r3, r2
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	737b      	strb	r3, [r7, #13]
 800770a:	e001      	b.n	8007710 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800770c:	2302      	movs	r3, #2
 800770e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007710:	7b7b      	ldrb	r3, [r7, #13]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	240015fc 	.word	0x240015fc

08007724 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	e010      	b.n	8007754 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007732:	4a0d      	ldr	r2, [pc, #52]	@ (8007768 <clear_lock+0x44>)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	4413      	add	r3, r2
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	429a      	cmp	r2, r3
 8007740:	d105      	bne.n	800774e <clear_lock+0x2a>
 8007742:	4a09      	ldr	r2, [pc, #36]	@ (8007768 <clear_lock+0x44>)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	4413      	add	r3, r2
 800774a:	2200      	movs	r2, #0
 800774c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d9eb      	bls.n	8007732 <clear_lock+0xe>
	}
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	240015fc 	.word	0x240015fc

0800776c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	78db      	ldrb	r3, [r3, #3]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d034      	beq.n	80077ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007784:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	7858      	ldrb	r0, [r3, #1]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007790:	2301      	movs	r3, #1
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	f7ff fd3e 	bl	8007214 <disk_write>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800779e:	2301      	movs	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]
 80077a2:	e022      	b.n	80077ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	1ad2      	subs	r2, r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d217      	bcs.n	80077ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	789b      	ldrb	r3, [r3, #2]
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	e010      	b.n	80077e4 <sync_window+0x78>
					wsect += fs->fsize;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4413      	add	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7858      	ldrb	r0, [r3, #1]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80077d6:	2301      	movs	r3, #1
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	f7ff fd1b 	bl	8007214 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d8eb      	bhi.n	80077c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d01b      	beq.n	8007844 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff ffad 	bl	800776c <sync_window>
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d113      	bne.n	8007844 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7858      	ldrb	r0, [r3, #1]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007826:	2301      	movs	r3, #1
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	f7ff fcd3 	bl	80071d4 <disk_read>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007834:	f04f 33ff 	mov.w	r3, #4294967295
 8007838:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800783a:	2301      	movs	r3, #1
 800783c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff ff87 	bl	800776c <sync_window>
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d158      	bne.n	800791a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b03      	cmp	r3, #3
 800786e:	d148      	bne.n	8007902 <sync_fs+0xb2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	791b      	ldrb	r3, [r3, #4]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d144      	bne.n	8007902 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3330      	adds	r3, #48	@ 0x30
 800787c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007880:	2100      	movs	r1, #0
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff fda8 	bl	80073d8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3330      	adds	r3, #48	@ 0x30
 800788c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007890:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff fd37 	bl	8007308 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3330      	adds	r3, #48	@ 0x30
 800789e:	4921      	ldr	r1, [pc, #132]	@ (8007924 <sync_fs+0xd4>)
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7ff fd4c 	bl	800733e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3330      	adds	r3, #48	@ 0x30
 80078aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80078ae:	491e      	ldr	r1, [pc, #120]	@ (8007928 <sync_fs+0xd8>)
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fd44 	bl	800733e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3330      	adds	r3, #48	@ 0x30
 80078ba:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f7ff fd3a 	bl	800733e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3330      	adds	r3, #48	@ 0x30
 80078ce:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7ff fd30 	bl	800733e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	7858      	ldrb	r0, [r3, #1]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f6:	2301      	movs	r3, #1
 80078f8:	f7ff fc8c 	bl	8007214 <disk_write>
			fs->fsi_flag = 0;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2200      	movs	r2, #0
 8007908:	2100      	movs	r1, #0
 800790a:	4618      	mov	r0, r3
 800790c:	f7ff fca2 	bl	8007254 <disk_ioctl>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <sync_fs+0xca>
 8007916:	2301      	movs	r3, #1
 8007918:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800791a:	7bfb      	ldrb	r3, [r7, #15]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	41615252 	.word	0x41615252
 8007928:	61417272 	.word	0x61417272

0800792c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	3b02      	subs	r3, #2
 800793a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	3b02      	subs	r3, #2
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	429a      	cmp	r2, r3
 8007946:	d301      	bcc.n	800794c <clust2sect+0x20>
 8007948:	2300      	movs	r3, #0
 800794a:	e008      	b.n	800795e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	895b      	ldrh	r3, [r3, #10]
 8007950:	461a      	mov	r2, r3
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	fb03 f202 	mul.w	r2, r3, r2
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795c:	4413      	add	r3, r2
}
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b086      	sub	sp, #24
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d904      	bls.n	800798a <get_fat+0x20>
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d302      	bcc.n	8007990 <get_fat+0x26>
		val = 1;	/* Internal error */
 800798a:	2301      	movs	r3, #1
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	e08e      	b.n	8007aae <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007990:	f04f 33ff 	mov.w	r3, #4294967295
 8007994:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b03      	cmp	r3, #3
 800799c:	d061      	beq.n	8007a62 <get_fat+0xf8>
 800799e:	2b03      	cmp	r3, #3
 80079a0:	dc7b      	bgt.n	8007a9a <get_fat+0x130>
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d002      	beq.n	80079ac <get_fat+0x42>
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d041      	beq.n	8007a2e <get_fat+0xc4>
 80079aa:	e076      	b.n	8007a9a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	0a5b      	lsrs	r3, r3, #9
 80079c2:	4413      	add	r3, r2
 80079c4:	4619      	mov	r1, r3
 80079c6:	6938      	ldr	r0, [r7, #16]
 80079c8:	f7ff ff14 	bl	80077f4 <move_window>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d166      	bne.n	8007aa0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	60fa      	str	r2, [r7, #12]
 80079d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4413      	add	r3, r2
 80079e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6a1a      	ldr	r2, [r3, #32]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	0a5b      	lsrs	r3, r3, #9
 80079ee:	4413      	add	r3, r2
 80079f0:	4619      	mov	r1, r3
 80079f2:	6938      	ldr	r0, [r7, #16]
 80079f4:	f7ff fefe 	bl	80077f4 <move_window>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d152      	bne.n	8007aa4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4413      	add	r3, r2
 8007a08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <get_fat+0xba>
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	091b      	lsrs	r3, r3, #4
 8007a22:	e002      	b.n	8007a2a <get_fat+0xc0>
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a2a:	617b      	str	r3, [r7, #20]
			break;
 8007a2c:	e03f      	b.n	8007aae <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6a1a      	ldr	r2, [r3, #32]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	4413      	add	r3, r2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6938      	ldr	r0, [r7, #16]
 8007a3c:	f7ff feda 	bl	80077f4 <move_window>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d130      	bne.n	8007aa8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007a54:	4413      	add	r3, r2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fc1a 	bl	8007290 <ld_word>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	617b      	str	r3, [r7, #20]
			break;
 8007a60:	e025      	b.n	8007aae <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	6a1a      	ldr	r2, [r3, #32]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	09db      	lsrs	r3, r3, #7
 8007a6a:	4413      	add	r3, r2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6938      	ldr	r0, [r7, #16]
 8007a70:	f7ff fec0 	bl	80077f4 <move_window>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d118      	bne.n	8007aac <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007a88:	4413      	add	r3, r2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff fc19 	bl	80072c2 <ld_dword>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007a96:	617b      	str	r3, [r7, #20]
			break;
 8007a98:	e009      	b.n	8007aae <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	e006      	b.n	8007aae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007aa0:	bf00      	nop
 8007aa2:	e004      	b.n	8007aae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007aa4:	bf00      	nop
 8007aa6:	e002      	b.n	8007aae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007aac:	bf00      	nop
		}
	}

	return val;
 8007aae:	697b      	ldr	r3, [r7, #20]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b089      	sub	sp, #36	@ 0x24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	f240 80d9 	bls.w	8007c82 <put_fat+0x1ca>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	f080 80d3 	bcs.w	8007c82 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	f000 8096 	beq.w	8007c12 <put_fat+0x15a>
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	f300 80cb 	bgt.w	8007c82 <put_fat+0x1ca>
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d002      	beq.n	8007af6 <put_fat+0x3e>
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d06e      	beq.n	8007bd2 <put_fat+0x11a>
 8007af4:	e0c5      	b.n	8007c82 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	085b      	lsrs	r3, r3, #1
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	4413      	add	r3, r2
 8007b02:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a1a      	ldr	r2, [r3, #32]
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	0a5b      	lsrs	r3, r3, #9
 8007b0c:	4413      	add	r3, r2
 8007b0e:	4619      	mov	r1, r3
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f7ff fe6f 	bl	80077f4 <move_window>
 8007b16:	4603      	mov	r3, r0
 8007b18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b1a:	7ffb      	ldrb	r3, [r7, #31]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f040 80a9 	bne.w	8007c74 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	1c59      	adds	r1, r3, #1
 8007b2c:	61b9      	str	r1, [r7, #24]
 8007b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b32:	4413      	add	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00d      	beq.n	8007b5c <put_fat+0xa4>
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b25b      	sxtb	r3, r3
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	b25a      	sxtb	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	b25b      	sxtb	r3, r3
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	b25b      	sxtb	r3, r3
 8007b54:	4313      	orrs	r3, r2
 8007b56:	b25b      	sxtb	r3, r3
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	e001      	b.n	8007b60 <put_fat+0xa8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1a      	ldr	r2, [r3, #32]
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	0a5b      	lsrs	r3, r3, #9
 8007b72:	4413      	add	r3, r2
 8007b74:	4619      	mov	r1, r3
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff fe3c 	bl	80077f4 <move_window>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b80:	7ffb      	ldrb	r3, [r7, #31]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d178      	bne.n	8007c78 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b92:	4413      	add	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <put_fat+0xf0>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	091b      	lsrs	r3, r3, #4
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	e00e      	b.n	8007bc6 <put_fat+0x10e>
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b25b      	sxtb	r3, r3
 8007bae:	f023 030f 	bic.w	r3, r3, #15
 8007bb2:	b25a      	sxtb	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	0a1b      	lsrs	r3, r3, #8
 8007bb8:	b25b      	sxtb	r3, r3
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	b25b      	sxtb	r3, r3
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	b25b      	sxtb	r3, r3
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	70da      	strb	r2, [r3, #3]
			break;
 8007bd0:	e057      	b.n	8007c82 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a1a      	ldr	r2, [r3, #32]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	0a1b      	lsrs	r3, r3, #8
 8007bda:	4413      	add	r3, r2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7ff fe08 	bl	80077f4 <move_window>
 8007be4:	4603      	mov	r3, r0
 8007be6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007be8:	7ffb      	ldrb	r3, [r7, #31]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d146      	bne.n	8007c7c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007bfc:	4413      	add	r3, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	b292      	uxth	r2, r2
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7ff fb7f 	bl	8007308 <st_word>
			fs->wflag = 1;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	70da      	strb	r2, [r3, #3]
			break;
 8007c10:	e037      	b.n	8007c82 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1a      	ldr	r2, [r3, #32]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	09db      	lsrs	r3, r3, #7
 8007c1a:	4413      	add	r3, r2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff fde8 	bl	80077f4 <move_window>
 8007c24:	4603      	mov	r3, r0
 8007c26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c28:	7ffb      	ldrb	r3, [r7, #31]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d128      	bne.n	8007c80 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007c42:	4413      	add	r3, r2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff fb3c 	bl	80072c2 <ld_dword>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007c50:	4323      	orrs	r3, r4
 8007c52:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007c62:	4413      	add	r3, r2
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff fb69 	bl	800733e <st_dword>
			fs->wflag = 1;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	70da      	strb	r2, [r3, #3]
			break;
 8007c72:	e006      	b.n	8007c82 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007c74:	bf00      	nop
 8007c76:	e004      	b.n	8007c82 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007c78:	bf00      	nop
 8007c7a:	e002      	b.n	8007c82 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007c7c:	bf00      	nop
 8007c7e:	e000      	b.n	8007c82 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007c80:	bf00      	nop
		}
	}
	return res;
 8007c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3724      	adds	r7, #36	@ 0x24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd90      	pop	{r4, r7, pc}

08007c8c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d904      	bls.n	8007cb2 <remove_chain+0x26>
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d301      	bcc.n	8007cb6 <remove_chain+0x2a>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e04b      	b.n	8007d4e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00c      	beq.n	8007cd6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	69b8      	ldr	r0, [r7, #24]
 8007cc4:	f7ff fef8 	bl	8007ab8 <put_fat>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007ccc:	7ffb      	ldrb	r3, [r7, #31]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <remove_chain+0x4a>
 8007cd2:	7ffb      	ldrb	r3, [r7, #31]
 8007cd4:	e03b      	b.n	8007d4e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7ff fe46 	bl	800796a <get_fat>
 8007cde:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d031      	beq.n	8007d4a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <remove_chain+0x64>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e02e      	b.n	8007d4e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf6:	d101      	bne.n	8007cfc <remove_chain+0x70>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e028      	b.n	8007d4e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	69b8      	ldr	r0, [r7, #24]
 8007d02:	f7ff fed9 	bl	8007ab8 <put_fat>
 8007d06:	4603      	mov	r3, r0
 8007d08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007d0a:	7ffb      	ldrb	r3, [r7, #31]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <remove_chain+0x88>
 8007d10:	7ffb      	ldrb	r3, [r7, #31]
 8007d12:	e01c      	b.n	8007d4e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	3b02      	subs	r3, #2
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d20b      	bcs.n	8007d3a <remove_chain+0xae>
			fs->free_clst++;
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	791b      	ldrb	r3, [r3, #4]
 8007d30:	f043 0301 	orr.w	r3, r3, #1
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d3c6      	bcc.n	8007cd6 <remove_chain+0x4a>
 8007d48:	e000      	b.n	8007d4c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007d4a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b088      	sub	sp, #32
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10d      	bne.n	8007d88 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d004      	beq.n	8007d82 <create_chain+0x2c>
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d31b      	bcc.n	8007dba <create_chain+0x64>
 8007d82:	2301      	movs	r3, #1
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	e018      	b.n	8007dba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff fded 	bl	800796a <get_fat>
 8007d90:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d801      	bhi.n	8007d9c <create_chain+0x46>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e070      	b.n	8007e7e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da2:	d101      	bne.n	8007da8 <create_chain+0x52>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	e06a      	b.n	8007e7e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d201      	bcs.n	8007db6 <create_chain+0x60>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	e063      	b.n	8007e7e <create_chain+0x128>
		scl = clst;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d307      	bcc.n	8007dde <create_chain+0x88>
				ncl = 2;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d901      	bls.n	8007dde <create_chain+0x88>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e04f      	b.n	8007e7e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007dde:	69f9      	ldr	r1, [r7, #28]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff fdc2 	bl	800796a <get_fat>
 8007de6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00e      	beq.n	8007e0c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d003      	beq.n	8007dfc <create_chain+0xa6>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d101      	bne.n	8007e00 <create_chain+0xaa>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	e03e      	b.n	8007e7e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d1da      	bne.n	8007dbe <create_chain+0x68>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e038      	b.n	8007e7e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007e0c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e12:	69f9      	ldr	r1, [r7, #28]
 8007e14:	6938      	ldr	r0, [r7, #16]
 8007e16:	f7ff fe4f 	bl	8007ab8 <put_fat>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <create_chain+0xe2>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d006      	beq.n	8007e38 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6938      	ldr	r0, [r7, #16]
 8007e30:	f7ff fe42 	bl	8007ab8 <put_fat>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d116      	bne.n	8007e6c <create_chain+0x116>
		fs->last_clst = ncl;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	691a      	ldr	r2, [r3, #16]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	3b02      	subs	r3, #2
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d804      	bhi.n	8007e5c <create_chain+0x106>
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	1e5a      	subs	r2, r3, #1
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	791b      	ldrb	r3, [r3, #4]
 8007e60:	f043 0301 	orr.w	r3, r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	711a      	strb	r2, [r3, #4]
 8007e6a:	e007      	b.n	8007e7c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d102      	bne.n	8007e78 <create_chain+0x122>
 8007e72:	f04f 33ff 	mov.w	r3, #4294967295
 8007e76:	e000      	b.n	8007e7a <create_chain+0x124>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007e7c:	69fb      	ldr	r3, [r7, #28]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b087      	sub	sp, #28
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	0a5b      	lsrs	r3, r3, #9
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	8952      	ldrh	r2, [r2, #10]
 8007ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1d1a      	adds	r2, r3, #4
 8007eb0:	613a      	str	r2, [r7, #16]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <clmt_clust+0x3a>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e010      	b.n	8007ee2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d307      	bcc.n	8007ed8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ed6:	e7e9      	b.n	8007eac <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007ed8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	4413      	add	r3, r2
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b086      	sub	sp, #24
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f04:	d204      	bcs.n	8007f10 <dir_sdi+0x22>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007f10:	2302      	movs	r3, #2
 8007f12:	e063      	b.n	8007fdc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <dir_sdi+0x46>
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d902      	bls.n	8007f34 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f32:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10c      	bne.n	8007f54 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	095b      	lsrs	r3, r3, #5
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	8912      	ldrh	r2, [r2, #8]
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d301      	bcc.n	8007f4a <dir_sdi+0x5c>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e048      	b.n	8007fdc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	61da      	str	r2, [r3, #28]
 8007f52:	e029      	b.n	8007fa8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	895b      	ldrh	r3, [r3, #10]
 8007f58:	025b      	lsls	r3, r3, #9
 8007f5a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f5c:	e019      	b.n	8007f92 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6979      	ldr	r1, [r7, #20]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff fd01 	bl	800796a <get_fat>
 8007f68:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f70:	d101      	bne.n	8007f76 <dir_sdi+0x88>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e032      	b.n	8007fdc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d904      	bls.n	8007f86 <dir_sdi+0x98>
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d301      	bcc.n	8007f8a <dir_sdi+0x9c>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e028      	b.n	8007fdc <dir_sdi+0xee>
			ofs -= csz;
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d2e1      	bcs.n	8007f5e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007f9a:	6979      	ldr	r1, [r7, #20]
 8007f9c:	6938      	ldr	r0, [r7, #16]
 8007f9e:	f7ff fcc5 	bl	800792c <clust2sect>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <dir_sdi+0xcc>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e010      	b.n	8007fdc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	69da      	ldr	r2, [r3, #28]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	0a5b      	lsrs	r3, r3, #9
 8007fc2:	441a      	add	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd4:	441a      	add	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	3320      	adds	r3, #32
 8007ffa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <dir_next+0x28>
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800800a:	d301      	bcc.n	8008010 <dir_next+0x2c>
 800800c:	2304      	movs	r3, #4
 800800e:	e0aa      	b.n	8008166 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008016:	2b00      	cmp	r3, #0
 8008018:	f040 8098 	bne.w	800814c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10b      	bne.n	8008046 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	095b      	lsrs	r3, r3, #5
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	8912      	ldrh	r2, [r2, #8]
 8008036:	4293      	cmp	r3, r2
 8008038:	f0c0 8088 	bcc.w	800814c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	61da      	str	r2, [r3, #28]
 8008042:	2304      	movs	r3, #4
 8008044:	e08f      	b.n	8008166 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	0a5b      	lsrs	r3, r3, #9
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	8952      	ldrh	r2, [r2, #10]
 800804e:	3a01      	subs	r2, #1
 8008050:	4013      	ands	r3, r2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d17a      	bne.n	800814c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	4619      	mov	r1, r3
 800805e:	4610      	mov	r0, r2
 8008060:	f7ff fc83 	bl	800796a <get_fat>
 8008064:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d801      	bhi.n	8008070 <dir_next+0x8c>
 800806c:	2302      	movs	r3, #2
 800806e:	e07a      	b.n	8008166 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d101      	bne.n	800807c <dir_next+0x98>
 8008078:	2301      	movs	r3, #1
 800807a:	e074      	b.n	8008166 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	429a      	cmp	r2, r3
 8008084:	d358      	bcc.n	8008138 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	61da      	str	r2, [r3, #28]
 8008092:	2304      	movs	r3, #4
 8008094:	e067      	b.n	8008166 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	f7ff fe59 	bl	8007d56 <create_chain>
 80080a4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <dir_next+0xcc>
 80080ac:	2307      	movs	r3, #7
 80080ae:	e05a      	b.n	8008166 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d101      	bne.n	80080ba <dir_next+0xd6>
 80080b6:	2302      	movs	r3, #2
 80080b8:	e055      	b.n	8008166 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c0:	d101      	bne.n	80080c6 <dir_next+0xe2>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e04f      	b.n	8008166 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff fb50 	bl	800776c <sync_window>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <dir_next+0xf2>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e047      	b.n	8008166 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3330      	adds	r3, #48	@ 0x30
 80080da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080de:	2100      	movs	r1, #0
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff f979 	bl	80073d8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80080e6:	2300      	movs	r3, #0
 80080e8:	613b      	str	r3, [r7, #16]
 80080ea:	6979      	ldr	r1, [r7, #20]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7ff fc1d 	bl	800792c <clust2sect>
 80080f2:	4602      	mov	r2, r0
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80080f8:	e012      	b.n	8008120 <dir_next+0x13c>
						fs->wflag = 1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2201      	movs	r2, #1
 80080fe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7ff fb33 	bl	800776c <sync_window>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <dir_next+0x12c>
 800810c:	2301      	movs	r3, #1
 800810e:	e02a      	b.n	8008166 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	3301      	adds	r3, #1
 8008114:	613b      	str	r3, [r7, #16]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	895b      	ldrh	r3, [r3, #10]
 8008124:	461a      	mov	r2, r3
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	4293      	cmp	r3, r2
 800812a:	d3e6      	bcc.n	80080fa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	1ad2      	subs	r2, r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800813e:	6979      	ldr	r1, [r7, #20]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7ff fbf3 	bl	800792c <clust2sect>
 8008146:	4602      	mov	r2, r0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815e:	441a      	add	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b086      	sub	sp, #24
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800817e:	2100      	movs	r1, #0
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff feb4 	bl	8007eee <dir_sdi>
 8008186:	4603      	mov	r3, r0
 8008188:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800818a:	7dfb      	ldrb	r3, [r7, #23]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d12b      	bne.n	80081e8 <dir_alloc+0x7a>
		n = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	4619      	mov	r1, r3
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fb2a 	bl	80077f4 <move_window>
 80081a0:	4603      	mov	r3, r0
 80081a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d11d      	bne.n	80081e6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2be5      	cmp	r3, #229	@ 0xe5
 80081b2:	d004      	beq.n	80081be <dir_alloc+0x50>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d107      	bne.n	80081ce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3301      	adds	r3, #1
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d102      	bne.n	80081d2 <dir_alloc+0x64>
 80081cc:	e00c      	b.n	80081e8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80081ce:	2300      	movs	r3, #0
 80081d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80081d2:	2101      	movs	r1, #1
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff ff05 	bl	8007fe4 <dir_next>
 80081da:	4603      	mov	r3, r0
 80081dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0d7      	beq.n	8008194 <dir_alloc+0x26>
 80081e4:	e000      	b.n	80081e8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80081e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d101      	bne.n	80081f2 <dir_alloc+0x84>
 80081ee:	2307      	movs	r3, #7
 80081f0:	75fb      	strb	r3, [r7, #23]
	return res;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	331a      	adds	r3, #26
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff f840 	bl	8007290 <ld_word>
 8008210:	4603      	mov	r3, r0
 8008212:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b03      	cmp	r3, #3
 800821a:	d109      	bne.n	8008230 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	3314      	adds	r3, #20
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff f835 	bl	8007290 <ld_word>
 8008226:	4603      	mov	r3, r0
 8008228:	041b      	lsls	r3, r3, #16
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008230:	68fb      	ldr	r3, [r7, #12]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	331a      	adds	r3, #26
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	b292      	uxth	r2, r2
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff f859 	bl	8007308 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b03      	cmp	r3, #3
 800825c:	d109      	bne.n	8008272 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f103 0214 	add.w	r2, r3, #20
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	0c1b      	lsrs	r3, r3, #16
 8008268:	b29b      	uxth	r3, r3
 800826a:	4619      	mov	r1, r3
 800826c:	4610      	mov	r0, r2
 800826e:	f7ff f84b 	bl	8007308 <st_word>
	}
}
 8008272:	bf00      	nop
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b086      	sub	sp, #24
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008284:	2304      	movs	r3, #4
 8008286:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800828e:	e03c      	b.n	800830a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	4619      	mov	r1, r3
 8008296:	6938      	ldr	r0, [r7, #16]
 8008298:	f7ff faac 	bl	80077f4 <move_window>
 800829c:	4603      	mov	r3, r0
 800829e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d136      	bne.n	8008314 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d102      	bne.n	80082ba <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80082b4:	2304      	movs	r3, #4
 80082b6:	75fb      	strb	r3, [r7, #23]
 80082b8:	e031      	b.n	800831e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	330b      	adds	r3, #11
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082c6:	73bb      	strb	r3, [r7, #14]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7bba      	ldrb	r2, [r7, #14]
 80082cc:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	2be5      	cmp	r3, #229	@ 0xe5
 80082d2:	d011      	beq.n	80082f8 <dir_read+0x7e>
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80082d8:	d00e      	beq.n	80082f8 <dir_read+0x7e>
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b0f      	cmp	r3, #15
 80082de:	d00b      	beq.n	80082f8 <dir_read+0x7e>
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	f023 0320 	bic.w	r3, r3, #32
 80082e6:	2b08      	cmp	r3, #8
 80082e8:	bf0c      	ite	eq
 80082ea:	2301      	moveq	r3, #1
 80082ec:	2300      	movne	r3, #0
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	461a      	mov	r2, r3
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00f      	beq.n	8008318 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80082f8:	2100      	movs	r1, #0
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff fe72 	bl	8007fe4 <dir_next>
 8008300:	4603      	mov	r3, r0
 8008302:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d108      	bne.n	800831c <dir_read+0xa2>
	while (dp->sect) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1be      	bne.n	8008290 <dir_read+0x16>
 8008312:	e004      	b.n	800831e <dir_read+0xa4>
		if (res != FR_OK) break;
 8008314:	bf00      	nop
 8008316:	e002      	b.n	800831e <dir_read+0xa4>
				break;
 8008318:	bf00      	nop
 800831a:	e000      	b.n	800831e <dir_read+0xa4>
		if (res != FR_OK) break;
 800831c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <dir_read+0xb0>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	61da      	str	r2, [r3, #28]
	return res;
 800832a:	7dfb      	ldrb	r3, [r7, #23]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008342:	2100      	movs	r1, #0
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff fdd2 	bl	8007eee <dir_sdi>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <dir_find+0x24>
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	e03e      	b.n	80083d6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	4619      	mov	r1, r3
 800835e:	6938      	ldr	r0, [r7, #16]
 8008360:	f7ff fa48 	bl	80077f4 <move_window>
 8008364:	4603      	mov	r3, r0
 8008366:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d12f      	bne.n	80083ce <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d102      	bne.n	8008382 <dir_find+0x4e>
 800837c:	2304      	movs	r3, #4
 800837e:	75fb      	strb	r3, [r7, #23]
 8008380:	e028      	b.n	80083d4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	330b      	adds	r3, #11
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800838e:	b2da      	uxtb	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	330b      	adds	r3, #11
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f003 0308 	and.w	r3, r3, #8
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <dir_find+0x86>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a18      	ldr	r0, [r3, #32]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3324      	adds	r3, #36	@ 0x24
 80083ac:	220b      	movs	r2, #11
 80083ae:	4619      	mov	r1, r3
 80083b0:	f7ff f82d 	bl	800740e <mem_cmp>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80083ba:	2100      	movs	r1, #0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff fe11 	bl	8007fe4 <dir_next>
 80083c2:	4603      	mov	r3, r0
 80083c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0c5      	beq.n	8008358 <dir_find+0x24>
 80083cc:	e002      	b.n	80083d4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80083ce:	bf00      	nop
 80083d0:	e000      	b.n	80083d4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80083d2:	bf00      	nop

	return res;
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80083ec:	2101      	movs	r1, #1
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff febd 	bl	800816e <dir_alloc>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d11c      	bne.n	8008438 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	4619      	mov	r1, r3
 8008404:	68b8      	ldr	r0, [r7, #8]
 8008406:	f7ff f9f5 	bl	80077f4 <move_window>
 800840a:	4603      	mov	r3, r0
 800840c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d111      	bne.n	8008438 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	2220      	movs	r2, #32
 800841a:	2100      	movs	r1, #0
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe ffdb 	bl	80073d8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a18      	ldr	r0, [r3, #32]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3324      	adds	r3, #36	@ 0x24
 800842a:	220b      	movs	r2, #11
 800842c:	4619      	mov	r1, r3
 800842e:	f7fe ffb2 	bl	8007396 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2201      	movs	r2, #1
 8008436:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008438:	7bfb      	ldrb	r3, [r7, #15]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	4619      	mov	r1, r3
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff f9cc 	bl	80077f4 <move_window>
 800845c:	4603      	mov	r3, r0
 800845e:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d106      	bne.n	8008474 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	22e5      	movs	r2, #229	@ 0xe5
 800846c:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8008474:	7afb      	ldrb	r3, [r7, #11]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3324      	adds	r3, #36	@ 0x24
 8008494:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008496:	220b      	movs	r2, #11
 8008498:	2120      	movs	r1, #32
 800849a:	68b8      	ldr	r0, [r7, #8]
 800849c:	f7fe ff9c 	bl	80073d8 <mem_set>
	si = i = 0; ni = 8;
 80084a0:	2300      	movs	r3, #0
 80084a2:	613b      	str	r3, [r7, #16]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	61fb      	str	r3, [r7, #28]
 80084a8:	2308      	movs	r3, #8
 80084aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	61fa      	str	r2, [r7, #28]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80084ba:	7efb      	ldrb	r3, [r7, #27]
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d94e      	bls.n	800855e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80084c0:	7efb      	ldrb	r3, [r7, #27]
 80084c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80084c4:	d006      	beq.n	80084d4 <create_name+0x54>
 80084c6:	7efb      	ldrb	r3, [r7, #27]
 80084c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80084ca:	d110      	bne.n	80084ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80084cc:	e002      	b.n	80084d4 <create_name+0x54>
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	3301      	adds	r3, #1
 80084d2:	61fb      	str	r3, [r7, #28]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	4413      	add	r3, r2
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80084de:	d0f6      	beq.n	80084ce <create_name+0x4e>
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80084ea:	d0f0      	beq.n	80084ce <create_name+0x4e>
			break;
 80084ec:	e038      	b.n	8008560 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80084ee:	7efb      	ldrb	r3, [r7, #27]
 80084f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80084f2:	d003      	beq.n	80084fc <create_name+0x7c>
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d30c      	bcc.n	8008516 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2b0b      	cmp	r3, #11
 8008500:	d002      	beq.n	8008508 <create_name+0x88>
 8008502:	7efb      	ldrb	r3, [r7, #27]
 8008504:	2b2e      	cmp	r3, #46	@ 0x2e
 8008506:	d001      	beq.n	800850c <create_name+0x8c>
 8008508:	2306      	movs	r3, #6
 800850a:	e044      	b.n	8008596 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800850c:	2308      	movs	r3, #8
 800850e:	613b      	str	r3, [r7, #16]
 8008510:	230b      	movs	r3, #11
 8008512:	617b      	str	r3, [r7, #20]
			continue;
 8008514:	e022      	b.n	800855c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008516:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800851a:	2b00      	cmp	r3, #0
 800851c:	da04      	bge.n	8008528 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800851e:	7efb      	ldrb	r3, [r7, #27]
 8008520:	3b80      	subs	r3, #128	@ 0x80
 8008522:	4a1f      	ldr	r2, [pc, #124]	@ (80085a0 <create_name+0x120>)
 8008524:	5cd3      	ldrb	r3, [r2, r3]
 8008526:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008528:	7efb      	ldrb	r3, [r7, #27]
 800852a:	4619      	mov	r1, r3
 800852c:	481d      	ldr	r0, [pc, #116]	@ (80085a4 <create_name+0x124>)
 800852e:	f7fe ff95 	bl	800745c <chk_chr>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <create_name+0xbc>
 8008538:	2306      	movs	r3, #6
 800853a:	e02c      	b.n	8008596 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800853c:	7efb      	ldrb	r3, [r7, #27]
 800853e:	2b60      	cmp	r3, #96	@ 0x60
 8008540:	d905      	bls.n	800854e <create_name+0xce>
 8008542:	7efb      	ldrb	r3, [r7, #27]
 8008544:	2b7a      	cmp	r3, #122	@ 0x7a
 8008546:	d802      	bhi.n	800854e <create_name+0xce>
 8008548:	7efb      	ldrb	r3, [r7, #27]
 800854a:	3b20      	subs	r3, #32
 800854c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	613a      	str	r2, [r7, #16]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	4413      	add	r3, r2
 8008558:	7efa      	ldrb	r2, [r7, #27]
 800855a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800855c:	e7a6      	b.n	80084ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800855e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	441a      	add	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <create_name+0xf4>
 8008570:	2306      	movs	r3, #6
 8008572:	e010      	b.n	8008596 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2be5      	cmp	r3, #229	@ 0xe5
 800857a:	d102      	bne.n	8008582 <create_name+0x102>
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2205      	movs	r2, #5
 8008580:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008582:	7efb      	ldrb	r3, [r7, #27]
 8008584:	2b20      	cmp	r3, #32
 8008586:	d801      	bhi.n	800858c <create_name+0x10c>
 8008588:	2204      	movs	r2, #4
 800858a:	e000      	b.n	800858e <create_name+0x10e>
 800858c:	2200      	movs	r2, #0
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	330b      	adds	r3, #11
 8008592:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008594:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008596:	4618      	mov	r0, r3
 8008598:	3720      	adds	r7, #32
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	0800a134 	.word	0x0800a134
 80085a4:	0800a0b8 	.word	0x0800a0b8

080085a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80085bc:	e002      	b.n	80085c4 <follow_path+0x1c>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	3301      	adds	r3, #1
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80085ca:	d0f8      	beq.n	80085be <follow_path+0x16>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80085d2:	d0f4      	beq.n	80085be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2200      	movs	r2, #0
 80085d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b1f      	cmp	r3, #31
 80085e0:	d80a      	bhi.n	80085f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2280      	movs	r2, #128	@ 0x80
 80085e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80085ea:	2100      	movs	r1, #0
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff fc7e 	bl	8007eee <dir_sdi>
 80085f2:	4603      	mov	r3, r0
 80085f4:	75fb      	strb	r3, [r7, #23]
 80085f6:	e043      	b.n	8008680 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80085f8:	463b      	mov	r3, r7
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff ff3f 	bl	8008480 <create_name>
 8008602:	4603      	mov	r3, r0
 8008604:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008606:	7dfb      	ldrb	r3, [r7, #23]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d134      	bne.n	8008676 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff fe91 	bl	8008334 <dir_find>
 8008612:	4603      	mov	r3, r0
 8008614:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800861c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008624:	7dfb      	ldrb	r3, [r7, #23]
 8008626:	2b04      	cmp	r3, #4
 8008628:	d127      	bne.n	800867a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800862a:	7afb      	ldrb	r3, [r7, #11]
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d122      	bne.n	800867a <follow_path+0xd2>
 8008634:	2305      	movs	r3, #5
 8008636:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008638:	e01f      	b.n	800867a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800863a:	7afb      	ldrb	r3, [r7, #11]
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d11c      	bne.n	800867e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	799b      	ldrb	r3, [r3, #6]
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d102      	bne.n	8008656 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008650:	2305      	movs	r3, #5
 8008652:	75fb      	strb	r3, [r7, #23]
 8008654:	e014      	b.n	8008680 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008664:	4413      	add	r3, r2
 8008666:	4619      	mov	r1, r3
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff fdc7 	bl	80081fc <ld_clust>
 800866e:	4602      	mov	r2, r0
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008674:	e7c0      	b.n	80085f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008676:	bf00      	nop
 8008678:	e002      	b.n	8008680 <follow_path+0xd8>
				break;
 800867a:	bf00      	nop
 800867c:	e000      	b.n	8008680 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800867e:	bf00      	nop
			}
		}
	}

	return res;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800868a:	b480      	push	{r7}
 800868c:	b087      	sub	sp, #28
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008692:	f04f 33ff 	mov.w	r3, #4294967295
 8008696:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d031      	beq.n	8008704 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	e002      	b.n	80086ae <get_ldnumber+0x24>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	3301      	adds	r3, #1
 80086ac:	617b      	str	r3, [r7, #20]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	2b20      	cmp	r3, #32
 80086b4:	d903      	bls.n	80086be <get_ldnumber+0x34>
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80086bc:	d1f4      	bne.n	80086a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	2b3a      	cmp	r3, #58	@ 0x3a
 80086c4:	d11c      	bne.n	8008700 <get_ldnumber+0x76>
			tp = *path;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	60fa      	str	r2, [r7, #12]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	3b30      	subs	r3, #48	@ 0x30
 80086d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b09      	cmp	r3, #9
 80086dc:	d80e      	bhi.n	80086fc <get_ldnumber+0x72>
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d10a      	bne.n	80086fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d107      	bne.n	80086fc <get_ldnumber+0x72>
					vol = (int)i;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	3301      	adds	r3, #1
 80086f4:	617b      	str	r3, [r7, #20]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	e002      	b.n	8008706 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008700:	2300      	movs	r3, #0
 8008702:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008704:	693b      	ldr	r3, [r7, #16]
}
 8008706:	4618      	mov	r0, r3
 8008708:	371c      	adds	r7, #28
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
	...

08008714 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	70da      	strb	r2, [r3, #3]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f04f 32ff 	mov.w	r2, #4294967295
 800872a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7ff f860 	bl	80077f4 <move_window>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <check_fs+0x2a>
 800873a:	2304      	movs	r3, #4
 800873c:	e038      	b.n	80087b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3330      	adds	r3, #48	@ 0x30
 8008742:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fda2 	bl	8007290 <ld_word>
 800874c:	4603      	mov	r3, r0
 800874e:	461a      	mov	r2, r3
 8008750:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008754:	429a      	cmp	r2, r3
 8008756:	d001      	beq.n	800875c <check_fs+0x48>
 8008758:	2303      	movs	r3, #3
 800875a:	e029      	b.n	80087b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008762:	2be9      	cmp	r3, #233	@ 0xe9
 8008764:	d009      	beq.n	800877a <check_fs+0x66>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800876c:	2beb      	cmp	r3, #235	@ 0xeb
 800876e:	d11e      	bne.n	80087ae <check_fs+0x9a>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008776:	2b90      	cmp	r3, #144	@ 0x90
 8008778:	d119      	bne.n	80087ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3330      	adds	r3, #48	@ 0x30
 800877e:	3336      	adds	r3, #54	@ 0x36
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe fd9e 	bl	80072c2 <ld_dword>
 8008786:	4603      	mov	r3, r0
 8008788:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800878c:	4a0a      	ldr	r2, [pc, #40]	@ (80087b8 <check_fs+0xa4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d101      	bne.n	8008796 <check_fs+0x82>
 8008792:	2300      	movs	r3, #0
 8008794:	e00c      	b.n	80087b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3330      	adds	r3, #48	@ 0x30
 800879a:	3352      	adds	r3, #82	@ 0x52
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fd90 	bl	80072c2 <ld_dword>
 80087a2:	4603      	mov	r3, r0
 80087a4:	4a05      	ldr	r2, [pc, #20]	@ (80087bc <check_fs+0xa8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d101      	bne.n	80087ae <check_fs+0x9a>
 80087aa:	2300      	movs	r3, #0
 80087ac:	e000      	b.n	80087b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80087ae:	2302      	movs	r3, #2
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	00544146 	.word	0x00544146
 80087bc:	33544146 	.word	0x33544146

080087c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b096      	sub	sp, #88	@ 0x58
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	4613      	mov	r3, r2
 80087cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff ff58 	bl	800868a <get_ldnumber>
 80087da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80087dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da01      	bge.n	80087e6 <find_volume+0x26>
 80087e2:	230b      	movs	r3, #11
 80087e4:	e22d      	b.n	8008c42 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80087e6:	4aa1      	ldr	r2, [pc, #644]	@ (8008a6c <find_volume+0x2ac>)
 80087e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80087f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <find_volume+0x3a>
 80087f6:	230c      	movs	r3, #12
 80087f8:	e223      	b.n	8008c42 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	f023 0301 	bic.w	r3, r3, #1
 8008806:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01a      	beq.n	8008846 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008812:	785b      	ldrb	r3, [r3, #1]
 8008814:	4618      	mov	r0, r3
 8008816:	f7fe fc9b 	bl	8007150 <disk_status>
 800881a:	4603      	mov	r3, r0
 800881c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008820:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10c      	bne.n	8008846 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800882c:	79fb      	ldrb	r3, [r7, #7]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d007      	beq.n	8008842 <find_volume+0x82>
 8008832:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800883e:	230a      	movs	r3, #10
 8008840:	e1ff      	b.n	8008c42 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008842:	2300      	movs	r3, #0
 8008844:	e1fd      	b.n	8008c42 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008848:	2200      	movs	r2, #0
 800884a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800884c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800884e:	b2da      	uxtb	r2, r3
 8008850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008852:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe fc93 	bl	8007184 <disk_initialize>
 800885e:	4603      	mov	r3, r0
 8008860:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008864:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008870:	2303      	movs	r3, #3
 8008872:	e1e6      	b.n	8008c42 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d007      	beq.n	800888a <find_volume+0xca>
 800887a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008886:	230a      	movs	r3, #10
 8008888:	e1db      	b.n	8008c42 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800888e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008890:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008892:	f7ff ff3f 	bl	8008714 <check_fs>
 8008896:	4603      	mov	r3, r0
 8008898:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800889c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d149      	bne.n	8008938 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80088a4:	2300      	movs	r3, #0
 80088a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80088a8:	e01e      	b.n	80088e8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80088aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80088b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80088b8:	4413      	add	r3, r2
 80088ba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	3304      	adds	r3, #4
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d006      	beq.n	80088d4 <find_volume+0x114>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	3308      	adds	r3, #8
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fe fcf9 	bl	80072c2 <ld_dword>
 80088d0:	4602      	mov	r2, r0
 80088d2:	e000      	b.n	80088d6 <find_volume+0x116>
 80088d4:	2200      	movs	r2, #0
 80088d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	3358      	adds	r3, #88	@ 0x58
 80088dc:	443b      	add	r3, r7
 80088de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80088e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088e4:	3301      	adds	r3, #1
 80088e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80088e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d9dd      	bls.n	80088aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80088ee:	2300      	movs	r3, #0
 80088f0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80088f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <find_volume+0x13e>
 80088f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088fa:	3b01      	subs	r3, #1
 80088fc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80088fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	3358      	adds	r3, #88	@ 0x58
 8008904:	443b      	add	r3, r7
 8008906:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800890a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800890c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <find_volume+0x15e>
 8008912:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008914:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008916:	f7ff fefd 	bl	8008714 <check_fs>
 800891a:	4603      	mov	r3, r0
 800891c:	e000      	b.n	8008920 <find_volume+0x160>
 800891e:	2303      	movs	r3, #3
 8008920:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008924:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008928:	2b01      	cmp	r3, #1
 800892a:	d905      	bls.n	8008938 <find_volume+0x178>
 800892c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800892e:	3301      	adds	r3, #1
 8008930:	643b      	str	r3, [r7, #64]	@ 0x40
 8008932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008934:	2b03      	cmp	r3, #3
 8008936:	d9e2      	bls.n	80088fe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008938:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800893c:	2b04      	cmp	r3, #4
 800893e:	d101      	bne.n	8008944 <find_volume+0x184>
 8008940:	2301      	movs	r3, #1
 8008942:	e17e      	b.n	8008c42 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008944:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008948:	2b01      	cmp	r3, #1
 800894a:	d901      	bls.n	8008950 <find_volume+0x190>
 800894c:	230d      	movs	r3, #13
 800894e:	e178      	b.n	8008c42 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008952:	3330      	adds	r3, #48	@ 0x30
 8008954:	330b      	adds	r3, #11
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fc9a 	bl	8007290 <ld_word>
 800895c:	4603      	mov	r3, r0
 800895e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008962:	d001      	beq.n	8008968 <find_volume+0x1a8>
 8008964:	230d      	movs	r3, #13
 8008966:	e16c      	b.n	8008c42 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896a:	3330      	adds	r3, #48	@ 0x30
 800896c:	3316      	adds	r3, #22
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe fc8e 	bl	8007290 <ld_word>
 8008974:	4603      	mov	r3, r0
 8008976:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d106      	bne.n	800898c <find_volume+0x1cc>
 800897e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008980:	3330      	adds	r3, #48	@ 0x30
 8008982:	3324      	adds	r3, #36	@ 0x24
 8008984:	4618      	mov	r0, r3
 8008986:	f7fe fc9c 	bl	80072c2 <ld_dword>
 800898a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800898c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008990:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800899c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899e:	789b      	ldrb	r3, [r3, #2]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d005      	beq.n	80089b0 <find_volume+0x1f0>
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	789b      	ldrb	r3, [r3, #2]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d001      	beq.n	80089b0 <find_volume+0x1f0>
 80089ac:	230d      	movs	r3, #13
 80089ae:	e148      	b.n	8008c42 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80089b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b2:	789b      	ldrb	r3, [r3, #2]
 80089b4:	461a      	mov	r2, r3
 80089b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089b8:	fb02 f303 	mul.w	r3, r2, r3
 80089bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80089be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089c4:	461a      	mov	r2, r3
 80089c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80089ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089cc:	895b      	ldrh	r3, [r3, #10]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d008      	beq.n	80089e4 <find_volume+0x224>
 80089d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d4:	895b      	ldrh	r3, [r3, #10]
 80089d6:	461a      	mov	r2, r3
 80089d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089da:	895b      	ldrh	r3, [r3, #10]
 80089dc:	3b01      	subs	r3, #1
 80089de:	4013      	ands	r3, r2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <find_volume+0x228>
 80089e4:	230d      	movs	r3, #13
 80089e6:	e12c      	b.n	8008c42 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80089e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ea:	3330      	adds	r3, #48	@ 0x30
 80089ec:	3311      	adds	r3, #17
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fc4e 	bl	8007290 <ld_word>
 80089f4:	4603      	mov	r3, r0
 80089f6:	461a      	mov	r2, r3
 80089f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80089fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fe:	891b      	ldrh	r3, [r3, #8]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <find_volume+0x24e>
 8008a0a:	230d      	movs	r3, #13
 8008a0c:	e119      	b.n	8008c42 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a10:	3330      	adds	r3, #48	@ 0x30
 8008a12:	3313      	adds	r3, #19
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fe fc3b 	bl	8007290 <ld_word>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d106      	bne.n	8008a32 <find_volume+0x272>
 8008a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a26:	3330      	adds	r3, #48	@ 0x30
 8008a28:	3320      	adds	r3, #32
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fc49 	bl	80072c2 <ld_dword>
 8008a30:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a34:	3330      	adds	r3, #48	@ 0x30
 8008a36:	330e      	adds	r3, #14
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fc29 	bl	8007290 <ld_word>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008a42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <find_volume+0x28c>
 8008a48:	230d      	movs	r3, #13
 8008a4a:	e0fa      	b.n	8008c42 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008a4c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a50:	4413      	add	r3, r2
 8008a52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a54:	8912      	ldrh	r2, [r2, #8]
 8008a56:	0912      	lsrs	r2, r2, #4
 8008a58:	b292      	uxth	r2, r2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008a5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d204      	bcs.n	8008a70 <find_volume+0x2b0>
 8008a66:	230d      	movs	r3, #13
 8008a68:	e0eb      	b.n	8008c42 <find_volume+0x482>
 8008a6a:	bf00      	nop
 8008a6c:	240015f4 	.word	0x240015f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a78:	8952      	ldrh	r2, [r2, #10]
 8008a7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a7e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <find_volume+0x2ca>
 8008a86:	230d      	movs	r3, #13
 8008a88:	e0db      	b.n	8008c42 <find_volume+0x482>
		fmt = FS_FAT32;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d802      	bhi.n	8008aa0 <find_volume+0x2e0>
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d802      	bhi.n	8008ab0 <find_volume+0x2f0>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab2:	1c9a      	adds	r2, r3, #2
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008abc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008abe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ac2:	441a      	add	r2, r3
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008ac8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008acc:	441a      	add	r2, r3
 8008ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8008ad2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d11e      	bne.n	8008b18 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	3330      	adds	r3, #48	@ 0x30
 8008ade:	332a      	adds	r3, #42	@ 0x2a
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe fbd5 	bl	8007290 <ld_word>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <find_volume+0x330>
 8008aec:	230d      	movs	r3, #13
 8008aee:	e0a8      	b.n	8008c42 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af2:	891b      	ldrh	r3, [r3, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <find_volume+0x33c>
 8008af8:	230d      	movs	r3, #13
 8008afa:	e0a2      	b.n	8008c42 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	3330      	adds	r3, #48	@ 0x30
 8008b00:	332c      	adds	r3, #44	@ 0x2c
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe fbdd 	bl	80072c2 <ld_dword>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b16:	e01f      	b.n	8008b58 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1a:	891b      	ldrh	r3, [r3, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <find_volume+0x364>
 8008b20:	230d      	movs	r3, #13
 8008b22:	e08e      	b.n	8008c42 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b26:	6a1a      	ldr	r2, [r3, #32]
 8008b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b2a:	441a      	add	r2, r3
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008b30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d103      	bne.n	8008b40 <find_volume+0x380>
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	e00a      	b.n	8008b56 <find_volume+0x396>
 8008b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b42:	695a      	ldr	r2, [r3, #20]
 8008b44:	4613      	mov	r3, r2
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	4413      	add	r3, r2
 8008b4a:	085a      	lsrs	r2, r3, #1
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008b56:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	699a      	ldr	r2, [r3, #24]
 8008b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b5e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008b62:	0a5b      	lsrs	r3, r3, #9
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d201      	bcs.n	8008b6c <find_volume+0x3ac>
 8008b68:	230d      	movs	r3, #13
 8008b6a:	e06a      	b.n	8008c42 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b72:	611a      	str	r2, [r3, #16]
 8008b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b76:	691a      	ldr	r2, [r3, #16]
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7e:	2280      	movs	r2, #128	@ 0x80
 8008b80:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008b82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d149      	bne.n	8008c1e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8c:	3330      	adds	r3, #48	@ 0x30
 8008b8e:	3330      	adds	r3, #48	@ 0x30
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe fb7d 	bl	8007290 <ld_word>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d140      	bne.n	8008c1e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ba4:	f7fe fe26 	bl	80077f4 <move_window>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d137      	bne.n	8008c1e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb6:	3330      	adds	r3, #48	@ 0x30
 8008bb8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe fb67 	bl	8007290 <ld_word>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d127      	bne.n	8008c1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	3330      	adds	r3, #48	@ 0x30
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe fb75 	bl	80072c2 <ld_dword>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	4a1c      	ldr	r2, [pc, #112]	@ (8008c4c <find_volume+0x48c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d11e      	bne.n	8008c1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	3330      	adds	r3, #48	@ 0x30
 8008be4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe fb6a 	bl	80072c2 <ld_dword>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	4a17      	ldr	r2, [pc, #92]	@ (8008c50 <find_volume+0x490>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d113      	bne.n	8008c1e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf8:	3330      	adds	r3, #48	@ 0x30
 8008bfa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fb5f 	bl	80072c2 <ld_dword>
 8008c04:	4602      	mov	r2, r0
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0c:	3330      	adds	r3, #48	@ 0x30
 8008c0e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fb55 	bl	80072c2 <ld_dword>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c20:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008c24:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008c26:	4b0b      	ldr	r3, [pc, #44]	@ (8008c54 <find_volume+0x494>)
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	4b09      	ldr	r3, [pc, #36]	@ (8008c54 <find_volume+0x494>)
 8008c30:	801a      	strh	r2, [r3, #0]
 8008c32:	4b08      	ldr	r3, [pc, #32]	@ (8008c54 <find_volume+0x494>)
 8008c34:	881a      	ldrh	r2, [r3, #0]
 8008c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c38:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008c3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c3c:	f7fe fd72 	bl	8007724 <clear_lock>
#endif
	return FR_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3758      	adds	r7, #88	@ 0x58
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	41615252 	.word	0x41615252
 8008c50:	61417272 	.word	0x61417272
 8008c54:	240015f8 	.word	0x240015f8

08008c58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008c62:	2309      	movs	r3, #9
 8008c64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d01c      	beq.n	8008ca6 <validate+0x4e>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d018      	beq.n	8008ca6 <validate+0x4e>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d013      	beq.n	8008ca6 <validate+0x4e>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	889a      	ldrh	r2, [r3, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	88db      	ldrh	r3, [r3, #6]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d10c      	bne.n	8008ca6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	785b      	ldrb	r3, [r3, #1]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fa5c 	bl	8007150 <disk_status>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <validate+0x4e>
			res = FR_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d102      	bne.n	8008cb2 <validate+0x5a>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	e000      	b.n	8008cb4 <validate+0x5c>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	6013      	str	r3, [r2, #0]
	return res;
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b088      	sub	sp, #32
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008cd6:	f107 0310 	add.w	r3, r7, #16
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7ff fcd5 	bl	800868a <get_ldnumber>
 8008ce0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	da01      	bge.n	8008cec <f_mount+0x28>
 8008ce8:	230b      	movs	r3, #11
 8008cea:	e02b      	b.n	8008d44 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008cec:	4a17      	ldr	r2, [pc, #92]	@ (8008d4c <f_mount+0x88>)
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cf4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008cfc:	69b8      	ldr	r0, [r7, #24]
 8008cfe:	f7fe fd11 	bl	8007724 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2200      	movs	r2, #0
 8008d06:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	490d      	ldr	r1, [pc, #52]	@ (8008d4c <f_mount+0x88>)
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <f_mount+0x66>
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d001      	beq.n	8008d2e <f_mount+0x6a>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e00a      	b.n	8008d44 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008d2e:	f107 010c 	add.w	r1, r7, #12
 8008d32:	f107 0308 	add.w	r3, r7, #8
 8008d36:	2200      	movs	r2, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff fd41 	bl	80087c0 <find_volume>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	240015f4 	.word	0x240015f4

08008d50 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b098      	sub	sp, #96	@ 0x60
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <f_open+0x18>
 8008d64:	2309      	movs	r3, #9
 8008d66:	e1a9      	b.n	80090bc <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d6e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008d70:	79fa      	ldrb	r2, [r7, #7]
 8008d72:	f107 0110 	add.w	r1, r7, #16
 8008d76:	f107 0308 	add.w	r3, r7, #8
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff fd20 	bl	80087c0 <find_volume>
 8008d80:	4603      	mov	r3, r0
 8008d82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008d86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f040 818d 	bne.w	80090aa <f_open+0x35a>
		dj.obj.fs = fs;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	f107 0314 	add.w	r3, r7, #20
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff fc03 	bl	80085a8 <follow_path>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008da8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d118      	bne.n	8008de2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008db0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008db4:	b25b      	sxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	da03      	bge.n	8008dc2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008dba:	2306      	movs	r3, #6
 8008dbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008dc0:	e00f      	b.n	8008de2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	bf8c      	ite	hi
 8008dc8:	2301      	movhi	r3, #1
 8008dca:	2300      	movls	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f107 0314 	add.w	r3, r7, #20
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fb5c 	bl	8007494 <chk_lock>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	f003 031c 	and.w	r3, r3, #28
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d07f      	beq.n	8008eec <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008dec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d017      	beq.n	8008e24 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008df4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d10e      	bne.n	8008e1a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008dfc:	f7fe fba6 	bl	800754c <enq_lock>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d006      	beq.n	8008e14 <f_open+0xc4>
 8008e06:	f107 0314 	add.w	r3, r7, #20
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fae7 	bl	80083de <dir_register>
 8008e10:	4603      	mov	r3, r0
 8008e12:	e000      	b.n	8008e16 <f_open+0xc6>
 8008e14:	2312      	movs	r3, #18
 8008e16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
 8008e1c:	f043 0308 	orr.w	r3, r3, #8
 8008e20:	71fb      	strb	r3, [r7, #7]
 8008e22:	e010      	b.n	8008e46 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008e24:	7ebb      	ldrb	r3, [r7, #26]
 8008e26:	f003 0311 	and.w	r3, r3, #17
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <f_open+0xe6>
					res = FR_DENIED;
 8008e2e:	2307      	movs	r3, #7
 8008e30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008e34:	e007      	b.n	8008e46 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <f_open+0xf6>
 8008e40:	2308      	movs	r3, #8
 8008e42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008e46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d168      	bne.n	8008f20 <f_open+0x1d0>
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	f003 0308 	and.w	r3, r3, #8
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d063      	beq.n	8008f20 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008e58:	f7fd fc0e 	bl	8006678 <get_fattime>
 8008e5c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e60:	330e      	adds	r3, #14
 8008e62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe fa6a 	bl	800733e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6c:	3316      	adds	r3, #22
 8008e6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe fa64 	bl	800733e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e78:	330b      	adds	r3, #11
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff f9b9 	bl	80081fc <ld_clust>
 8008e8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008e90:	2200      	movs	r2, #0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff f9d1 	bl	800823a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e9a:	331c      	adds	r3, #28
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fa4d 	bl	800733e <st_dword>
					fs->wflag = 1;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d037      	beq.n	8008f20 <f_open+0x1d0>
						dw = fs->winsect;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008eb6:	f107 0314 	add.w	r3, r7, #20
 8008eba:	2200      	movs	r2, #0
 8008ebc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe fee4 	bl	8007c8c <remove_chain>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008eca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d126      	bne.n	8008f20 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fe fc8c 	bl	80077f4 <move_window>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ee6:	3a01      	subs	r2, #1
 8008ee8:	60da      	str	r2, [r3, #12]
 8008eea:	e019      	b.n	8008f20 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008eec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d115      	bne.n	8008f20 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008ef4:	7ebb      	ldrb	r3, [r7, #26]
 8008ef6:	f003 0310 	and.w	r3, r3, #16
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <f_open+0x1b6>
					res = FR_NO_FILE;
 8008efe:	2304      	movs	r3, #4
 8008f00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008f04:	e00c      	b.n	8008f20 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d007      	beq.n	8008f20 <f_open+0x1d0>
 8008f10:	7ebb      	ldrb	r3, [r7, #26]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <f_open+0x1d0>
						res = FR_DENIED;
 8008f1a:	2307      	movs	r3, #7
 8008f1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008f20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d126      	bne.n	8008f76 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	f003 0308 	and.w	r3, r3, #8
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f38:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008f42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	bf8c      	ite	hi
 8008f4e:	2301      	movhi	r3, #1
 8008f50:	2300      	movls	r3, #0
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	461a      	mov	r2, r3
 8008f56:	f107 0314 	add.w	r3, r7, #20
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe fb17 	bl	8007590 <inc_lock>
 8008f62:	4602      	mov	r2, r0
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <f_open+0x226>
 8008f70:	2302      	movs	r3, #2
 8008f72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008f76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f040 8095 	bne.w	80090aa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff f938 	bl	80081fc <ld_clust>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f94:	331c      	adds	r3, #28
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe f993 	bl	80072c2 <ld_dword>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	88da      	ldrh	r2, [r3, #6]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	79fa      	ldrb	r2, [r7, #7]
 8008fba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3330      	adds	r3, #48	@ 0x30
 8008fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe f9fd 	bl	80073d8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	f003 0320 	and.w	r3, r3, #32
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d060      	beq.n	80090aa <f_open+0x35a>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d05c      	beq.n	80090aa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	895b      	ldrh	r3, [r3, #10]
 8008ffc:	025b      	lsls	r3, r3, #9
 8008ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	657b      	str	r3, [r7, #84]	@ 0x54
 800900c:	e016      	b.n	800903c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe fca9 	bl	800796a <get_fat>
 8009018:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800901a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800901c:	2b01      	cmp	r3, #1
 800901e:	d802      	bhi.n	8009026 <f_open+0x2d6>
 8009020:	2302      	movs	r3, #2
 8009022:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009026:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902c:	d102      	bne.n	8009034 <f_open+0x2e4>
 800902e:	2301      	movs	r3, #1
 8009030:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009034:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	657b      	str	r3, [r7, #84]	@ 0x54
 800903c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009040:	2b00      	cmp	r3, #0
 8009042:	d103      	bne.n	800904c <f_open+0x2fc>
 8009044:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009048:	429a      	cmp	r2, r3
 800904a:	d8e0      	bhi.n	800900e <f_open+0x2be>
				}
				fp->clust = clst;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009050:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009052:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009056:	2b00      	cmp	r3, #0
 8009058:	d127      	bne.n	80090aa <f_open+0x35a>
 800905a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800905c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009060:	2b00      	cmp	r3, #0
 8009062:	d022      	beq.n	80090aa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe fc5f 	bl	800792c <clust2sect>
 800906e:	6478      	str	r0, [r7, #68]	@ 0x44
 8009070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009072:	2b00      	cmp	r3, #0
 8009074:	d103      	bne.n	800907e <f_open+0x32e>
						res = FR_INT_ERR;
 8009076:	2302      	movs	r3, #2
 8009078:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800907c:	e015      	b.n	80090aa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800907e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009080:	0a5a      	lsrs	r2, r3, #9
 8009082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009084:	441a      	add	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	7858      	ldrb	r0, [r3, #1]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a1a      	ldr	r2, [r3, #32]
 8009098:	2301      	movs	r3, #1
 800909a:	f7fe f89b 	bl	80071d4 <disk_read>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <f_open+0x35a>
 80090a4:	2301      	movs	r3, #1
 80090a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80090aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <f_open+0x368>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80090b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3760      	adds	r7, #96	@ 0x60
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08e      	sub	sp, #56	@ 0x38
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f107 0214 	add.w	r2, r7, #20
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7ff fdb7 	bl	8008c58 <validate>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80090f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d107      	bne.n	8009108 <f_read+0x44>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	7d5b      	ldrb	r3, [r3, #21]
 80090fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009100:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <f_read+0x4a>
 8009108:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800910c:	e115      	b.n	800933a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	7d1b      	ldrb	r3, [r3, #20]
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <f_read+0x5a>
 800911a:	2307      	movs	r3, #7
 800911c:	e10d      	b.n	800933a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68da      	ldr	r2, [r3, #12]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	429a      	cmp	r2, r3
 8009130:	f240 80fe 	bls.w	8009330 <f_read+0x26c>
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009138:	e0fa      	b.n	8009330 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009142:	2b00      	cmp	r3, #0
 8009144:	f040 80c6 	bne.w	80092d4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	0a5b      	lsrs	r3, r3, #9
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	8952      	ldrh	r2, [r2, #10]
 8009152:	3a01      	subs	r2, #1
 8009154:	4013      	ands	r3, r2
 8009156:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d12f      	bne.n	80091be <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d103      	bne.n	800916e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	633b      	str	r3, [r7, #48]	@ 0x30
 800916c:	e013      	b.n	8009196 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d007      	beq.n	8009186 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	4619      	mov	r1, r3
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f7fe fe82 	bl	8007e86 <clmt_clust>
 8009182:	6338      	str	r0, [r7, #48]	@ 0x30
 8009184:	e007      	b.n	8009196 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	4619      	mov	r1, r3
 800918e:	4610      	mov	r0, r2
 8009190:	f7fe fbeb 	bl	800796a <get_fat>
 8009194:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009198:	2b01      	cmp	r3, #1
 800919a:	d804      	bhi.n	80091a6 <f_read+0xe2>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2202      	movs	r2, #2
 80091a0:	755a      	strb	r2, [r3, #21]
 80091a2:	2302      	movs	r3, #2
 80091a4:	e0c9      	b.n	800933a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ac:	d104      	bne.n	80091b8 <f_read+0xf4>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2201      	movs	r2, #1
 80091b2:	755a      	strb	r2, [r3, #21]
 80091b4:	2301      	movs	r3, #1
 80091b6:	e0c0      	b.n	800933a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	69db      	ldr	r3, [r3, #28]
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f7fe fbb0 	bl	800792c <clust2sect>
 80091cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <f_read+0x11a>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2202      	movs	r2, #2
 80091d8:	755a      	strb	r2, [r3, #21]
 80091da:	2302      	movs	r3, #2
 80091dc:	e0ad      	b.n	800933a <f_read+0x276>
			sect += csect;
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	4413      	add	r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	0a5b      	lsrs	r3, r3, #9
 80091ea:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80091ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d039      	beq.n	8009266 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f6:	4413      	add	r3, r2
 80091f8:	697a      	ldr	r2, [r7, #20]
 80091fa:	8952      	ldrh	r2, [r2, #10]
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d905      	bls.n	800920c <f_read+0x148>
					cc = fs->csize - csect;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	895b      	ldrh	r3, [r3, #10]
 8009204:	461a      	mov	r2, r3
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	7858      	ldrb	r0, [r3, #1]
 8009210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009216:	f7fd ffdd 	bl	80071d4 <disk_read>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d004      	beq.n	800922a <f_read+0x166>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2201      	movs	r2, #1
 8009224:	755a      	strb	r2, [r3, #21]
 8009226:	2301      	movs	r3, #1
 8009228:	e087      	b.n	800933a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	7d1b      	ldrb	r3, [r3, #20]
 800922e:	b25b      	sxtb	r3, r3
 8009230:	2b00      	cmp	r3, #0
 8009232:	da14      	bge.n	800925e <f_read+0x19a>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a1a      	ldr	r2, [r3, #32]
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800923e:	429a      	cmp	r2, r3
 8009240:	d90d      	bls.n	800925e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a1a      	ldr	r2, [r3, #32]
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	025b      	lsls	r3, r3, #9
 800924c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800924e:	18d0      	adds	r0, r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3330      	adds	r3, #48	@ 0x30
 8009254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009258:	4619      	mov	r1, r3
 800925a:	f7fe f89c 	bl	8007396 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800925e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009260:	025b      	lsls	r3, r3, #9
 8009262:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009264:	e050      	b.n	8009308 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	429a      	cmp	r2, r3
 800926e:	d02e      	beq.n	80092ce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	7d1b      	ldrb	r3, [r3, #20]
 8009274:	b25b      	sxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	da18      	bge.n	80092ac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	7858      	ldrb	r0, [r3, #1]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6a1a      	ldr	r2, [r3, #32]
 8009288:	2301      	movs	r3, #1
 800928a:	f7fd ffc3 	bl	8007214 <disk_write>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d004      	beq.n	800929e <f_read+0x1da>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2201      	movs	r2, #1
 8009298:	755a      	strb	r2, [r3, #21]
 800929a:	2301      	movs	r3, #1
 800929c:	e04d      	b.n	800933a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	7d1b      	ldrb	r3, [r3, #20]
 80092a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	7858      	ldrb	r0, [r3, #1]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80092b6:	2301      	movs	r3, #1
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	f7fd ff8b 	bl	80071d4 <disk_read>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <f_read+0x20a>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	755a      	strb	r2, [r3, #21]
 80092ca:	2301      	movs	r3, #1
 80092cc:	e035      	b.n	800933a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092dc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80092e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80092e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d901      	bls.n	80092ee <f_read+0x22a>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fc:	4413      	add	r3, r2
 80092fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009300:	4619      	mov	r1, r3
 8009302:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009304:	f7fe f847 	bl	8007396 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800930a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930c:	4413      	add	r3, r2
 800930e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009316:	441a      	add	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	619a      	str	r2, [r3, #24]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009322:	441a      	add	r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f47f af01 	bne.w	800913a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3738      	adds	r7, #56	@ 0x38
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b086      	sub	sp, #24
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f107 0208 	add.w	r2, r7, #8
 8009350:	4611      	mov	r1, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff fc80 	bl	8008c58 <validate>
 8009358:	4603      	mov	r3, r0
 800935a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d168      	bne.n	8009434 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	7d1b      	ldrb	r3, [r3, #20]
 8009366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936a:	2b00      	cmp	r3, #0
 800936c:	d062      	beq.n	8009434 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	7d1b      	ldrb	r3, [r3, #20]
 8009372:	b25b      	sxtb	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	da15      	bge.n	80093a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	7858      	ldrb	r0, [r3, #1]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a1a      	ldr	r2, [r3, #32]
 8009386:	2301      	movs	r3, #1
 8009388:	f7fd ff44 	bl	8007214 <disk_write>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <f_sync+0x54>
 8009392:	2301      	movs	r3, #1
 8009394:	e04f      	b.n	8009436 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	7d1b      	ldrb	r3, [r3, #20]
 800939a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80093a4:	f7fd f968 	bl	8006678 <get_fattime>
 80093a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f7fe fa1e 	bl	80077f4 <move_window>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d138      	bne.n	8009434 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	330b      	adds	r3, #11
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	330b      	adds	r3, #11
 80093d2:	f042 0220 	orr.w	r2, r2, #32
 80093d6:	b2d2      	uxtb	r2, r2
 80093d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	461a      	mov	r2, r3
 80093e4:	68f9      	ldr	r1, [r7, #12]
 80093e6:	f7fe ff28 	bl	800823a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f103 021c 	add.w	r2, r3, #28
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	4619      	mov	r1, r3
 80093f6:	4610      	mov	r0, r2
 80093f8:	f7fd ffa1 	bl	800733e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3316      	adds	r3, #22
 8009400:	6939      	ldr	r1, [r7, #16]
 8009402:	4618      	mov	r0, r3
 8009404:	f7fd ff9b 	bl	800733e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3312      	adds	r3, #18
 800940c:	2100      	movs	r1, #0
 800940e:	4618      	mov	r0, r3
 8009410:	f7fd ff7a 	bl	8007308 <st_word>
					fs->wflag = 1;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2201      	movs	r2, #1
 8009418:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fa17 	bl	8007850 <sync_fs>
 8009422:	4603      	mov	r3, r0
 8009424:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	7d1b      	ldrb	r3, [r3, #20]
 800942a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800942e:	b2da      	uxtb	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009434:	7dfb      	ldrb	r3, [r7, #23]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7ff ff7b 	bl	8009342 <f_sync>
 800944c:	4603      	mov	r3, r0
 800944e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d118      	bne.n	8009488 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f107 0208 	add.w	r2, r7, #8
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff fbfa 	bl	8008c58 <validate>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10c      	bne.n	8009488 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe f91a 	bl	80076ac <dec_lock>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d102      	bne.n	8009488 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009488:	7bfb      	ldrb	r3, [r7, #15]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b090      	sub	sp, #64	@ 0x40
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f107 0208 	add.w	r2, r7, #8
 80094a2:	4611      	mov	r1, r2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7ff fbd7 	bl	8008c58 <validate>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80094b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d103      	bne.n	80094c0 <f_lseek+0x2e>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	7d5b      	ldrb	r3, [r3, #21]
 80094bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80094c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <f_lseek+0x3c>
 80094c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80094cc:	e1e6      	b.n	800989c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 80d1 	beq.w	800967a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094de:	d15a      	bne.n	8009596 <f_lseek+0x104>
			tbl = fp->cltbl;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e8:	1d1a      	adds	r2, r3, #4
 80094ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	2302      	movs	r3, #2
 80094f2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d03a      	beq.n	8009576 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009502:	613b      	str	r3, [r7, #16]
 8009504:	2300      	movs	r3, #0
 8009506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950a:	3302      	adds	r3, #2
 800950c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009514:	3301      	adds	r3, #1
 8009516:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800951c:	4618      	mov	r0, r3
 800951e:	f7fe fa24 	bl	800796a <get_fat>
 8009522:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009526:	2b01      	cmp	r3, #1
 8009528:	d804      	bhi.n	8009534 <f_lseek+0xa2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2202      	movs	r2, #2
 800952e:	755a      	strb	r2, [r3, #21]
 8009530:	2302      	movs	r3, #2
 8009532:	e1b3      	b.n	800989c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953a:	d104      	bne.n	8009546 <f_lseek+0xb4>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	755a      	strb	r2, [r3, #21]
 8009542:	2301      	movs	r3, #1
 8009544:	e1aa      	b.n	800989c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3301      	adds	r3, #1
 800954a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800954c:	429a      	cmp	r2, r3
 800954e:	d0de      	beq.n	800950e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	429a      	cmp	r2, r3
 8009556:	d809      	bhi.n	800956c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955a:	1d1a      	adds	r2, r3, #4
 800955c:	627a      	str	r2, [r7, #36]	@ 0x24
 800955e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009564:	1d1a      	adds	r2, r3, #4
 8009566:	627a      	str	r2, [r7, #36]	@ 0x24
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009572:	429a      	cmp	r2, r3
 8009574:	d3c4      	bcc.n	8009500 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800957c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800957e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	429a      	cmp	r2, r3
 8009584:	d803      	bhi.n	800958e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	e184      	b.n	8009898 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800958e:	2311      	movs	r3, #17
 8009590:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009594:	e180      	b.n	8009898 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	429a      	cmp	r2, r3
 800959e:	d902      	bls.n	80095a6 <f_lseek+0x114>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 8172 	beq.w	8009898 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7fe fc63 	bl	8007e86 <clmt_clust>
 80095c0:	4602      	mov	r2, r0
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	4619      	mov	r1, r3
 80095ce:	4610      	mov	r0, r2
 80095d0:	f7fe f9ac 	bl	800792c <clust2sect>
 80095d4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d104      	bne.n	80095e6 <f_lseek+0x154>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	755a      	strb	r2, [r3, #21]
 80095e2:	2302      	movs	r3, #2
 80095e4:	e15a      	b.n	800989c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	0a5b      	lsrs	r3, r3, #9
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	8952      	ldrh	r2, [r2, #10]
 80095f0:	3a01      	subs	r2, #1
 80095f2:	4013      	ands	r3, r2
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	4413      	add	r3, r2
 80095f8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 8148 	beq.w	8009898 <f_lseek+0x406>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	429a      	cmp	r2, r3
 8009610:	f000 8142 	beq.w	8009898 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	7d1b      	ldrb	r3, [r3, #20]
 8009618:	b25b      	sxtb	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	da18      	bge.n	8009650 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	7858      	ldrb	r0, [r3, #1]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a1a      	ldr	r2, [r3, #32]
 800962c:	2301      	movs	r3, #1
 800962e:	f7fd fdf1 	bl	8007214 <disk_write>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <f_lseek+0x1b0>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	755a      	strb	r2, [r3, #21]
 800963e:	2301      	movs	r3, #1
 8009640:	e12c      	b.n	800989c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	7d1b      	ldrb	r3, [r3, #20]
 8009646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800964a:	b2da      	uxtb	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	7858      	ldrb	r0, [r3, #1]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800965a:	2301      	movs	r3, #1
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	f7fd fdb9 	bl	80071d4 <disk_read>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d004      	beq.n	8009672 <f_lseek+0x1e0>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	755a      	strb	r2, [r3, #21]
 800966e:	2301      	movs	r3, #1
 8009670:	e114      	b.n	800989c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	621a      	str	r2, [r3, #32]
 8009678:	e10e      	b.n	8009898 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d908      	bls.n	8009696 <f_lseek+0x204>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7d1b      	ldrb	r3, [r3, #20]
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d102      	bne.n	8009696 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	637b      	str	r3, [r7, #52]	@ 0x34
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096a4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 80a7 	beq.w	80097fc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	895b      	ldrh	r3, [r3, #10]
 80096b2:	025b      	lsls	r3, r3, #9
 80096b4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d01b      	beq.n	80096f4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	1e5a      	subs	r2, r3, #1
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	1e59      	subs	r1, r3, #1
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d30f      	bcc.n	80096f4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	1e5a      	subs	r2, r3, #1
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	425b      	negs	r3, r3
 80096dc:	401a      	ands	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096f2:	e022      	b.n	800973a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d119      	bne.n	8009734 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2100      	movs	r1, #0
 8009704:	4618      	mov	r0, r3
 8009706:	f7fe fb26 	bl	8007d56 <create_chain>
 800970a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800970c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970e:	2b01      	cmp	r3, #1
 8009710:	d104      	bne.n	800971c <f_lseek+0x28a>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2202      	movs	r2, #2
 8009716:	755a      	strb	r2, [r3, #21]
 8009718:	2302      	movs	r3, #2
 800971a:	e0bf      	b.n	800989c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800971c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009722:	d104      	bne.n	800972e <f_lseek+0x29c>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	755a      	strb	r2, [r3, #21]
 800972a:	2301      	movs	r3, #1
 800972c:	e0b6      	b.n	800989c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009732:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009738:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800973a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973c:	2b00      	cmp	r3, #0
 800973e:	d05d      	beq.n	80097fc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009740:	e03a      	b.n	80097b8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	603b      	str	r3, [r7, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	699a      	ldr	r2, [r3, #24]
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	441a      	add	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	7d1b      	ldrb	r3, [r3, #20]
 800975a:	f003 0302 	and.w	r3, r3, #2
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00b      	beq.n	800977a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe faf5 	bl	8007d56 <create_chain>
 800976c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800976e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009770:	2b00      	cmp	r3, #0
 8009772:	d108      	bne.n	8009786 <f_lseek+0x2f4>
							ofs = 0; break;
 8009774:	2300      	movs	r3, #0
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	e022      	b.n	80097c0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe f8f3 	bl	800796a <get_fat>
 8009784:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978c:	d104      	bne.n	8009798 <f_lseek+0x306>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	755a      	strb	r2, [r3, #21]
 8009794:	2301      	movs	r3, #1
 8009796:	e081      	b.n	800989c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979a:	2b01      	cmp	r3, #1
 800979c:	d904      	bls.n	80097a8 <f_lseek+0x316>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d304      	bcc.n	80097b2 <f_lseek+0x320>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2202      	movs	r2, #2
 80097ac:	755a      	strb	r2, [r3, #21]
 80097ae:	2302      	movs	r3, #2
 80097b0:	e074      	b.n	800989c <f_lseek+0x40a>
					fp->clust = clst;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097b6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d8c0      	bhi.n	8009742 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	441a      	add	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d012      	beq.n	80097fc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe f8a6 	bl	800792c <clust2sect>
 80097e0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80097e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d104      	bne.n	80097f2 <f_lseek+0x360>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2202      	movs	r2, #2
 80097ec:	755a      	strb	r2, [r3, #21]
 80097ee:	2302      	movs	r3, #2
 80097f0:	e054      	b.n	800989c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	0a5b      	lsrs	r3, r3, #9
 80097f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097f8:	4413      	add	r3, r2
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699a      	ldr	r2, [r3, #24]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	429a      	cmp	r2, r3
 8009806:	d90a      	bls.n	800981e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	699a      	ldr	r2, [r3, #24]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7d1b      	ldrb	r3, [r3, #20]
 8009814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009818:	b2da      	uxtb	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009826:	2b00      	cmp	r3, #0
 8009828:	d036      	beq.n	8009898 <f_lseek+0x406>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009830:	429a      	cmp	r2, r3
 8009832:	d031      	beq.n	8009898 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	7d1b      	ldrb	r3, [r3, #20]
 8009838:	b25b      	sxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	da18      	bge.n	8009870 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	7858      	ldrb	r0, [r3, #1]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a1a      	ldr	r2, [r3, #32]
 800984c:	2301      	movs	r3, #1
 800984e:	f7fd fce1 	bl	8007214 <disk_write>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d004      	beq.n	8009862 <f_lseek+0x3d0>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	755a      	strb	r2, [r3, #21]
 800985e:	2301      	movs	r3, #1
 8009860:	e01c      	b.n	800989c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	7d1b      	ldrb	r3, [r3, #20]
 8009866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800986a:	b2da      	uxtb	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	7858      	ldrb	r0, [r3, #1]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800987a:	2301      	movs	r3, #1
 800987c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800987e:	f7fd fca9 	bl	80071d4 <disk_read>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d004      	beq.n	8009892 <f_lseek+0x400>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	755a      	strb	r2, [r3, #21]
 800988e:	2301      	movs	r3, #1
 8009890:	e004      	b.n	800989c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009896:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009898:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800989c:	4618      	mov	r0, r3
 800989e:	3740      	adds	r7, #64	@ 0x40
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b09e      	sub	sp, #120	@ 0x78
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80098b0:	f107 010c 	add.w	r1, r7, #12
 80098b4:	1d3b      	adds	r3, r7, #4
 80098b6:	2202      	movs	r2, #2
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fe ff81 	bl	80087c0 <find_volume>
 80098be:	4603      	mov	r3, r0
 80098c0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 80098c8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f040 808e 	bne.w	80099ee <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80098d8:	4611      	mov	r1, r2
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fe64 	bl	80085a8 <follow_path>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80098e6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d108      	bne.n	8009900 <f_unlink+0x5c>
 80098ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80098f2:	2102      	movs	r1, #2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fd fdcd 	bl	8007494 <chk_lock>
 80098fa:	4603      	mov	r3, r0
 80098fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009900:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009904:	2b00      	cmp	r3, #0
 8009906:	d172      	bne.n	80099ee <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009908:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800990c:	b25b      	sxtb	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	da03      	bge.n	800991a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009912:	2306      	movs	r3, #6
 8009914:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009918:	e008      	b.n	800992c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800991a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009926:	2307      	movs	r3, #7
 8009928:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800992c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009930:	2b00      	cmp	r3, #0
 8009932:	d134      	bne.n	800999e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe fc5e 	bl	80081fc <ld_clust>
 8009940:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009942:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009946:	f003 0310 	and.w	r3, r3, #16
 800994a:	2b00      	cmp	r3, #0
 800994c:	d027      	beq.n	800999e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009954:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009956:	f107 0310 	add.w	r3, r7, #16
 800995a:	2100      	movs	r1, #0
 800995c:	4618      	mov	r0, r3
 800995e:	f7fe fac6 	bl	8007eee <dir_sdi>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8009968:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800996c:	2b00      	cmp	r3, #0
 800996e:	d116      	bne.n	800999e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009970:	f107 0310 	add.w	r3, r7, #16
 8009974:	2100      	movs	r1, #0
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe fc7f 	bl	800827a <dir_read>
 800997c:	4603      	mov	r3, r0
 800997e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009982:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009986:	2b00      	cmp	r3, #0
 8009988:	d102      	bne.n	8009990 <f_unlink+0xec>
 800998a:	2307      	movs	r3, #7
 800998c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009990:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009994:	2b04      	cmp	r3, #4
 8009996:	d102      	bne.n	800999e <f_unlink+0xfa>
 8009998:	2300      	movs	r3, #0
 800999a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800999e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d123      	bne.n	80099ee <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80099a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fd49 	bl	8008442 <dir_remove>
 80099b0:	4603      	mov	r3, r0
 80099b2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80099b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10c      	bne.n	80099d8 <f_unlink+0x134>
 80099be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d009      	beq.n	80099d8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80099c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80099c8:	2200      	movs	r2, #0
 80099ca:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fe f95d 	bl	8007c8c <remove_chain>
 80099d2:	4603      	mov	r3, r0
 80099d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80099d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d106      	bne.n	80099ee <f_unlink+0x14a>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fd ff34 	bl	8007850 <sync_fs>
 80099e8:	4603      	mov	r3, r0
 80099ea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80099ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3778      	adds	r7, #120	@ 0x78
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 80099fa:	b590      	push	{r4, r7, lr}
 80099fc:	b0a5      	sub	sp, #148	@ 0x94
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 8009a04:	463b      	mov	r3, r7
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fe3f 	bl	800868a <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8009a0c:	f107 0120 	add.w	r1, r7, #32
 8009a10:	1d3b      	adds	r3, r7, #4
 8009a12:	2202      	movs	r2, #2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe fed3 	bl	80087c0 <find_volume>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 8009a20:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f040 80db 	bne.w	8009be0 <f_rename+0x1e6>
		djo.obj.fs = fs;
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe fdb6 	bl	80085a8 <follow_path>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8009a42:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d108      	bne.n	8009a5c <f_rename+0x62>
 8009a4a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8009a4e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <f_rename+0x62>
 8009a56:	2306      	movs	r3, #6
 8009a58:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 8009a5c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d108      	bne.n	8009a76 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 8009a64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009a68:	2102      	movs	r1, #2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fd fd12 	bl	8007494 <chk_lock>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 8009a76:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f040 80b0 	bne.w	8009be0 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 8009a80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a82:	f103 010b 	add.w	r1, r3, #11
 8009a86:	f107 0308 	add.w	r3, r7, #8
 8009a8a:	2215      	movs	r2, #21
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fd fc82 	bl	8007396 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8009a92:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8009a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a9a:	2230      	movs	r2, #48	@ 0x30
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fd fc7a 	bl	8007396 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fd7c 	bl	80085a8 <follow_path>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8009ab6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10c      	bne.n	8009ad8 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8009abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d105      	bne.n	8009ad2 <f_rename+0xd8>
 8009ac6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d101      	bne.n	8009ad2 <f_rename+0xd8>
 8009ace:	2304      	movs	r3, #4
 8009ad0:	e000      	b.n	8009ad4 <f_rename+0xda>
 8009ad2:	2308      	movs	r3, #8
 8009ad4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8009ad8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009adc:	2b04      	cmp	r3, #4
 8009ade:	d168      	bne.n	8009bb2 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 8009ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fe fc7a 	bl	80083de <dir_register>
 8009aea:	4603      	mov	r3, r0
 8009aec:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 8009af0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d15c      	bne.n	8009bb2 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 8009af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009afa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 8009afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b02:	f103 000d 	add.w	r0, r3, #13
 8009b06:	f107 0308 	add.w	r3, r7, #8
 8009b0a:	3302      	adds	r3, #2
 8009b0c:	2213      	movs	r2, #19
 8009b0e:	4619      	mov	r1, r3
 8009b10:	f7fd fc41 	bl	8007396 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 8009b14:	7a3a      	ldrb	r2, [r7, #8]
 8009b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b1a:	330b      	adds	r3, #11
 8009b1c:	f042 0220 	orr.w	r2, r2, #32
 8009b20:	b2d2      	uxtb	r2, r2
 8009b22:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	2201      	movs	r2, #1
 8009b28:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8009b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b2e:	330b      	adds	r3, #11
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	f003 0310 	and.w	r3, r3, #16
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d03b      	beq.n	8009bb2 <f_rename+0x1b8>
 8009b3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d037      	beq.n	8009bb2 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 8009b42:	6a3c      	ldr	r4, [r7, #32]
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe fb56 	bl	80081fc <ld_clust>
 8009b50:	4603      	mov	r3, r0
 8009b52:	4619      	mov	r1, r3
 8009b54:	4620      	mov	r0, r4
 8009b56:	f7fd fee9 	bl	800792c <clust2sect>
 8009b5a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 8009b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d103      	bne.n	8009b6e <f_rename+0x174>
								res = FR_INT_ERR;
 8009b66:	2302      	movs	r3, #2
 8009b68:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8009b6c:	e021      	b.n	8009bb2 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fd fe3d 	bl	80077f4 <move_window>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	3330      	adds	r3, #48	@ 0x30
 8009b84:	3320      	adds	r3, #32
 8009b86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 8009b8a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10f      	bne.n	8009bb2 <f_rename+0x1b8>
 8009b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b96:	3301      	adds	r3, #1
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b9c:	d109      	bne.n	8009bb2 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ba2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fe fb47 	bl	800823a <st_clust>
									fs->wflag = 1;
 8009bac:	6a3b      	ldr	r3, [r7, #32]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 8009bb2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d112      	bne.n	8009be0 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 8009bba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe fc3f 	bl	8008442 <dir_remove>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 8009bca:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d106      	bne.n	8009be0 <f_rename+0x1e6>
					res = sync_fs(fs);
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fd fe3b 	bl	8007850 <sync_fs>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009be0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3794      	adds	r7, #148	@ 0x94
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd90      	pop	{r4, r7, pc}

08009bec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b087      	sub	sp, #28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c02:	4b1f      	ldr	r3, [pc, #124]	@ (8009c80 <FATFS_LinkDriverEx+0x94>)
 8009c04:	7a5b      	ldrb	r3, [r3, #9]
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d131      	bne.n	8009c70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8009c80 <FATFS_LinkDriverEx+0x94>)
 8009c0e:	7a5b      	ldrb	r3, [r3, #9]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	461a      	mov	r2, r3
 8009c14:	4b1a      	ldr	r3, [pc, #104]	@ (8009c80 <FATFS_LinkDriverEx+0x94>)
 8009c16:	2100      	movs	r1, #0
 8009c18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009c1a:	4b19      	ldr	r3, [pc, #100]	@ (8009c80 <FATFS_LinkDriverEx+0x94>)
 8009c1c:	7a5b      	ldrb	r3, [r3, #9]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	4a17      	ldr	r2, [pc, #92]	@ (8009c80 <FATFS_LinkDriverEx+0x94>)
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009c2a:	4b15      	ldr	r3, [pc, #84]	@ (8009c80 <FATFS_LinkDriverEx+0x94>)
 8009c2c:	7a5b      	ldrb	r3, [r3, #9]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	461a      	mov	r2, r3
 8009c32:	4b13      	ldr	r3, [pc, #76]	@ (8009c80 <FATFS_LinkDriverEx+0x94>)
 8009c34:	4413      	add	r3, r2
 8009c36:	79fa      	ldrb	r2, [r7, #7]
 8009c38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009c3a:	4b11      	ldr	r3, [pc, #68]	@ (8009c80 <FATFS_LinkDriverEx+0x94>)
 8009c3c:	7a5b      	ldrb	r3, [r3, #9]
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	b2d1      	uxtb	r1, r2
 8009c44:	4a0e      	ldr	r2, [pc, #56]	@ (8009c80 <FATFS_LinkDriverEx+0x94>)
 8009c46:	7251      	strb	r1, [r2, #9]
 8009c48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009c4a:	7dbb      	ldrb	r3, [r7, #22]
 8009c4c:	3330      	adds	r3, #48	@ 0x30
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	3301      	adds	r3, #1
 8009c58:	223a      	movs	r2, #58	@ 0x3a
 8009c5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	3302      	adds	r3, #2
 8009c60:	222f      	movs	r2, #47	@ 0x2f
 8009c62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	3303      	adds	r3, #3
 8009c68:	2200      	movs	r2, #0
 8009c6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	371c      	adds	r7, #28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	2400161c 	.word	0x2400161c

08009c84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009c8e:	2200      	movs	r2, #0
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff ffaa 	bl	8009bec <FATFS_LinkDriverEx>
 8009c98:	4603      	mov	r3, r0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <memset>:
 8009ca2:	4402      	add	r2, r0
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d100      	bne.n	8009cac <memset+0xa>
 8009caa:	4770      	bx	lr
 8009cac:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb0:	e7f9      	b.n	8009ca6 <memset+0x4>
	...

08009cb4 <__libc_init_array>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	4d0d      	ldr	r5, [pc, #52]	@ (8009cec <__libc_init_array+0x38>)
 8009cb8:	4c0d      	ldr	r4, [pc, #52]	@ (8009cf0 <__libc_init_array+0x3c>)
 8009cba:	1b64      	subs	r4, r4, r5
 8009cbc:	10a4      	asrs	r4, r4, #2
 8009cbe:	2600      	movs	r6, #0
 8009cc0:	42a6      	cmp	r6, r4
 8009cc2:	d109      	bne.n	8009cd8 <__libc_init_array+0x24>
 8009cc4:	4d0b      	ldr	r5, [pc, #44]	@ (8009cf4 <__libc_init_array+0x40>)
 8009cc6:	4c0c      	ldr	r4, [pc, #48]	@ (8009cf8 <__libc_init_array+0x44>)
 8009cc8:	f000 f818 	bl	8009cfc <_init>
 8009ccc:	1b64      	subs	r4, r4, r5
 8009cce:	10a4      	asrs	r4, r4, #2
 8009cd0:	2600      	movs	r6, #0
 8009cd2:	42a6      	cmp	r6, r4
 8009cd4:	d105      	bne.n	8009ce2 <__libc_init_array+0x2e>
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cdc:	4798      	blx	r3
 8009cde:	3601      	adds	r6, #1
 8009ce0:	e7ee      	b.n	8009cc0 <__libc_init_array+0xc>
 8009ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce6:	4798      	blx	r3
 8009ce8:	3601      	adds	r6, #1
 8009cea:	e7f2      	b.n	8009cd2 <__libc_init_array+0x1e>
 8009cec:	0800a1bc 	.word	0x0800a1bc
 8009cf0:	0800a1bc 	.word	0x0800a1bc
 8009cf4:	0800a1bc 	.word	0x0800a1bc
 8009cf8:	0800a1c0 	.word	0x0800a1c0

08009cfc <_init>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	bf00      	nop
 8009d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d02:	bc08      	pop	{r3}
 8009d04:	469e      	mov	lr, r3
 8009d06:	4770      	bx	lr

08009d08 <_fini>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr
